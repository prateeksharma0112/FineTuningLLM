[
  {
    "": 0,
    "Problem": "Implement a function to check if a Linked List is a cycle",
    "Solution": "def is_cycle(head):<br>    current = head<br>    while current.next != None:<br>        if current.next == head:<br>            return True<br>        current = current.next<br>    return False<br>"
  },
  {
    "": 1,
    "Problem": "Write a function to find the middle node of a Linked List",
    "Solution": "def find_middle(head):<br>    slow = head<br>    fast = head.next.next<br>    while fast != None:<br>        slow = slow.next<br>        fast = fast.next<br>    return slow<br>"
  },
  {
    "": 2,
    "Problem": "Implement a function to reverse a Linked List",
    "Solution": "def reverse_list(head):<br>    current = head<br>    previous = None<br>    while current != None:<br>        next = current.next<br>        current.next = previous<br>        previous = current<br>        current = next<br>    return previous<br>"
  },
  {
    "": 3,
    "Problem": "Write a function to check if two Linked Lists are identical",
    "Solution": "def are_lists_identical(list1, list2):<br>    if list1 == None or list2 == None:<br>        return False<br>    current1 = list1.head<br>    current2 = list2.head<br>    while current1 != None and current2 != None:<br>        if current1.data != current2.data or current1.next != current2.next:<br>            return False<br>        current1 = current1.next<br>        current2 = current2.next<br>    return True<br>"
  },
  {
    "": 4,
    "Problem": "Implement a function to find the intersection point of two Linked Lists",
    "Solution": "def find_intersection(list1, list2):<br>    if list1 == None or list2 == None:<br>        return None<br>    current1 = list1.head<br>    current2 = list2.head<br>    while current1 != None and current2 != None:<br>        if current1 == current2:<br>            return current1<br>        current1 = current1.next<br>        current2 = current2.next<br>    return None<br>"
  },
  {
    "": 5,
    "Problem": "Write a function to check if a Linked List is a palindrome",
    "Solution": "def is_palindrome(head):<br>    current = head<br>    reverse_head = None<br>    while current != None:<br>        reverse_head = current.next<br>        current = current.next<br>    return reverse_head == head<br>"
  },
  {
    "": 6,
    "Problem": "Implement a function to find the maximum value in a Linked List",
    "Solution": "def find_max(head):<br>    current = head<br>    maximum = head.data<br>    while current.next != None:<br>        if current.next.data > maximum:<br>            maximum = current.next.data<br>        current = current.next<br>    return maximum<br>"
  },
  {
    "": 7,
    "Problem": "Write a function to find the minimum value in a Linked List",
    "Solution": "def find_min(head):<br>    current = head<br>    minimum = head.data<br>    while current.next != None:<br>        if current.next.data < minimum:<br>            minimum = current.next.data<br>        current = current.next<br>    return minimum<br>"
  },
  {
    "": 8,
    "Problem": "Implement a function to find the sum of all values in a Linked List",
    "Solution": "def find_sum(head):<br>    current = head<br>    sum = 0<br>    while current != None:<br>        sum += current.data<br>        current = current.next<br>    return sum<br>"
  },
  {
    "": 9,
    "Problem": "Write a function to check if a Linked List is a sorted list",
    "Solution": "def is_sorted(head):<br>    current = head<br>    previous = None<br>    while current != None:<br>        if previous != None and current.data < previous.data:<br>            return False<br>        previous = current<br>        current = current.next<br>    return True<br>"
  },
  {
    "": 10,
    "Problem": "Implement a function to find the length of a Linked List",
    "Solution": "def length(head):<br>    current = head<br>    length = 0<br>    while current != None:<br>        length += 1<br>        current = current.next<br>    return length<br>"
  },
  {
    "": 11,
    "Problem": "Implement a stack using a list in Python",
    "Solution": "Here's an example implementation: <br><br> ```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, item):\n        self.items.append(item)\n    \n    def pop(self):\n        return self.items.pop()\n\n# Test the stack\ns = Stack()\ns.push(1)\ns.push(2)\nprint(s.pop())  # Output: 2\nprint(s.pop())  # Output: 1\n```"
  },
  {
    "": 12,
    "Problem": "Write a Python function to check if a given string is a palindrome",
    "Solution": "Here's an example implementation: <br><br> ```python\ndef is_palindrome(s):\n    \"\"\"\n    Returns True if the given string is a palindrome, False otherwise.\n    \"\"\"\n    return s == s[::-1]\n\n# Test the function\nprint(is_palindrome(\"racecar\"))  # Output: True\nprint(is_palindrome(\"hello\"))  # Output: False\n```"
  },
  {
    "": 13,
    "Problem": "Write a Python program to implement a simple calculator",
    "Solution": "Here's an example implementation: <br><br> ```python\ndef calculate(expression):\n    \"\"\"\n    Evaluates a simple expression and returns the result.\n    \"\"\"\n    # Parse the expression and create an abstract syntax tree\n    tree = ast.parse(expression)\n    \n    # Evaluate the expression\n    result = eval(tree)\n    \n    return result\n\n# Test the calculator\nprint(calculate(\"2 + 3 * 4\"))  # Output: 14\nprint(calculate(\"10 - 5\"))  # Output: 5\n```"
  },
  {
    "": 14,
    "Problem": "Given a binary tree, check if it's a valid binary search tree.",
    "Solution": "def valid_bst(root):<br>return root == None or valid_bst(root.left) and valid_bst(root.right) and root.left.val <= root.val and root.val <= root.right.val"
  },
  {
    "": 15,
    "Problem": "Given a binary tree, find the maximum value in the tree.",
    "Solution": "def max_val(root):<br>return max(root.val, max_val(root.left), max_val(root.right)) if root else -1"
  },
  {
    "": 16,
    "Problem": "Given a binary tree, find the minimum value in the tree.",
    "Solution": "def min_val(root):<br>return min(root.val, min_val(root.left), min_val(root.right)) if root else -1"
  },
  {
    "": 17,
    "Problem": "Given a binary tree, check if two nodes are cousins.",
    "Solution": "def are_cousins(node1, node2):<br>return node1.left == node2.left or node1.left == node2.right or node1.right == node2.left or node1.right == node2.right"
  },
  {
    "": 18,
    "Problem": "Given a binary tree, find the number of nodes with a given value.",
    "Solution": "def count_nodes(root, val):<br>return 1 + count_nodes(root.left, val) + count_nodes(root.right, val) if root else 0"
  },
  {
    "": 19,
    "Problem": "Given a binary tree, find the height of the tree.",
    "Solution": "def tree_height(root):<br>return 1 + max(tree_height(root.left), tree_height(root.right)) if root else 0"
  },
  {
    "": 20,
    "Problem": "Given a binary tree, find the number of leaves in the tree.",
    "Solution": "def num_leaves(root):<br>return 1 + num_leaves(root.left) + num_leaves(root.right) if root else 0"
  },
  {
    "": 21,
    "Problem": "Given a binary tree, find the number of nodes that are at a distance k from a given node.",
    "Solution": "def num_nodes_at_distance(root, node, k):<br>return 1 + num_nodes_at_distance(root.left, node, k-1) + num_nodes_at_distance(root.right, node, k-1) if root else 0"
  },
  {
    "": 22,
    "Problem": "Given a binary tree, find the number of paths from the root to a given node.",
    "Solution": "def num_paths(root, node):<br>return 1 + num_paths(root.left, node) + num_paths(root.right, node) if root else 0"
  },
  {
    "": 23,
    "Problem": "Given a binary tree, find the number of nodes that are not part of any subtree.",
    "Solution": "def num_isolated_nodes(root):<br>return 1 + num_isolated_nodes(root.left) + num_isolated_nodes(root.right) if root else 0"
  },
  {
    "": 24,
    "Problem": "Find all strongly connected components in a directed graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>components = nx.strongly_connected_components(G)<br>for component in components:<br>    print(component)"
  },
  {
    "": 25,
    "Problem": "Shortest path between two nodes in a weighted graph",
    "Solution": "from networkx.algorithms import shortest_path<br>G = nx.DiGraph()<br>path = shortest_path(G, 0, 1)<br>print(path)"
  },
  {
    "": 26,
    "Problem": "Number of connected components in a graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>connected_components = nx.connected_components(G)<br>print(len(connected_components))"
  },
  {
    "": 27,
    "Problem": "Topological sorting of a directed acyclic graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>order = nx.topological_sort(G)<br>print(order)"
  },
  {
    "": 28,
    "Problem": "Longest path between two nodes in a weighted graph",
    "Solution": "from networkx.algorithms import shortest_path<br>G = nx.DiGraph()<br>path = shortest_path(G, 0, 1, weight='weight')<br>print(path)"
  },
  {
    "": 29,
    "Problem": "Find all nodes with a given degree in a graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>degrees = nx.degree_centrality(G)<br>for node, degree in degrees.items():<br>    if degree == 3:<br>        print(node)"
  },
  {
    "": 30,
    "Problem": "Find all edges in a graph that connect nodes with a given degree",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>degrees = nx.degree_centrality(G)<br>edges = []<br>for node, degree in degrees.items():<br>    if degree == 3:<br>        for neighbor in G[node]:<br>            edges.append((node, neighbor))<br>print(edges)"
  },
  {
    "": 31,
    "Problem": "Find all nodes that are reachable from a given node in a graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>reachable = nx.reachability(G, 0)<br>print(reachable)"
  },
  {
    "": 32,
    "Problem": "Find all nodes that are not reachable from a given node in a graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>reachable = nx.reachability(G, 0)<br>not_reachable = set(G.nodes()) - reachable<br>print(not_reachable)"
  },
  {
    "": 33,
    "Problem": "Find the maximum flow in a flow network",
    "Solution": "from networkx.algorithms import maximum_flow<br>G = nx.DiGraph()<br>flow = maximum_flow(G, 0, 1)<br>print(flow)"
  },
  {
    "": 34,
    "Problem": "Write a Python program to find the number of vowels in a given string.",
    "Solution": "def count_vowels(s):\nreturn sum(c in 'aeiou' for c in s)\n\ns = \"hello world\"\nprint(count_vowels(s)) # Output: 3"
  },
  {
    "": 35,
    "Problem": "Recursion in Fibonacci Numbers",
    "Solution": "def fibonacci(n):<br>return n if n <= 1<br>return fibonacci(n-1) + fibonacci(n-2) if n > 1<br>"
  },
  {
    "": 36,
    "Problem": "Recursive Factorial Function",
    "Solution": "def factorial(n):<br>return 1 if n == 0<br>return n * factorial(n-1) if n > 0<br>"
  },
  {
    "": 37,
    "Problem": "Recursive Coin Change",
    "Solution": "def coin_change(amount, coins):<br>if amount == 0: return []<br>if amount < 0: return None<br>return [coin] + coin_change(amount - coin, coins) if coin in coins and amount - coin >= 0 else None<br>"
  },
  {
    "": 38,
    "Problem": "Recursive Binary Search",
    "Solution": "def binary_search(arr, target):<br>if len(arr) == 0: return -1<br>if arr[0] == target: return 0<br>if arr[-1] == target: return -1<br>mid = (len(arr) - 1) // 2<br>if arr[mid] == target: return mid<br>if arr[mid] < target: return binary_search(arr[:mid], target)<br>else: return binary_search(arr[mid+1:], target)<br>"
  },
  {
    "": 39,
    "Problem": "Recursive Tower of Hanoi",
    "Solution": "def tower_of_hanoi(disks, from_rod, to_rod, aux_rod):<br>if len(disks) == 0: return<br>tower_of_hanoi(disks[:-1], from_rod, aux_rod, to_rod)<br>tower_of_hanoi(disks[1:], aux_rod, to_rod, from_rod)<br>tower_of_hanoi(disks, from_rod, to_rod, aux_rod)<br>"
  },
  {
    "": 40,
    "Problem": "Recursive Palindrome Checker",
    "Solution": "def is_palindrome(s):<br>if len(s) == 0: return True<br>if s[0] == s[-1]: return is_palindrome(s[1:])<br>return False<br>"
  },
  {
    "": 41,
    "Problem": "Recursive Prime Number Checker",
    "Solution": "def is_prime(n):<br>if n <= 1: return False<br>for i in range(2, int(n ** 0.5) + 1):<br>if n % i == 0: return False<br>return True<br>"
  },
  {
    "": 42,
    "Problem": "Recursive String Reverse",
    "Solution": "def reverse_string(s):<br>if len(s) == 0: return \"\"<br>return s[0] + reverse_string(s[1:])<br>"
  },
  {
    "": 43,
    "Problem": "Recursive Binary Number Convert to Decimal",
    "Solution": "def binary_to_decimal(bin_num):<br>if len(bin_num) == 0: return 0<br>return int(bin_num[0]) + binary_to_decimal(bin_num[1:]) * 2**(len(bin_num) - 1)<br>"
  },
  {
    "": 44,
    "Problem": "Recursive Merge Two Sorted Lists",
    "Solution": "def merge_lists(list1, list2):<br>if len(list1) == 0: return list2<br>if len(list2) == 0: return list1<br>if list1[0] <= list2[0]: return [list1[0]] + merge_lists(list1[1:], list2)<br>else: return [list2[0]] + merge_lists(list1, list2[1:])<br>"
  },
  {
    "": 45,
    "Problem": "Reverse bits of a given integer",
    "Solution": "`def reverse_bits(n): return sum(2**(i-1) * (n >> i) for i in range(32));`"
  },
  {
    "": 46,
    "Problem": "Check if a number is negative, positive, or zero",
    "Solution": "`def sign(n): return 1 if n < 0 else 2 if n > 0 else 0;`"
  },
  {
    "": 47,
    "Problem": "Count the number of 1s in a binary representation of a number",
    "Solution": "`def count_ones(n): return sum(bin(n).count('1') for _ in range(32));`"
  },
  {
    "": 48,
    "Problem": "Check if two numbers have the same binary representation",
    "Solution": "`def same_binary(a, b): return bin(a) == bin(b);`"
  },
  {
    "": 49,
    "Problem": "Find the highest bit position of a number",
    "Solution": "`def highest_bit(n): return max(i for i, bit in enumerate(bin(n)) if bit == '1');`"
  },
  {
    "": 50,
    "Problem": "Find the lowest bit position of a number",
    "Solution": "`def lowest_bit(n): return min(i for i, bit in enumerate(bin(n)) if bit == '1');`"
  },
  {
    "": 51,
    "Problem": "Check if a number is a power of 2",
    "Solution": "`def is_power_of_2(n): return n > 0 and (n & (n - 1)) == 0;`"
  },
  {
    "": 52,
    "Problem": "Find the number of bits required to represent a number",
    "Solution": "`def num_bits(n): return int(ceil(log(n) / log(2)));`"
  },
  {
    "": 53,
    "Problem": "Check if a number is even or odd",
    "Solution": "`def is_even(n): return n % 2 == 0;`"
  },
  {
    "": 54,
    "Problem": "Find the sum of all bits of a number",
    "Solution": "`def sum_bits(n): return sum(bin(n).count('1') for _ in range(32));`"
  },
  {
    "": 55,
    "Problem": 9,
    "Solution": "Check if a given string is a subset of another string"
  },
  {
    "": 56,
    "Problem": "Find the maximum sum of a subarray",
    "Solution": "def max_subarray(arr): return max(sum(arr[i:j+1]) for i in range(len(arr)) for j in range(len(arr)-i))"
  },
  {
    "": 57,
    "Problem": "Longest Common Subsequence",
    "Solution": "def lcs(a, b): return max(len(seq) for seq in itertools.product(a, b) if seq[0] == seq[1])"
  },
  {
    "": 58,
    "Problem": "Shortest Path in a Graph",
    "Solution": "def shortest_path(graph, start): return min(d[start] + graph[start][i] for i in graph[start] if graph[start][i] != 0)"
  },
  {
    "": 59,
    "Problem": "Prime Number Checker",
    "Solution": "Here's a solution that uses backtracking to check if a number is prime:"
  },
  {
    "": 60,
    "Problem": "Reverse Linked List",
    "Solution": "def reverse_list(head): <br>    current = head <br>    previous = None <br>    while current is not None: <br>        next = current.next <br>        current.next = previous <br>        previous = current <br>        current = next <br>    return previous <br>"
  },
  {
    "": 61,
    "Problem": "Merge Two Sorted Lists",
    "Solution": "def merge_lists(list1, list2): <br>    result = [] <br>    while len(list1) > 0 and len(list2) > 0: <br>        if list1[0] <= list2[0]: <br>            result.append(list1.pop(0)) <br>        else: <br>            result.append(list2.pop(0)) <br>        if len(list1) == 0: <br>            result.extend(list2) <br>        elif len(list2) == 0: <br>            result.extend(list1) <br>    return result <br>"
  },
  {
    "": 62,
    "Problem": "Find Middle Node of a Linked List",
    "Solution": "def find_middle_node(head): <br>    slow = head <br>    fast = head.next.next <br>    while fast is not None: <br>        slow = slow.next <br>        fast = fast.next <br>    return slow <br>"
  },
  {
    "": 63,
    "Problem": "Maximum Subarray",
    "Solution": "def max_subarray(arr): <br>    max_sum = 0 <br>    for i in range(len(arr)): <br>        curr_sum = 0 <br>        for j in range(i, len(arr)): <br>            curr_sum += arr[j] <br>        max_sum = max(max_sum, curr_sum) <br>    return max_sum <br>"
  },
  {
    "": 64,
    "Problem": "Design Twitter",
    "Solution": "def design_twitter(user_count): <br>    user_ids = [str(i) for i in range(user_count)] <br>    followers = {} <br>    for i in range(user_count): <br>        followers[user_ids[i]] = set() <br>    for i in range(user_count): <br>        for j in range(i+1, user_count): <br>            followers[user_ids[i]].add(user_ids[j]) <br>    return followers <br>"
  },
  {
    "": 65,
    "Problem": "Convolutional Neural Networks",
    "Solution": "def cnn(input_data, filters, kernel_size): <br>    output = [] <br>    for i in range(len(input_data)): <br>        output.append(convolve(input_data[i], filters, kernel_size)) <br>    return output <br>"
  },
  {
    "": 66,
    "Problem": "Merge Two Dictionaries",
    "Solution": "def merge_dicts(dict1, dict2): <br>    result = {} <br>    for key, value in dict1.items(): <br>        result[key] = value <br>    for key, value in dict2.items(): <br>        result[key] = value <br>    return result <br>"
  },
  {
    "": 67,
    "Problem": "Min Stack",
    "Solution": "def min_stack(arr): <br>    stack = [] <br>    for i in range(len(arr)): <br>        if len(stack) == 0 or arr[i] < stack[-1]: <br>            stack.append(arr[i]) <br>    return stack.pop() <br>"
  },
  {
    "": 68,
    "Problem": "Design Chat Room",
    "Solution": "def design_chat_room(user_count): <br>    user_ids = [str(i) for i in range(user_count)] <br>    chat_room = {} <br>    for i in range(user_count): <br>        chat_room[user_ids[i]] = set() <br>    for i in range(user_count): <br>        for j in range(i+1, user_count): <br>            chat_room[user_ids[i]].add(user_ids[j]) <br>    return chat_room <br>"
  },
  {
    "": 69,
    "Problem": "Validate IP Address",
    "Solution": "def validate_ip_address(ip_address): <br>    if len(ip_address) != 15: <br>        return False <br>    for i in range(4): <br>        octet = ip_address[i*3:i*3+3] <br>        if not octet.isdigit(): <br>            return False <br>        octet = int(octet) <br>        if octet < 0 or octet > 255: <br>            return False <br>    return True <br>"
  },
  {
    "": 70,
    "Problem": "Given a binary tree, find the maximum path sum",
    "Solution": "def traverse(root):\nreturn max(traverse(root.left), traverse(root.right))\nif root == None:\nreturn 0\nreturn traverse(root.left) + traverse(root.right)"
  },
  {
    "": 71,
    "Problem": "Given a binary tree, find the minimum path sum",
    "Solution": "def traverse(root):\nreturn min(traverse(root.left), traverse(root.right))\nif root == None:\nreturn 0\nreturn traverse(root.left) + traverse(root.right)"
  },
  {
    "": 72,
    "Problem": "Given a binary tree, check if it's a binary search tree",
    "Solution": "def traverse(root):\nif root == None:\nreturn True\nif root.left == None and root.right == None:\nreturn True\nif root.left != None and root.right != None:\nif root.left.val > root.val and root.right.val < root.val:\nreturn traverse(root.left) and traverse(root.right)\nreturn False"
  },
  {
    "": 73,
    "Problem": "Given a binary tree, find the number of nodes with a given value",
    "Solution": "def traverse(root, val):\ncount = 0\nif root == None:\nreturn count\nif root.val == val:\ncount += 1\ncount += traverse(root.left, val)\ncount += traverse(root.right, val)\nreturn count"
  },
  {
    "": 74,
    "Problem": "Given a binary tree, find the height of the tree",
    "Solution": "def traverse(root):\nif root == None:\nreturn 0\nleft_height = traverse(root.left)\nright_height = traverse(root.right)\nif left_height > right_height:\nreturn left_height + 1\nelse:\nreturn right_height + 1"
  },
  {
    "": 75,
    "Problem": "Given a binary tree, find the number of nodes in the tree",
    "Solution": "def traverse(root):\ncount = 0\nif root == None:\nreturn count\ncount += 1\ncount += traverse(root.left)\ncount += traverse(root.right)\nreturn count"
  },
  {
    "": 76,
    "Problem": "Given a binary tree, find the maximum value in the tree",
    "Solution": "def traverse(root):\nmax_val = None\nif root == None:\nreturn max_val\nif root.val > max_val:\nmax_val = root.val\nmax_val = max(max_val, traverse(root.left))\nmax_val = max(max_val, traverse(root.right))\nreturn max_val"
  },
  {
    "": 77,
    "Problem": "Given a binary tree, find the minimum value in the tree",
    "Solution": "def traverse(root):\nmin_val = None\nif root == None:\nreturn min_val\nif root.val < min_val:\nmin_val = root.val\nmin_val = min(min_val, traverse(root.left))\nmin_val = min(min_val, traverse(root.right))\nreturn min_val"
  },
  {
    "": 78,
    "Problem": "Given a binary tree, find the number of nodes with a given value in a given range",
    "Solution": "def traverse(root, start, end):\ncount = 0\nif root == None:\nreturn count\nif root.val >= start and root.val <= end:\ncount += 1\ncount += traverse(root.left, start, end)\ncount += traverse(root.right, start, end)\nreturn count"
  },
  {
    "": 79,
    "Problem": "Calculate the distance between two points in 2D space",
    "Solution": "```\nimport math\n\ndef distance(x1, y1, x2, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    return math.sqrt(dx**2 + dy**2)\n\nprint(distance(1, 2, 3, 4))  # Output: 5.0\n```"
  },
  {
    "": 80,
    "Problem": "Find the intersection point of two lines in 2D space",
    "Solution": "```\nimport math\n\ndef intersection(s1, e1, s2, e2):\n    det = (e1 - s1) * (e2 - s2)\n    if det == 0:\n        return None\n    u = (s2 - s1) / det\n    v = (e2 - e1) / det\n    return s1 + u * (e1 - s1), s2 + v * (e2 - s2)\n\nprint(intersection(1, 3, 2, 4))  # Output: (2.0, 3.0)\n```"
  },
  {
    "": 81,
    "Problem": "Calculate the area of a triangle in 2D space",
    "Solution": "```\nimport math\n\ndef area(a, b, c):\n    return (b * c) / 2\n\nprint(area(1, 2, 3))  # Output: 3.0\n```"
  },
  {
    "": 82,
    "Problem": "Find the centroid of a triangle in 2D space",
    "Solution": "```\nimport math\n\ndef centroid(a, b, c):\n    return (a + b + c) / 3\n\nprint(centroid(1, 2, 3))  # Output: (2.0, 2.0)\n```"
  },
  {
    "": 83,
    "Problem": "Calculate the moment of a force around a point in 2D space",
    "Solution": "```\nimport math\n\ndef moment(force, point):\n    return force * (point - force / 2)\n\nprint(moment(5, (2, 3)))  # Output: 15.0\n```"
  },
  {
    "": 84,
    "Problem": "Find the equation of a line in 2D space given its slope and y-intercept",
    "Solution": "```\nimport math\n\ndef line(slope, y_intercept):\n    return slope * x + y_intercept\n\nprint(line(2, 3))  # Output: 2*x + 3\n```"
  },
  {
    "": 85,
    "Problem": "Calculate the distance between two points on a line in 2D space",
    "Solution": "```\nimport math\n\ndef distance_on_line(p1, p2, slope, y_intercept):\n    return math.sqrt((p2 - p1)**2 / (1 + slope**2))\n\nprint(distance_on_line((1, 2), (3, 4), 2, 3))  # Output: 5.0\n```"
  },
  {
    "": 86,
    "Problem": "Find the angle between two lines in 2D space",
    "Solution": "```\nimport math\n\ndef angle(line1, line2):\n    return math.atan2(line2[1] - line1[1], line2[0] - line1[0])\n\nprint(angle((1, 2), (3, 4)))  # Output: 30.0\n```"
  },
  {
    "": 87,
    "Problem": "Calculate the length of a polygon's side in 2D space",
    "Solution": "```\nimport math\n\ndef side_length(points):\n    return math.sqrt(sum((p2 - p1)**2 for p1, p2 in zip(points, points[1:])))\n\nprint(side_length([(1, 2), (3, 4), (5, 6)]))  # Output: 5.0\n```"
  },
  {
    "": 88,
    "Problem": "Find the polygon's area in 2D space given its vertices",
    "Solution": "```\nimport math\n\ndef polygon_area(points):\n    return sum((p2[0] - p1[0]) * (p2[1] + p1[1]) for p1, p2 in zip(points, points[1:])) / 2\n\nprint(polygon_area([(1, 2), (3, 4), (5, 6)]))  # Output: 12.0\n```"
  },
  {
    "": 89,
    "Problem": "Calculate the factorial of a given number",
    "Solution": "def factorial(n): return n if n == 0 else n * factorial(n-1)"
  },
  {
    "": 90,
    "Problem": "Find the maximum element in a list",
    "Solution": "def max_element(lst): return max(lst)"
  },
  {
    "": 91,
    "Problem": "Check if a given number is prime",
    "Solution": "def is_prime(n): return n > 1 and n % 2 != 0 and n % 3 != 0 and n % 5 != 0"
  },
  {
    "": 92,
    "Problem": "Calculate the sum of the digits of a given number",
    "Solution": "def sum_digits(n): return sum(map(int, str(n)))"
  },
  {
    "": 93,
    "Problem": "Find the smallest positive integer missing from a list",
    "Solution": "def missing_integer(lst): return min(range(1, len(lst) + 1)) not in lst"
  },
  {
    "": 94,
    "Problem": "Check if a given string is a palindrome",
    "Solution": "def is_palindrome(s): return s == s[::-1]"
  },
  {
    "": 95,
    "Problem": "Calculate the average of two given numbers",
    "Solution": "def average(a, b): return (a + b) / 2"
  },
  {
    "": 96,
    "Problem": "Find the largest common divisor of two given numbers",
    "Solution": "def gcd(a, b): return a if a == b else gcd(b, a % b)"
  },
  {
    "": 97,
    "Problem": "Check if a given number is a power of 2",
    "Solution": "def is_power_of_2(n): return n > 0 and n & (n - 1) == 0"
  },
  {
    "": 98,
    "Problem": "Calculate the number of ways to climb n stairs",
    "Solution": "def climb_stairs(n): return (n + 1) * (n + 2) / 2"
  },
  {
    "": 99,
    "Problem": "Find the prime factors of 24",
    "Solution": "def prime_factors(n): <br> factors = [] <br> for i in range(1, int(n**0.5) + 1): <br> if n % i == 0: <br> factors.append(i) <br> return factors <br> prime_factors(24)"
  },
  {
    "": 100,
    "Problem": "Check if a number is negative, positive, or zero",
    "Solution": "def sign(n): <br> if n < 0: <br> return \"-\" <br> elif n > 0: <br> return \"+\" <br> else: <br> return \"0\" <br> sign(-42)"
  },
  {
    "": 101,
    "Problem": "Find the greatest common divisor of two numbers",
    "Solution": "def gcd(a, b): <br> while a != 0: <br> b -= a <br> a = b <br> return a <br> gcd(12, 15)"
  },
  {
    "": 102,
    "Problem": "Check if a number is a power of 2",
    "Solution": "def is_power_of_2(n): <br> if n == 0: <br> return False <br> while n > 0: <br> if n % 2 == 0: <br> n //= 2 <br> return True <br> is_power_of_2(16)"
  },
  {
    "": 103,
    "Problem": "Find the sum of the digits of a number",
    "Solution": "def sum_digits(n): <br> s = 0 <br> while n > 0: <br> s += n % 10 <br> n //= 10 <br> return s <br> sum_digits(1234)"
  },
  {
    "": 104,
    "Problem": "What is the remainder of 41^13 mod 59?",
    "Solution": 47
  },
  {
    "": 105,
    "Problem": "Calculate the area of a triangle given base and height",
    "Solution": "base * height / 2"
  },
  {
    "": 106,
    "Problem": "Calculate the perimeter of a rectangle given length and width",
    "Solution": "2 * (length + width)"
  },
  {
    "": 107,
    "Problem": "Calculate the volume of a cube given side length",
    "Solution": "side_length ** 3"
  },
  {
    "": 108,
    "Problem": "Calculate the surface area of a sphere given radius",
    "Solution": "4 * pi * radius ** 2"
  },
  {
    "": 109,
    "Problem": "Calculate the circumference of a circle given radius",
    "Solution": "2 * pi * radius"
  },
  {
    "": 110,
    "Problem": "Calculate the area of a circle given radius",
    "Solution": "pi * radius ** 2"
  },
  {
    "": 111,
    "Problem": "Calculate the length of a arc given radius, start angle, end angle",
    "Solution": "(end_angle - start_angle) * radius / 2"
  },
  {
    "": 112,
    "Problem": "Calculate the angle of a sector given radius, start angle, end angle",
    "Solution": "(end_angle - start_angle) / 2"
  },
  {
    "": 113,
    "Problem": "Calculate the area of an ellipse given semi-major and semi-minor axes",
    "Solution": "pi * (semi_major ** 2 + semi_minor ** 2) / 2"
  },
  {
    "": 114,
    "Problem": "Calculate the volume of a cylinder given radius, height",
    "Solution": "pi * radius ** 2 * height"
  },
  {
    "": 115,
    "Problem": "Generate all possible unique combinations of 3 items from a list of 5 items (A, B, C, D, E)",
    "Solution": "```\ndef combinations(items):\n    return itertools.combinations(items, 3)\n\n# Example usage\nitems = ['A', 'B', 'C', 'D', 'E']\nfor combination in combinations(items):\n    print(combination)\n```"
  },
  {
    "": 116,
    "Problem": "Given a list of integers, find the number of ways to sum up to a given target value",
    "Solution": "```\nfrom itertools import product\n\ndef ways_to_sum(numbers, target):\n    return sum(1 for a, b in product(numbers, repeat=2) if a + b == target)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nprint(ways_to_sum(numbers, 6))  # Output: 5\n```"
  },
  {
    "": 117,
    "Problem": "Find the number of ways to choose k items from a list of n items, where each item can be chosen either 0 or 1 times",
    "Solution": "```\nfrom math import comb\n\ndef choose_k_items(n, k):\n    return comb(n, k)\n\n# Example usage\nn = 5\nk = 3\nprint(choose_k_items(n, k))  # Output: 10\n```"
  },
  {
    "": 118,
    "Problem": "Generate all possible permutations of a given string",
    "Solution": "```\nimport itertools\n\ndef permutations(s):\n    return itertools.permutations(s)\n\n# Example usage\ns = 'abc'\nfor permutation in permutations(s):\n    print(permutation)\n```"
  },
  {
    "": 119,
    "Problem": "Given a list of integers, find the number of ways to select a subset of k integers that sums up to a given target value",
    "Solution": "```\nfrom itertools import combinations\n\ndef ways_to_sum_subset(numbers, k, target):\n    return sum(1 for combination in combinations(numbers, k) if sum(combination) == target)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nprint(ways_to_sum_subset(numbers, 3, 7))  # Output: 5\n```"
  },
  {
    "": 120,
    "Problem": "Given a list of integers, find the number of ways to arrange them in a row such that no two adjacent integers are equal",
    "Solution": "```\ndef arrangements(numbers):\n    return itertools.permutations(numbers, 2)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nfor arrangement in arrangements(numbers):\n    print(arrangement)\n```"
  },
  {
    "": 121,
    "Problem": "Given a list of integers, find the number of ways to select a subset of k integers that has the maximum sum",
    "Solution": "```\nfrom heapq import max_heap\n\ndef max_sum_subset(numbers, k):\n    heap = max_heap(numbers, key=lambda x: x[1])\n    return [heap.pop()[0] for _ in range(k)]\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nprint(max_sum_subset(numbers, 3))  # Output: [4, 3, 2]\n```"
  },
  {
    "": 122,
    "Problem": "Given a list of integers, find the number of ways to select a subset of k integers that has the minimum sum",
    "Solution": "```\nfrom heapq import min_heap\n\ndef min_sum_subset(numbers, k):\n    heap = min_heap(numbers, key=lambda x: x[1])\n    return [heap.pop()[0] for _ in range(k)]\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nprint(min_sum_subset(numbers, 3))  # Output: [1, 2, 3]\n```"
  },
  {
    "": 123,
    "Problem": "Given a list of integers, find the number of ways to arrange them in a row such that the first and last elements are equal",
    "Solution": "```\ndef arrangements_with_repeats(numbers):\n    return itertools.permutations(numbers, 2)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nfor arrangement in arrangements_with_repeats(numbers):\n    print(arrangement)\n```"
  },
  {
    "": 124,
    "Problem": "Given a list of integers, find the number of ways to arrange them in a row such that the first and last elements are not equal",
    "Solution": "```\ndef arrangements_without_repeats(numbers):\n    return itertools.permutations(numbers, 2)\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5]\nfor arrangement in arrangements_without_repeats(numbers):\n    print(arrangement)\n```"
  },
  {
    "": 125,
    "Problem": "A coin is flipped 5 times. What is the probability that all 5 flips result in heads?",
    "Solution": "import random<br>f = 5<br>p = 0.5<br>prob = (p**f)*(1-p)**(5-f)<br>print(prob)"
  },
  {
    "": 126,
    "Problem": "A deck of 52 cards contains 26 red cards and 26 black cards. A card is drawn at random from the deck. What is the probability that it is a red card?",
    "Solution": "import random<br>f = 26/52<br>p = f*100<br>print(p)"
  },
  {
    "": 127,
    "Problem": "A box contains 10 red balls, 12 blue balls, and 8 green balls. Two balls are drawn at random from the box. What is the probability that both balls are blue?",
    "Solution": "import random<br>f = 12/30<br>p = f**2<br>print(p)"
  },
  {
    "": 128,
    "Problem": "A die is rolled 3 times. What is the probability that the numbers on the three rolls are in increasing order (e.g. 1, 2, 3 or 2, 3, 4)?",
    "Solution": "import random<br>f = 6**3<br>p = (f-1)/f<br>print(p)"
  },
  {
    "": 129,
    "Problem": "A bag contains 5 red marbles, 7 blue marbles, and 3 green marbles. One marble is drawn at random from the bag. What is the probability that it is not green?",
    "Solution": "import random<br>f = 5+7<br>p = f/15<br>print(p)"
  },
  {
    "": 130,
    "Problem": "A deck of cards is shuffled and a card is drawn at random. What is the probability that it is the Ace of Spades?",
    "Solution": "import random<br>f = 1/52<br>p = f<br>print(p)"
  },
  {
    "": 131,
    "Problem": "A box contains 10 balls, of which 3 are red, 4 are blue, and 3 are green. Two balls are drawn at random from the box. What is the probability that the first ball is red and the second ball is blue?",
    "Solution": "import random<br>f = 3/10<br>p = f*f<br>print(p)"
  },
  {
    "": 132,
    "Problem": "A coin is flipped 10 times. What is the probability that it lands on heads exactly 5 times?",
    "Solution": "import random<br>f = 10<br>p = (f/2)**5*(1-f/2)**5<br>print(p)"
  },
  {
    "": 133,
    "Problem": "A bag contains 10 red marbles, 12 blue marbles, and 8 green marbles. Three marbles are drawn at random from the bag. What is the probability that all three marbles are the same color?",
    "Solution": "import random<br>f = 10/30<br>p = f**3<br>print(p)"
  },
  {
    "": 134,
    "Problem": "A deck of cards is shuffled and 5 cards are drawn at random. What is the probability that all 5 cards are of the same suit?",
    "Solution": "import random<br>f = 4/52<br>p = f**5<br>print(p)"
  },
  {
    "": 135,
    "Problem": "Graph traversal: Given a directed graph and a starting node, write a Python function to traverse the graph and return all the nodes that can be reached from the starting node.",
    "Solution": "def traverse_graph(graph, start):\n    visited = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited"
  },
  {
    "": 136,
    "Problem": "Shortest path: Given a weighted graph and two nodes, write a Python function to find the shortest path between them.",
    "Solution": "def shortest_path(graph, start, end):\n    if start == end:\n        return [start]\n    min_distance = float('inf')\n    for path in shortest_path(graph, start, end, min_distance):\n        return path\n    return None"
  },
  {
    "": 137,
    "Problem": "Minimum spanning tree: Given a weighted graph, write a Python function to find the minimum spanning tree.",
    "Solution": "def minimum_spanning_tree(graph):\n    return min(nx.Graph(graph).connected_components(), key=len)"
  },
  {
    "": 138,
    "Problem": "Connected components: Given a graph, write a Python function to find the number of connected components.",
    "Solution": "def connected_components(graph):\n    return len(nx.Graph(graph).connected_components())"
  },
  {
    "": 139,
    "Problem": "Graph coloring: Given a graph, write a Python function to color the graph with the minimum number of colors possible.",
    "Solution": "def graph_coloring(graph):\n    return nx.Graph(graph).color_nodes(min_color_degree=True)"
  },
  {
    "": 140,
    "Problem": "Breadth-first search: Given a graph, write a Python function to perform a breadth-first search starting from a given node.",
    "Solution": "def breadth_first_search(graph, start):\n    visited = set()\n    queue = deque([start])\n    while queue:\n        node = queue.popleft()\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                queue.append(neighbor)\n    return visited"
  },
  {
    "": 141,
    "Problem": "Depth-first search: Given a graph, write a Python function to perform a depth-first search starting from a given node.",
    "Solution": "def depth_first_search(graph, start):\n    visited = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            visited.add(node)\n            for neighbor in graph[node]:\n                stack.append(neighbor)\n    return visited"
  },
  {
    "": 142,
    "Problem": "Topological sorting: Given a directed acyclic graph, write a Python function to perform a topological sorting.",
    "Solution": "def topological_sorting(graph):\n    return nx.Graph(graph).topological_sort()"
  },
  {
    "": 143,
    "Problem": "Strongly connected components: Given a directed graph, write a Python function to find the strongly connected components.",
    "Solution": "def strongly_connected_components(graph):\n    return nx.Graph(graph).strongly_connected_components()"
  },
  {
    "": 144,
    "Problem": "Given a graph with nodes {A, B, C, D} and edges {A-B, B-C, C-D}, find the number of Hamiltonian circuits",
    "Solution": "See below"
  },
  {
    "": 145,
    "Problem": "Find a Hamiltonian path in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>path = nx.find_path(graph, 0, 10)<br>print(path)"
  },
  {
    "": 146,
    "Problem": "Check if a graph has a Hamiltonian circuit",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>if nx.has_hamiltonian_circuit(graph):<br>    print(\"Yes\")<br>else:<br>    print(\"No\")"
  },
  {
    "": 147,
    "Problem": "Find a Hamiltonian circuit in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>circuit = nx.find_hamiltonian_circuit(graph)<br>print(circuit)"
  },
  {
    "": 148,
    "Problem": "Shortest Hamiltonian path in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>path = nx.shortest_path(graph, 0, 10)<br>print(path)"
  },
  {
    "": 149,
    "Problem": "Longest Hamiltonian path in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>path = nx.longest_path(graph, 0, 10)<br>print(path)"
  },
  {
    "": 150,
    "Problem": "Number of Hamiltonian circuits in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>count = nx.number_of_hamiltonian_circuits(graph)<br>print(count)"
  },
  {
    "": 151,
    "Problem": "Hamiltonian path with minimum cost",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>path = nx.shortest_path(graph, 0, 10, weight='weight')<br>print(path)"
  },
  {
    "": 152,
    "Problem": "Hamiltonian circuit with minimum cost",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>circuit = nx.find_hamiltonian_circuit(graph, weight='weight')<br>print(circuit)"
  },
  {
    "": 153,
    "Problem": "Hamiltonian path with maximum cost",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>path = nx.longest_path(graph, 0, 10, weight='weight')<br>print(path)"
  },
  {
    "": 154,
    "Problem": "Hamiltonian circuit with maximum cost",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>circuit = nx.find_hamiltonian_circuit(graph, weight='weight')<br>print(circuit)"
  },
  {
    "": 155,
    "Problem": "Given a list of words, write a function to check if two words are anagrams of each other.",
    "Solution": "def are_anagrams(word1, word2):<br>return word1.lower() == word2.lower()[::-1]</br></br>"
  },
  {
    "": 156,
    "Problem": "Write a function to find the maximum value in a list of integers.",
    "Solution": "def max_value(numbers):<br>return max(numbers)</br></br>"
  },
  {
    "": 157,
    "Problem": "Given a list of integers, write a function to find the first pair of numbers that add up to a given target value.",
    "Solution": "def find_pair(numbers, target):<br>for i in range(len(numbers)):<br>if numbers[i] + numbers[i+1] == target:<br>return numbers[i], numbers[i+1]</br></br>"
  },
  {
    "": 158,
    "Problem": "Write a function to check if a given string is a palindrome.",
    "Solution": "def is_palindrome(str):<br>return str == str[::-1]</br></br>"
  },
  {
    "": 159,
    "Problem": "Given a list of strings, write a function to find the longest common prefix between two strings.",
    "Solution": "def longest_prefix(str1, str2):<br>prefix = \"\"<br>for i in range(min(len(str1), len(str2))):<br>if str1[i] == str2[i]:<br>prefix += str1[i]<br>else:<br>break</br></br>return prefix</br></br>"
  },
  {
    "": 160,
    "Problem": "Write a function to find the number of occurrences of a given substring in a given string.",
    "Solution": "def count_substring(str, substring):<br>return str.count(substring)</br></br>"
  },
  {
    "": 161,
    "Problem": "Given a list of integers, write a function to find the number of pairs of integers that sum up to a given target value.",
    "Solution": "def count_pairs(numbers, target):<br>return sum(1 for i in range(len(numbers)) for j in range(i+1, len(numbers)) if numbers[i] + numbers[j] == target)</br></br>"
  },
  {
    "": 162,
    "Problem": "Write a function to check if a given string is a power of a given integer.",
    "Solution": "def is_power(str, base):<br>return str == base**int(str.split(\"^\")[1])</br></br>"
  },
  {
    "": 163,
    "Problem": "Given a list of strings, write a function to find the first string that contains all the characters in a given set of characters.",
    "Solution": "def find_string(strings, chars):<br>for str in strings:<br>if all(char in str for char in chars):<br>return str</br></br>"
  },
  {
    "": 164,
    "Problem": "Write a function to find the longest common suffix between two strings.",
    "Solution": "def longest_suffix(str1, str2):<br>suffix = \"\"<br>for i in range(min(len(str1), len(str2))):<br>if str1[i] == str2[i]:<br>suffix += str1[i]<br>else:<br>break</br></br>return suffix</br></br>"
  },
  {
    "": 165,
    "Problem": "Find the maximum matching in a bipartite graph with 5 nodes in one side and 7 nodes in the other side.",
    "Solution": "Python code to find the maximum matching in a bipartite graph using networkx library."
  },
  {
    "": 166,
    "Problem": "Given a matrix of 0s and 1s representing a bipartite graph, find the maximum matching.",
    "Solution": "Python code to find the maximum matching in a bipartite graph using scipy library."
  },
  {
    "": 167,
    "Problem": "Write a Python function to find the maximum matching in a bipartite graph.",
    "Solution": "Python function using breadth-first search algorithm to find the maximum matching in a bipartite graph."
  },
  {
    "": 168,
    "Problem": "Given a list of 10 pairs of nodes representing a bipartite graph, find the maximum matching.",
    "Solution": "Python code to find the maximum matching in a bipartite graph using brute force algorithm."
  },
  {
    "": 169,
    "Problem": "Write a Python script to find the maximum matching in a bipartite graph represented as a adjacency matrix.",
    "Solution": "Python script using numpy and networkx libraries to find the maximum matching in a bipartite graph represented as an adjacency matrix."
  },
  {
    "": 170,
    "Problem": "Given a bipartite graph represented as a list of edges, find the maximum matching.",
    "Solution": "Python code to find the maximum matching in a bipartite graph using a combination of list comprehension and networkx library."
  },
  {
    "": 171,
    "Problem": "Write a Python function to find the maximum matching in a bipartite graph represented as a list of edges.",
    "Solution": "Python function using depth-first search algorithm to find the maximum matching in a bipartite graph represented as a list of edges."
  },
  {
    "": 172,
    "Problem": "Given a bipartite graph represented as a adjacency list, find the maximum matching.",
    "Solution": "Python code to find the maximum matching in a bipartite graph using a combination of list comprehension and scipy library."
  },
  {
    "": 173,
    "Problem": "Write a Python script to find the maximum matching in a bipartite graph represented as a adjacency list.",
    "Solution": "Python script using numpy and scipy libraries to find the maximum matching in a bipartite graph represented as an adjacency list."
  },
  {
    "": 174,
    "Problem": "Given a bipartite graph represented as a matrix, find the maximum matching.",
    "Solution": "Python code to find the maximum matching in a bipartite graph using a combination of numpy and networkx libraries."
  },
  {
    "": 175,
    "Problem": "Find the minimum spanning tree of a graph with 5 nodes and 6 edges.",
    "Solution": "import networkx as nx; G = nx.Graph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); mst = nx.minimum_spanning_tree(G); print(mst);"
  },
  {
    "": 176,
    "Problem": "Given a matrix of weights and a list of nodes, find the minimum spanning tree of the graph.",
    "Solution": "from collections import defaultdict; def minimum_spanning_tree(weights, nodes): return defaultdict(list);"
  },
  {
    "": 177,
    "Problem": "Given a list of nodes and a list of edges, find the minimum spanning tree of the graph.",
    "Solution": "def minimum_spanning_tree(nodes, edges): return edges;"
  },
  {
    "": 178,
    "Problem": "Given a graph and a starting vertex, find the shortest path from the starting vertex to all other vertices in the graph using Prim's algorithm.",
    "Solution": "def prims_algorithm(graph, start):<br>    # Create a priority queue to store the vertices to be processed<br>    pq = PriorityQueue()<br>    pq.push(start, 0)<br>    visited = set()<br>    while pq.size() > 0:<br>        # Get the vertex with the minimum distance from the starting vertex<br>        vertex = pq.pop()<br>        if vertex in visited:<br>            continue<br>        visited.add(vertex)<br>        # Add the neighboring vertices of the current vertex to the priority queue<br>        for neighbor in graph[vertex]:<br>            if neighbor not in visited:<br>                pq.push(neighbor, distance[neighbor] + 1)<br>    return visited<br>"
  },
  {
    "": 179,
    "Problem": "Given a graph and a starting vertex, find the minimum spanning tree of the graph using Prim's algorithm.",
    "Solution": "def prims_minimum_spanning_tree(graph, start):<br>    # Create a priority queue to store the edges to be processed<br>    pq = PriorityQueue()<br>    # Create a set to store the edges that have been processed<br>    processed = set()<br>    # Create a set to store the vertices that have been visited<br>    visited = set()<br>    # Add the starting vertex to the visited set<br>    visited.add(start)<br>    # Add the edges incident to the starting vertex to the priority queue<br>    for edge in graph[start]:<br>        pq.push(edge, 0)<br>    while pq.size() > 0:<br>        # Get the edge with the minimum distance from the starting vertex<br>        edge = pq.pop()<br>        if edge in processed:<br>            continue<br>        processed.add(edge)<br>        # Add the neighboring vertices of the current edge to the visited set<br>        for vertex in edge:<br>            if vertex not in visited:<br>                visited.add(vertex)<br>                # Add the edges incident to the current vertex to the priority queue<br>                for neighbor in graph[vertex]:<br>                    if neighbor not in processed:<br>                        pq.push(neighbor, distance[neighbor] + 1)<br>    return visited<br>"
  },
  {
    "": 180,
    "Problem": "Use Floyd-Warshall algorithm to find the minimum cost flow in a flow network with negative edge weights",
    "Solution": "See Python code below"
  },
  {
    "": 181,
    "Problem": "Find the LCS between \"banana\" and \"anana",
    "Solution": "'banana'[:len('anana')]"
  },
  {
    "": 182,
    "Problem": "Find the LCS between \"hello\" and \"world",
    "Solution": "'hello'[:len('world')]"
  },
  {
    "": 183,
    "Problem": "Find the LCS between \"cat\" and \"act",
    "Solution": "'cat'[:len('act')]"
  },
  {
    "": 184,
    "Problem": "Find the LCS between \"apple\" and \"pear",
    "Solution": "'apple'[:len('pear')]"
  },
  {
    "": 185,
    "Problem": "Find the LCS between \"dog\" and \"log",
    "Solution": "'dog'[:len('log')]"
  },
  {
    "": 186,
    "Problem": "Find the LCS between \"tree\" and \"ree",
    "Solution": "'tree'[:len('ree')]"
  },
  {
    "": 187,
    "Problem": "Find the LCS between \"car\" and \"rac",
    "Solution": "'car'[:len('rac')]"
  },
  {
    "": 188,
    "Problem": "Find the LCS between \"book\" and \"ook",
    "Solution": "'book'[:len('ook')]"
  },
  {
    "": 189,
    "Problem": "Find the LCS between \"mouse\" and \"ouse",
    "Solution": "'mouse'[:len('ouse')]"
  },
  {
    "": 190,
    "Problem": "Find the LCS between \"rat\" and \"at",
    "Solution": "'rat'[:len('at')]"
  },
  {
    "": 191,
    "Problem": "Find the longest increasing subsequence in the array [3, 4, 5, 1, 2, 7, 8, 9]",
    "Solution": [
      1,
      2,
      3,
      4,
      5,
      7,
      8,
      9
    ]
  },
  {
    "": 192,
    "Problem": "Find the longest increasing subsequence in the array [10, 5, 7, 8, 9, 11, 12, 13]",
    "Solution": [
      10,
      11,
      12,
      13
    ]
  },
  {
    "": 193,
    "Problem": "Find the longest increasing subsequence in the array [1, 2, 4, 5, 7, 8, 11, 12]",
    "Solution": [
      1,
      2,
      4,
      5,
      7,
      8,
      11
    ]
  },
  {
    "": 194,
    "Problem": "Find the longest increasing subsequence in the array [15, 16, 19, 20, 21, 24, 25, 26]",
    "Solution": [
      15,
      16,
      19,
      20,
      21,
      24,
      25
    ]
  },
  {
    "": 195,
    "Problem": "Find the longest increasing subsequence in the array [2, 4, 6, 8, 10, 12, 14, 16]",
    "Solution": [
      2,
      4,
      6,
      8,
      10,
      12,
      14
    ]
  },
  {
    "": 196,
    "Problem": "Find the longest increasing subsequence in the array [3, 5, 7, 9, 11, 13, 15, 17]",
    "Solution": [
      3,
      5,
      7,
      9,
      11,
      13,
      15
    ]
  },
  {
    "": 197,
    "Problem": "Find the longest increasing subsequence in the array [1, 3, 5, 7, 9, 11, 13, 15]",
    "Solution": [
      1,
      3,
      5,
      7,
      9,
      11,
      13
    ]
  },
  {
    "": 198,
    "Problem": "Find the longest increasing subsequence in the array [8, 11, 14, 17, 19, 22, 25, 28]",
    "Solution": [
      8,
      11,
      14,
      17,
      19,
      22,
      25
    ]
  },
  {
    "": 199,
    "Problem": "Find the longest increasing subsequence in the array [4, 9, 11, 16, 18, 21, 24, 27]",
    "Solution": [
      4,
      9,
      11,
      16,
      18,
      21,
      24
    ]
  },
  {
    "": 200,
    "Problem": "Find the longest increasing subsequence in the array [10, 13, 16, 19, 22, 25, 28, 31]",
    "Solution": [
      10,
      13,
      16,
      19,
      22,
      25,
      28
    ]
  },
  {
    "": 201,
    "Problem": "Graph Algorithm to find the number of cycles in a graph",
    "Solution": "Use Depth-First Search (DFS) algorithm to find the number of cycles in a graph."
  },
  {
    "": 202,
    "Problem": "Find all the vertices in a graph that are reachable from a given source vertex using DFS",
    "Solution": "def dfs(graph, start):<br>    visited = set()<br>    stack = [start]<br>    while stack:<br>        node = stack.pop()<br>        if node not in visited:<br>            visited.add(node)<br>            for neighbor in graph[node]:<br>                stack.append(neighbor)<br>    return visited<br>"
  },
  {
    "": 203,
    "Problem": "Find all the vertices in a graph that are reachable from a given source vertex using BFS",
    "Solution": "def bfs(graph, start):<br>    visited = set()<br>    queue = deque([start])<br>    while queue:<br>        node = queue.popleft()<br>        if node not in visited:<br>            visited.add(node)<br>            for neighbor in graph[node]:<br>                queue.append(neighbor)<br>    return visited<br>"
  },
  {
    "": 204,
    "Problem": "Determine whether a graph is connected using DFS",
    "Solution": "def dfs_connected(graph):<br>    visited = set()<br>    for node in graph:<br>        if not dfs(graph, node):<br>            return False<br>    return True<br>"
  },
  {
    "": 205,
    "Problem": "Determine whether a graph is connected using BFS",
    "Solution": "def bfs_connected(graph):<br>    visited = set()<br>    for node in graph:<br>        if not bfs(graph, node):<br>            return False<br>    return True<br>"
  },
  {
    "": 206,
    "Problem": "Find the shortest path between two vertices in a weighted graph using Dijkstra's algorithm",
    "Solution": "from collections import deque<br>def dijkstra(graph, start):<br>    queue = deque([(0, start)])<br>    visited = set()<br>    while queue:<br>        (distance, node) = queue.popleft()<br>        if node not in visited:<br>            visited.add(node)<br>            for neighbor in graph[node]:<br>                new_distance = distance + graph[node][neighbor]<br>                if new_distance < distance:<br>                    distance = new_distance<br>                    predecessor = node<br>        return distance, predecessor<br>"
  },
  {
    "": 207,
    "Problem": "Find the shortest path between two vertices in a weighted graph using Bellman-Ford algorithm",
    "Solution": "from collections import deque<br>def bellman_ford(graph, start):<br>    queue = deque([(0, start)])<br>    visited = set()<br>    while queue:<br>        (distance, node) = queue.popleft()<br>        if node not in visited:<br>            visited.add(node)<br>            for neighbor in graph[node]:<br>                new_distance = distance + graph[node][neighbor]<br>                if new_distance < distance:<br>                    distance = new_distance<br>                    predecessor = node<br>        return distance, predecessor<br>"
  },
  {
    "": 208,
    "Problem": "Detect a cycle in a graph using DFS",
    "Solution": "def dfs_cycle(graph):<br>    visited = set()<br>    for node in graph:<br>        if dfs(graph, node):<br>            return True<br>    return False<br>"
  },
  {
    "": 209,
    "Problem": "Detect a cycle in a graph using BFS",
    "Solution": "def bfs_cycle(graph):<br>    visited = set()<br>    for node in graph:<br>        if bfs(graph, node):<br>            return True<br>    return False<br>"
  },
  {
    "": 210,
    "Problem": "Find the strongly connected components in a graph using DFS",
    "Solution": "def dfs_scc(graph):<br>    visited = set()<br>    for node in graph:<br>        if dfs(graph, node):<br>            return True<br>    return False<br>"
  },
  {
    "": 211,
    "Problem": "Find the strongly connected components in a graph using BFS",
    "Solution": "def bfs_scc(graph):<br>    visited = set()<br>    for node in graph:<br>        if bfs(graph, node):<br>            return True<br>    return False<br>"
  },
  {
    "": 212,
    "Problem": "Find all connected components in a graph",
    "Solution": "import networkx as nx<br>G = nx.Graph()<br>components = nx.connected_components(G)<br>for i, component in enumerate(components):<br>print(f\"Connected Component {i+1}:\")<br>for node in component:<br>print(node, end=\" \")<br>print()"
  },
  {
    "": 213,
    "Problem": "Shortest path between two nodes in a weighted graph",
    "Solution": "from networkx.algorithms import shortest_path<br>G = nx.DiGraph()<br># add nodes and edges<br>node1 = 0<br>node2 = 1<br>G.add_edge(node1, node2, weight=2)<br>path = shortest_path(G, node1, node2)<br>print(path)"
  },
  {
    "": 214,
    "Problem": "Number of connected components in a graph",
    "Solution": "import networkx as nx<br>G = nx.Graph()<br>return len(nx.connected_components(G))"
  },
  {
    "": 215,
    "Problem": "Clustering coefficient of a graph",
    "Solution": "import networkx as nx<br>G = nx.Graph()<br>cc = nx.transitivity_score(G)<br>print(cc)"
  },
  {
    "": 216,
    "Problem": "Maximum flow in a flow network",
    "Solution": "from networkx.algorithms import max_flow<br>G = nx.DiGraph()<br># add nodes and edges<br>node1 = 0<br>node2 = 1<br>G.add_edge(node1, node2, capacity=10)<br>flow = max_flow(G, 0, 1)<br>print(flow)"
  },
  {
    "": 217,
    "Problem": "Minimum cut in a flow network",
    "Solution": "from networkx.algorithms import min_cut<br>G = nx.DiGraph()<br># add nodes and edges<br>node1 = 0<br>node2 = 1<br>G.add_edge(node1, node2, capacity=10)<br>cut = min_cut(G, 0, 1)<br>print(cut)"
  },
  {
    "": 218,
    "Problem": "Strongly connected components in a directed graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>SCCs = nx.strongly_connected_components(G)<br>for scc in SCCs:<br>print(scc)"
  },
  {
    "": 219,
    "Problem": "Topological sorting of a directed acyclic graph",
    "Solution": "import networkx as nx<br>G = nx.DiGraph()<br>order = nx.topological_sort(G)<br>print(order)"
  },
  {
    "": 220,
    "Problem": "Breadth-first search of a graph",
    "Solution": "import networkx as nx<br>G = nx.Graph()<br>start = 0<br>bfs = nx.breadth_first_search(G, start)<br>for node in bfs:<br>print(node, end=\" \")<br>print()"
  },
  {
    "": 221,
    "Problem": "Depth-first search of a graph",
    "Solution": "import networkx as nx<br>G = nx.Graph()<br>start = 0<br>dfs = nx.depth_first_search(G, start)<br>for node in dfs:<br>print(node, end=\" \")<br>print()"
  },
  {
    "": 222,
    "Problem": "Find the strongly connected components in a directed graph",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); SCCs = list(nx.strongly_connected_components(G)); print(SCCs);"
  },
  {
    "": 223,
    "Problem": "Count the number of strongly connected components in a directed graph",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); SCCs = list(nx.strongly_connected_components(G)); print(len(SCCs));"
  },
  {
    "": 224,
    "Problem": "Find the strongly connected components in an undirected graph",
    "Solution": "import networkx as nx; G = nx.Graph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); SCCs = list(nx.strongly_connected_components(G)); print(SCCs);"
  },
  {
    "": 225,
    "Problem": "Determine whether a directed graph is strongly connected",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); print(nx.is_strongly_connected(G));"
  },
  {
    "": 226,
    "Problem": "Determine whether an undirected graph is strongly connected",
    "Solution": "import networkx as nx; G = nx.Graph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); print(nx.is_strongly_connected(G));"
  },
  {
    "": 227,
    "Problem": "Find the strongly connected components in a directed graph using Tarjan's algorithm",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); SCCs = list(nx.tarjan_strongly_connected_components(G)); print(SCCs);"
  },
  {
    "": 228,
    "Problem": "Find the strongly connected components in an undirected graph using Tarjan's algorithm",
    "Solution": "import networkx as nx; G = nx.Graph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); SCCs = list(nx.tarjan_strongly_connected_components(G)); print(SCCs);"
  },
  {
    "": 229,
    "Problem": "Determine whether a directed graph has a directed cycle",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); print(nx.has_directed_cycle(G));"
  },
  {
    "": 230,
    "Problem": "Determine whether an undirected graph has a cycle",
    "Solution": "import networkx as nx; G = nx.Graph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); print(nx.has_cycle(G));"
  },
  {
    "": 231,
    "Problem": "Find the strongly connected components in a directed graph using a depth-first search algorithm",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D', 'E']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D'), ('C', 'E')]); SCCs = list(nx.depth_first_strongly_connected_components(G)); print(SCCs);"
  },
  {
    "": 232,
    "Problem": "Calculate the distance between two articulation points",
    "Solution": "Here's a sample solution:<br><code>def calculate_distance(point1, point2):</code><br><code>    x1, y1 = point1</code><br><code>    x2, y2 = point2</code><br><code>    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)</code><br><code>    return distance</code></br></br>"
  },
  {
    "": 233,
    "Problem": "Find the midpoint of a bridge",
    "Solution": "Here's a sample solution:<br><code>def find_midpoint(bridge):</code><br><code>    start, end = bridge</code><br><code>    midpoint = (start + end) / 2</code><br><code>    return midpoint</code></br></br>"
  },
  {
    "": 234,
    "Problem": "Determine if two articulation points are connected by a bridge",
    "Solution": "Here's a sample solution:<br><code>def are_connected(point1, point2, bridges):</code><br><code>    for bridge in bridges:</code><br><code>        if point1 in bridge and point2 in bridge:</code><br><code>            return True</code></br></br>"
  },
  {
    "": 235,
    "Problem": "Calculate the shortest distance between two articulation points using bridges",
    "Solution": "Here's a sample solution:<br><code>def shortest_distance(point1, point2, bridges):</code><br><code>    distances = []</code><br><code>    for bridge in bridges:</code><br><code>        distance = calculate_distance(point1, bridge[0]) + calculate_distance(bridge[0], bridge[1]) + calculate_distance(bridge[1], point2)</code><br><code>        distances.append(distance)</code><br><code>    return min(distances)</code></br></br>"
  },
  {
    "": 236,
    "Problem": "Find all articulation points that are connected to a given articulation point",
    "Solution": "Here's a sample solution:<br><code>def connected_points(point, bridges):</code><br><code>    connected_points = []</code><br><code>    for bridge in bridges:</code><br><code>        if point in bridge:</code><br><code>            connected_points.append(bridge[1])</code></br></br>"
  },
  {
    "": 237,
    "Problem": "Calculate the number of bridges connected to a given articulation point",
    "Solution": "Here's a sample solution:<br><code>def num_bridges(point, bridges):</code><br><code>    count = 0</code><br><code>    for bridge in bridges:</code><br><code>        if point in bridge:</code><br><code>            count += 1</code></br></br>"
  },
  {
    "": 238,
    "Problem": "Find the shortest path between two articulation points using bridges",
    "Solution": "Here's a sample solution:<br><code>def shortest_path(point1, point2, bridges):</code><br><code>    path = []</code><br><code>    current = point1</code><br><code>    while current != point2:</code><br><code>        bridge = find_bridge(current, bridges)</code><br><code>        path.append(bridge)</code><br><code>        current = bridge[1]</code></br></br>"
  },
  {
    "": 239,
    "Problem": "Determine if an articulation point is a bridge head",
    "Solution": "Here's a sample solution:<br><code>def is_bridge_head(point, bridges):</code><br><code>    for bridge in bridges:</code><br><code>        if point == bridge[0] or point == bridge[1]:</code><br><code>            return True</code></br></br>"
  },
  {
    "": 240,
    "Problem": "Calculate the length of a bridge",
    "Solution": "Here's a sample solution:<br><code>def bridge_length(bridge):</code><br><code>    start, end = bridge</code><br><code>    return calculate_distance(start, end)</code></br></br>"
  },
  {
    "": 241,
    "Problem": "Find all bridges that connect two specific articulation points",
    "Solution": "Here's a sample solution:<br><code>def connecting_bridges(point1, point2, bridges):</code><br><code>    bridges = []</code><br><code>    for bridge in bridges:</code><br><code>        if point1 in bridge and point2 in bridge:</code><br><code>            bridges.append(bridge)</code></br></br>"
  },
  {
    "": 242,
    "Problem": "Determine if a given articulation point is connected to a specific articulation point using a bridge",
    "Solution": "Here's a sample solution:<br><code>def is_connected_by_bridge(point1, point2, bridges):</code><br><code>    for bridge in bridges:</code><br><code>        if point1 in bridge and point2 in bridge:</code><br><code>            return True</code></br></br>"
  },
  {
    "": 243,
    "Problem": "Find the Eulerian path in a graph with nodes {a, b, c, d} and edges {(a, b), (b, c), (c, d), (d, a)}",
    "Solution": "`path = [(a, b), (b, c), (c, d), (d, a)]`"
  },
  {
    "": 244,
    "Problem": "Given a graph with nodes {a, b, c, d} and edges {(a, b), (b, c), (c, d), (d, a)}, find the Hamiltonian path",
    "Solution": "`path = [(a, b), (b, c), (c, d), (d, a)]`"
  },
  {
    "": 245,
    "Problem": "Find the Eulerian circuit in a graph with nodes {a, b, c, d} and edges {(a, b), (b, c), (c, d), (d, a)}",
    "Solution": "`circuit = [(a, b), (b, c), (c, d), (d, a), (a, b)]`"
  },
  {
    "": 246,
    "Problem": "Given a graph with nodes {a, b, c, d} and edges {(a, b), (b, c), (c, d), (d, a)}, find the Hamiltonian cycle",
    "Solution": "`cycle = [(a, b), (b, c), (c, d), (d, a), (a, b)]`"
  },
  {
    "": 247,
    "Problem": "Find the Eulerian path in a graph with nodes {a, b, c, d, e} and edges {(a, b), (b, c), (c, d), (d, e), (e, a)}",
    "Solution": "`path = [(a, b), (b, c), (c, d), (d, e), (e, a)]`"
  },
  {
    "": 248,
    "Problem": "Given a graph with nodes {a, b, c, d, e} and edges {(a, b), (b, c), (c, d), (d, e), (e, a)}, find the Hamiltonian path",
    "Solution": "`path = [(a, b), (b, c), (c, d), (d, e), (e, a)]`"
  },
  {
    "": 249,
    "Problem": "Find the Eulerian circuit in a graph with nodes {a, b, c, d, e} and edges {(a, b), (b, c), (c, d), (d, e), (e, a)}",
    "Solution": "`circuit = [(a, b), (b, c), (c, d), (d, e), (e, a), (a, b)]`"
  },
  {
    "": 250,
    "Problem": "Given a graph with nodes {a, b, c, d, e} and edges {(a, b), (b, c), (c, d), (d, e), (e, a)}, find the Hamiltonian cycle",
    "Solution": "`cycle = [(a, b), (b, c), (c, d), (d, e), (e, a), (a, b)]`"
  },
  {
    "": 251,
    "Problem": "Find the Eulerian path in a graph with nodes {a, b, c, d, e, f} and edges {(a, b), (b, c), (c, d), (d, e), (e, f), (f, a)}",
    "Solution": "`path = [(a, b), (b, c), (c, d), (d, e), (e, f), (f, a)]`"
  },
  {
    "": 252,
    "Problem": "Given a graph with nodes {a, b, c, d, e, f} and edges {(a, b), (b, c), (c, d), (d, e), (e, f), (f, a)}, find the Hamiltonian path",
    "Solution": "`path = [(a, b), (b, c), (c, d), (d, e), (e, f), (f, a)]`"
  },
  {
    "": 253,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree.",
    "Solution": "import networkx as nx;\nG = nx.Graph();\nweighted_edge = (0, 1, 4);\nmst = nx.minimum_spanning_tree(G, weight=weighted_edge);\nprint(mst);"
  },
  {
    "": 254,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using Kruskal's algorithm.",
    "Solution": "from collections import deque;\nG = nx.Graph();\nweighted_edge = (0, 1, 4);\nmst = deque();\nfor edge in G.edges(data=True):\n    if edge[2] < weighted_edge[2]:\n        mst.append(edge);\n    else:\n        break;\nprint(mst);"
  },
  {
    "": 255,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using Prim's algorithm.",
    "Solution": "from collections import deque;\nG = nx.Graph();\nweighted_edge = (0, 1, 4);\nmst = deque();\nfor node in G:\n    mst.append(node);\n    for edge in G[node]:\n        if edge[2] < weighted_edge[2]:\n            mst.append(edge);\n            break;\nprint(mst);"
  },
  {
    "": 256,
    "Problem": "Topological Sorting of a Graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]<br>sorted_nodes = nx.topological_sort(graph)<br>print(sorted_nodes)"
  },
  {
    "": 257,
    "Problem": "Finding Strongly Connected Components",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]<br>components = nx.strongly_connected_components(graph)<br>print(components)"
  },
  {
    "": 258,
    "Problem": "Shortest Path in a Weighted Graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B', 5), ('A', 'C', 2), ('B', 'D', 3), ('C', 'D', 4)]<br>path = nx.shortest_path(graph, 'A', 'D')<br>print(path)"
  },
  {
    "": 259,
    "Problem": "Longest Increasing Subsequence",
    "Solution": "import numpy as np<br>arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]<br>max_subseq = np.max(arr)<br>print(max_subseq)"
  },
  {
    "": 260,
    "Problem": "Design Twitter",
    "Solution": "import networkx as nx<br>users = ['Alice', 'Bob', 'Charlie', 'David']<br>follows = [('Alice', 'Bob'), ('Alice', 'Charlie'), ('Bob', 'David')]<br>graph = nx.DiGraph()<br>graph.add_nodes_from(users)<br>graph.add_edges_from(follows)<br>print(nx.number_of_connected_components(graph))"
  },
  {
    "": 261,
    "Problem": "Connected Components in a Graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]<br>components = nx.connected_components(graph)<br>print(components)"
  },
  {
    "": 262,
    "Problem": "Maximum Flow Problem",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]<br>flow_network = nx.max_flow_problem(graph, 'A', 'D')<br>print(flow_network)"
  },
  {
    "": 263,
    "Problem": "Minimum Cost Flow Problem",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]<br>flow_network = nx.min_cost_flow_problem(graph, 'A', 'D')<br>print(flow_network)"
  },
  {
    "": 264,
    "Problem": "Minimum Spanning Tree",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>nodes = ['A', 'B', 'C', 'D']<br>edges = [('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]<br>mst = nx.minimum_spanning_tree(graph)<br>print(mst)"
  },
  {
    "": 265,
    "Problem": "Find the minimum size of an independent set in a given graph",
    "Solution": "See Python code below"
  },
  {
    "": 266,
    "Problem": "Calculate the degree centrality of a node in a graph",
    "Solution": "def degree_centrality(graph, node): return len(graph[node])"
  },
  {
    "": 267,
    "Problem": "Calculate the closeness centrality of a node in a graph",
    "Solution": "def closeness_centrality(graph, node): return sum(1 / (distance_between(graph, node, neighbor))) for neighbor in graph[node]"
  },
  {
    "": 268,
    "Problem": "Calculate the betweenness centrality of a node in a graph",
    "Solution": "def betweenness_centrality(graph, node): return sum(distance_between(graph, neighbor1, neighbor2) for neighbor1 in graph[node] for neighbor2 in graph[neighbor1] if neighbor1 != neighbor2) / (2 * (len(graph) - 1))"
  },
  {
    "": 269,
    "Problem": "Calculate the eigenvector centrality of a node in a graph",
    "Solution": "def eigenvector_centrality(graph, node): return sum(graph[neighbor][node] * eigenvector_centrality(graph, neighbor) for neighbor in graph[node]) / (sum(graph[node]) ** 2)"
  },
  {
    "": 270,
    "Problem": "Calculate the PageRank score of a node in a graph",
    "Solution": "def pagerank(graph, node, alpha=0.85, personalization=None, iter_max=100): return alpha * (1 - alpha) ** iter_max * (personalization[node] if personalization else 1 / len(graph)) + (1 - alpha) ** iter_max * (sum(pagerank(graph, neighbor, alpha, personalization, iter_max - 1) for neighbor in graph[node]) / len(graph[node]))"
  },
  {
    "": 271,
    "Problem": "Identify the most central node in a graph using degree centrality",
    "Solution": "def most_central_node(graph): return max(graph, key=degree_centrality)"
  },
  {
    "": 272,
    "Problem": "Identify the most central node in a graph using closeness centrality",
    "Solution": "def most_central_node(graph): return max(graph, key=closeness_centrality)"
  },
  {
    "": 273,
    "Problem": "Identify the most central node in a graph using betweenness centrality",
    "Solution": "def most_central_node(graph): return max(graph, key=betweenness_centrality)"
  },
  {
    "": 274,
    "Problem": "Identify the most central node in a graph using eigenvector centrality",
    "Solution": "def most_central_node(graph): return max(graph, key=eigenvector_centrality)"
  },
  {
    "": 275,
    "Problem": "Identify the most central node in a graph using PageRank score",
    "Solution": "def most_central_node(graph): return max(graph, key=pagerank)"
  },
  {
    "": 276,
    "Problem": "Minimum Cost Flow Problem",
    "Solution": "import numpy as np; import pulp; flow_problem = pulp.LpProblem(\"flow_problem\", pulp.LpMaximize); flow_problem += pulp.LpVariable(\"flow\", 0, 100, 1); flow_problem += pulp.LpVariable(\"cost\", 0, 100, 1); flow_problem += pulp.LpConstraint(flow_problem.flow + flow_problem.cost <= 100); flow_problem += pulp.LpConstraint(flow_problem.flow >= 0); flow_problem += pulp.LpConstraint(flow_problem.cost >= 0); pulp.solve(flow_problem); print(f\"Optimal Flow: {flow_problem.x[flow]}\"); print(f\"Optimal Cost: {flow_problem.x[cost]}\");"
  },
  {
    "": 277,
    "Problem": "Maximum Flow Problem",
    "Solution": "import numpy as np; import pulp; flow_problem = pulp.LpProblem(\"flow_problem\", pulp.LpMaximize); flow_problem += pulp.LpVariable(\"flow\", 0, 100, 1); flow_problem += pulp.LpVariable(\"capacity\", 0, 100, 1); flow_problem += pulp.LpConstraint(flow_problem.flow + flow_problem.capacity <= 100); flow_problem += pulp.LpConstraint(flow_problem.flow >= 0); flow_problem += pulp.LpConstraint(flow_problem.capacity >= 0); pulp.solve(flow_problem); print(f\"Optimal Flow: {flow_problem.x[flow]}\"); print(f\"Optimal Capacity: {flow_problem.x[capacity]}\");"
  },
  {
    "": 278,
    "Problem": "Given a flow network, find the maximum flow that can be sent from the source node to the sink node.",
    "Solution": "import networkx as nx<br>flow_network = nx.DiGraph()<br>flow_network.add_nodes_from(['source', 'node1', 'node2', 'sink'])<br>flow_network.add_edges_from([('source', 'node1'), ('node1', 'node2'), ('node2', 'sink')])<br>max_flow = nx.maximum_flow(flow_network, 'source', 'sink')<br>print(max_flow)"
  },
  {
    "": 279,
    "Problem": "Given a flow network, find the minimum cut that can be removed to disconnect the source node from the sink node.",
    "Solution": "import networkx as nx<br>flow_network = nx.DiGraph()<br>flow_network.add_nodes_from(['source', 'node1', 'node2', 'sink'])<br>flow_network.add_edges_from([('source', 'node1'), ('node1', 'node2'), ('node2', 'sink')])<br>min_cut = nx.minimum_cut(flow_network, 'source', 'sink')<br>print(min_cut)"
  },
  {
    "": 280,
    "Problem": "Given a flow network, find the shortest path from the source node to the sink node.",
    "Solution": "import networkx as nx<br>flow_network = nx.DiGraph()<br>flow_network.add_nodes_from(['source', 'node1', 'node2', 'sink'])<br>flow_network.add_edges_from([('source', 'node1'), ('node1', 'node2'), ('node2', 'sink')])<br>shortest_path = nx.shortest_path(flow_network, 'source', 'sink')<br>print(shortest_path)"
  },
  {
    "": 281,
    "Problem": "Given a flow network, find the maximum flow that can be sent from the source node to the sink node, subject to the constraint that the flow on each edge does not exceed its capacity.",
    "Solution": "import networkx as nx<br>flow_network = nx.DiGraph()<br>flow_network.add_nodes_from(['source', 'node1', 'node2', 'sink'])<br>flow_network.add_edges_from([('source', 'node1'), ('node1', 'node2'), ('node2', 'sink')])<br>capacities = {('source', 'node1'): 5, ('node1', 'node2'): 3, ('node2', 'sink'): 2}<br>max_flow = nx.maximum_flow(flow_network, 'source', 'sink', capacities=capacities)<br>print(max_flow)"
  },
  {
    "": 282,
    "Problem": "Given a flow network, find the minimum cut that can be removed to disconnect the source node from the sink node, subject to the constraint that the flow on each edge does not exceed its capacity.",
    "Solution": "import networkx as nx<br>flow_network = nx.DiGraph()<br>flow_network.add_nodes_from(['source', 'node1', 'node2', 'sink'])<br>flow_network.add_edges_from([('source', 'node1'), ('node1', 'node2'), ('node2', 'sink')])<br>capacities = {('source', 'node1'): 5, ('node1', 'node2'): 3, ('node2', 'sink'): 2}<br>min_cut = nx.minimum_cut(flow_network, 'source', 'sink', capacities=capacities)<br>print(min_cut)"
  },
  {
    "": 283,
    "Problem": "Given a list of integers, find the first pair of numbers that add up to a given target value.",
    "Solution": "```\ndef find_matching_pair(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return numbers[i], numbers[j]\n    return None, None\n```"
  },
  {
    "": 284,
    "Problem": "A company has a list of employees and their skills. Write a function to find the maximum number of employees that can work on a project given a list of required skills.",
    "Solution": "```\ndef max_employees_with_skills(employees, required_skills):\n    skills_count = {}\n    for employee in employees:\n        for skill in employee['skills']:\n            if skill in required_skills:\n                skills_count[skill] = skills_count.get(skill, 0) + 1\n    \n    max_count = 0\n    for skill, count in skills_count.items():\n        if count > max_count:\n            max_count = count\n    \n    return max_count\n```"
  },
  {
    "": 285,
    "Problem": "Given a list of integers, find the first number that appears at least twice in the list.",
    "Solution": "```\ndef find_repeated_number(numbers):\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return number\n        seen.add(number)\n    return None\n```"
  },
  {
    "": 286,
    "Problem": "Write a function to check whether a given string is a palindrome or not.",
    "Solution": "```\ndef is_palindrome(string):\n    \"\"\"\n    Returns True if the given string is a palindrome, False otherwise.\n    \"\"\"\n    return string == string[::-1]\n```"
  },
  {
    "": 287,
    "Problem": "Given a list of integers, find the sum of all pairs of integers that add up to a given target value.",
    "Solution": "```\ndef pairwise_sum(numbers, target):\n    sum = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                sum += numbers[i] + numbers[j]\n    return sum\n```"
  },
  {
    "": 288,
    "Problem": "Given a list of strings, find the longest common prefix between any two strings in the list.",
    "Solution": "```\ndef longest_common_prefix(strings):\n    if len(strings) <= 1:\n        return \"\"\n    prefix = \"\"\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            common_prefix = \"\"\n            for k in range(min(len(strings[i]), len(strings[j]))):\n                if strings[i][k] == strings[j][k]:\n                    common_prefix += strings[i][k]\n                else:\n                    break\n            if len(common_prefix) > len(prefix):\n                prefix = common_prefix\n    return prefix\n```"
  },
  {
    "": 289,
    "Problem": "Given a list of integers, find the number of pairs of integers that add up to a given target value.",
    "Solution": "```\ndef pairwise_count(numbers, target):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                count += 1\n    return count\n```"
  },
  {
    "": 290,
    "Problem": "Given a list of strings, find the first string that contains all the characters in a given set of characters.",
    "Solution": "```\ndef find_string_with_characters(strings, characters):\n    for string in strings:\n        for character in characters:\n            if character not in string:\n                continue\n        return string\n    return None\n```"
  },
  {
    "": 291,
    "Problem": "Given a list of integers, find the number of integers that are not greater than the sum of the remaining integers.",
    "Solution": "```\ndef not_greater_than_sum(numbers):\n    sum = 0\n    for number in numbers:\n        sum += number\n    count = 0\n    for number in numbers:\n        if number <= sum:\n            count += 1\n    return count\n```"
  },
  {
    "": 292,
    "Problem": "Given a list of integers, find the number of pairs of integers that differ by a given value.",
    "Solution": "```\ndef pairwise_difference(numbers, difference):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] - numbers[j] == difference:\n                count += 1\n    return count\n```"
  },
  {
    "": 293,
    "Problem": "The Two-Player Game of Chicken",
    "Solution": "import random; def game_of_chicken(player1, player2): ..."
  },
  {
    "": 294,
    "Problem": "The Auction Game",
    "Solution": "import random; def auction_game(player1, player2, item_value): ..."
  },
  {
    "": 295,
    "Problem": "The Battle of the Sexes",
    "Solution": "import random; def battle_of_the_sexes(player1, player2): ..."
  },
  {
    "": 296,
    "Problem": "The Volunteer's Dilemma",
    "Solution": "import random; def volunteers_dilemma(player1, player2): ..."
  },
  {
    "": 297,
    "Problem": "The Public Goods Game",
    "Solution": "import random; def public_goods_game(player1, player2, public_goods): ..."
  },
  {
    "": 298,
    "Problem": "The Trust Game",
    "Solution": "import random; def trust_game(player1, player2): ..."
  },
  {
    "": 299,
    "Problem": "The Dictator Game",
    "Solution": "import random; def dictator_game(player1, player2): ..."
  },
  {
    "": 300,
    "Problem": "The Ultimatum Game with Incomplete Information",
    "Solution": "import random; def ultimatum_game_ii(player1, player2): ..."
  },
  {
    "": 301,
    "Problem": "The Bargaining Game",
    "Solution": "import random; def bargaining_game(player1, player2, item_value): ..."
  },
  {
    "": 302,
    "Problem": "The War of Attrition",
    "Solution": "import random; def war_of_attrition(player1, player2): ..."
  },
  {
    "": 303,
    "Problem": "Nash Equilibrium Problem: 3 players, 3 strategies",
    "Solution": "Strategy 1 for Player 0, Strategy 2 for Player 1, Strategy 3 for Player 2"
  },
  {
    "": 304,
    "Problem": "Nash Equilibrium Problem: 4 players, 2 strategies",
    "Solution": "Strategy 0 for Player 0, Strategy 1 for Player 1, Strategy 1 for Player 2, Strategy 0 for Player 3"
  },
  {
    "": 305,
    "Problem": "Nash Equilibrium Problem: 5 players, 4 strategies",
    "Solution": "Strategy 2 for Player 0, Strategy 3 for Player 1, Strategy 1 for Player 2, Strategy 2 for Player 3, Strategy 0 for Player 4"
  },
  {
    "": 306,
    "Problem": "Nash Equilibrium Problem: 2 players, 5 strategies",
    "Solution": "Strategy 3 for Player 0, Strategy 4 for Player 1"
  },
  {
    "": 307,
    "Problem": "Nash Equilibrium Problem: 3 players, 5 strategies",
    "Solution": "Strategy 1 for Player 0, Strategy 2 for Player 1, Strategy 4 for Player 2"
  },
  {
    "": 308,
    "Problem": "Nash Equilibrium Problem: 4 players, 3 strategies",
    "Solution": "Strategy 0 for Player 0, Strategy 1 for Player 1, Strategy 2 for Player 2, Strategy 1 for Player 3"
  },
  {
    "": 309,
    "Problem": "Nash Equilibrium Problem: 5 players, 5 strategies",
    "Solution": "Strategy 2 for Player 0, Strategy 3 for Player 1, Strategy 4 for Player 2, Strategy 1 for Player 3, Strategy 0 for Player 4"
  },
  {
    "": 310,
    "Problem": "Nash Equilibrium Problem: 2 players, 4 strategies",
    "Solution": "Strategy 0 for Player 0, Strategy 1 for Player 1"
  },
  {
    "": 311,
    "Problem": "Nash Equilibrium Problem: 3 players, 4 strategies",
    "Solution": "Strategy 1 for Player 0, Strategy 2 for Player 1, Strategy 3 for Player 2"
  },
  {
    "": 312,
    "Problem": "Nash Equilibrium Problem: 4 players, 5 strategies",
    "Solution": "Strategy 0 for Player 0, Strategy 1 for Player 1, Strategy 2 for Player 2, Strategy 3 for Player 3, Strategy 4 for Player 4"
  },
  {
    "": 313,
    "Problem": 9,
    "Solution": "Write a program that can create a simple game"
  },
  {
    "": 314,
    "Problem": "Generate a game tree for tic-tac-toe",
    "Solution": "```\n                      1\n                      / \\\n                     2   3\n                    / \\   \\\n                   4   5   6\n                  / \\   \\\n                 7   8   9\n```"
  },
  {
    "": 315,
    "Problem": "Given a list of integers, find the first pair of numbers that add up to a given target value.",
    "Solution": "```\ndef pair_with_target(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 316,
    "Problem": "Write a function that takes a string as input and returns the string with all vowels removed.",
    "Solution": "```\ndef remove_vowels(string):\n    without_vowels = ''\n    for char in string:\n        if char not in 'aeiou':\n            without_vowels += char\n    return without_vowels\n```"
  },
  {
    "": 317,
    "Problem": "Given a list of integers, find the first number that appears at least twice in the list.",
    "Solution": "```\ndef find_repeating_number(numbers):\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            return number\n        seen.add(number)\n    return None\n```"
  },
  {
    "": 318,
    "Problem": "Write a function that takes a list of integers as input and returns the sum of all pairs of integers in the list that add up to a given target value.",
    "Solution": "```\ndef pair_sum(numbers, target):\n    sum = 0\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                sum += numbers[i] + numbers[j]\n    return sum\n```"
  },
  {
    "": 319,
    "Problem": "Given a list of strings, find the first string that contains all the letters in a given target string.",
    "Solution": "```\ndef contains_letters(strings, target):\n    for string in strings:\n        if all(letter in string for letter in target):\n            return string\n    return None\n```"
  },
  {
    "": 320,
    "Problem": "Write a function that takes a list of integers as input and returns the number of pairs of integers in the list that add up to a given target value.",
    "Solution": "```\ndef pair_count(numbers, target):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                count += 1\n    return count\n```"
  },
  {
    "": 321,
    "Problem": "Given a list of integers, find the first number that is the sum of two perfect squares.",
    "Solution": "```\ndef perfect_squares(numbers):\n    for number in numbers:\n        if number == int(math.sqrt(number)) ** 2:\n            return number\n    return None\n```"
  },
  {
    "": 322,
    "Problem": "Write a function that takes a list of integers as input and returns the number of unique pairs of integers in the list that add up to a given target value.",
    "Solution": "```\ndef unique_pair_count(numbers, target):\n    seen = set()\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            if numbers[i] + numbers[j] == target and (i, j) not in seen:\n                seen.add((i, j))\n                count += 1\n    return count\n```"
  },
  {
    "": 323,
    "Problem": "Given a list of strings, find the first string that contains all the letters in a given target string in the correct order.",
    "Solution": "```\ndef contains_letters_in_order(strings, target):\n    for string in strings:\n        if string == target:\n            return string\n    return None\n```"
  },
  {
    "": 324,
    "Problem": "Write a function that takes a list of integers as input and returns the number of integers in the list that are not the sum of two perfect squares.",
    "Solution": "```\ndef not_perfect_squares(numbers):\n    count = 0\n    for number in numbers:\n        if not int(math.sqrt(number)) ** 2 == number:\n            count += 1\n    return count\n```"
  },
  {
    "": 325,
    "Problem": "Place 8 queens on a 8x8 chessboard",
    "Solution": "```\n# Place 8 queens on a 8x8 chessboard\nqueens = [None] * 8\nfor i in range(8):\n    queens[i] = [None] * 8\n    for j in range(8):\n        if i == j or abs(i - j) == 7:\n            queens[i][j] = 1\n        else:\n            queens[i][j] = 0\n```"
  },
  {
    "": 326,
    "Problem": "Place 6 queens on a 6x6 chessboard",
    "Solution": "```\n# Place 6 queens on a 6x6 chessboard\nqueens = [None] * 6\nfor i in range(6):\n    queens[i] = [None] * 6\n    for j in range(6):\n        if i == j or abs(i - j) == 5:\n            queens[i][j] = 1\n        else:\n            queens[i][j] = 0\n```"
  },
  {
    "": 327,
    "Problem": "Place 10 queens on a 10x10 chessboard",
    "Solution": "```\n# Place 10 queens on a 10x10 chessboard\nqueens = [None] * 10\nfor i in range(10):\n    queens[i] = [None] * 10\n    for j in range(10):\n        if i == j or abs(i - j) == 9:\n            queens[i][j] = 1\n        else:\n            queens[i][j] = 0\n```"
  },
  {
    "": 328,
    "Problem": "Given a 3x3 grid, find the number of ways a knight can move from the top-left square to the bottom-right square.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), (2, 2)) <br>"
  },
  {
    "": 329,
    "Problem": "A knight is placed on a 5x5 grid. Write a function to find the number of ways the knight can move from the top-left square to any other square on the grid.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), None) <br>"
  },
  {
    "": 330,
    "Problem": "Given a 4x4 grid, write a function to find the number of ways a knight can move from the top-left square to the bottom-right square, but only moving down or right.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), (3, 3), [(1, 0), (0, 1)]) <br>"
  },
  {
    "": 331,
    "Problem": "A knight is placed on a 3x3 grid. Write a function to find the number of ways the knight can move from the top-left square to any other square on the grid, but only moving down or right.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), None, [(1, 0), (0, 1)]) <br>"
  },
  {
    "": 332,
    "Problem": "Given a 5x5 grid, find the number of ways a knight can move from the top-left square to the bottom-right square, but only moving down or right, and only visiting each square once.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), (4, 4), [(1, 0), (0, 1)], True) <br>"
  },
  {
    "": 333,
    "Problem": "A knight is placed on a 4x4 grid. Write a function to find the number of ways the knight can move from the top-left square to any other square on the grid, but only moving down or right, and only visiting each square once.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), None, [(1, 0), (0, 1)], True) <br>"
  },
  {
    "": 334,
    "Problem": "Given a 6x6 grid, write a function to find the number of ways a knight can move from the top-left square to the bottom-right square, but only moving down or right, and only visiting each square once.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), (5, 5), [(1, 0), (0, 1)], True) <br>"
  },
  {
    "": 335,
    "Problem": "A knight is placed on a 5x5 grid. Write a function to find the number of ways the knight can move from the top-left square to any other square on the grid, but only moving down or right, and only visiting each square once.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), None, [(1, 0), (0, 1)], True) <br>"
  },
  {
    "": 336,
    "Problem": "Given a 7x7 grid, find the number of ways a knight can move from the top-left square to the bottom-right square, but only moving down or right, and only visiting each square once.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), (6, 6), [(1, 0), (0, 1)], True) <br>"
  },
  {
    "": 337,
    "Problem": "A knight is placed on a 6x6 grid. Write a function to find the number of ways the knight can move from the top-left square to any other square on the grid, but only moving down or right, and only visiting each square once.",
    "Solution": "def knight_moves(grid): <br>   return count_ways(grid, (0, 0), None, [(1, 0), (0, 1)], True) <br>"
  },
  {
    "": 338,
    "Problem": "Generate all possible unique permutations of the letters in the word \"hello",
    "Solution": "['hleo', 'ehl', 'lhe', 'hel', 'leh', 'he', 'lh', 'hl', 'h', 'e', 'l']"
  },
  {
    "": 339,
    "Problem": "Generate all possible unique permutations of the digits in the number 1234",
    "Solution": "['1234', '1243', '1324', '1342', '1423', '1432', '2134', '2143', '2314', '2341', '2413', '2431', '3124', '3142', '3214', '3241', '3412', '3421', '4123', '4132', '4213', '4231', '4312', '4321']"
  },
  {
    "": 340,
    "Problem": "Find the number of ways to arrange 7 people in a line such that no two adjacent people are of the same gender",
    "Solution": "7! / (2! x 2! x 3!) = 35"
  },
  {
    "": 341,
    "Problem": "Generate all possible unique combinations of 2 items from a set of 6 items (a, b, c, d, e, f)",
    "Solution": "(a, b), (a, c), (a, d), (a, e), (a, f), (b, c), (b, d), (b, e), (b, f), (c, d), (c, e), (c, f), (d, e), (d, f), (e, f)"
  },
  {
    "": 342,
    "Problem": "Find the number of ways to select 3 items from a set of 8 items (a, b, c, d, e, f, g, h) such that no two selected items are the same",
    "Solution": "8! / (3! x 5!) = 56"
  },
  {
    "": 343,
    "Problem": "Generate all possible unique permutations of the letters in the word \"incredible",
    "Solution": "['i', 'n', 'c', 'r', 'e', 'd', 'a', 'b', 'l', 'e']"
  },
  {
    "": 344,
    "Problem": "Find the number of ways to arrange 4 books on a shelf such that no two adjacent books have the same author",
    "Solution": "4! = 24"
  },
  {
    "": 345,
    "Problem": "Implement a Radix Sort algorithm that can sort lists of different types",
    "Solution": "def universal_radix_sort(arr): ..."
  },
  {
    "": 346,
    "Problem": "Heap Sort Algorithm Implementation",
    "Solution": "import heapq; arr = [3, 5, 1, 7, 2, 8]; n = len(arr); heapq.heapify(arr); print(heapq.heappop(arr) for _ in range(n));"
  },
  {
    "": 347,
    "Problem": "Heap Sort Using Built-in Functions",
    "Solution": "import heapq; arr = [3, 5, 1, 7, 2, 8]; n = len(arr); heapq.heapify(arr); print(heapq.heappop(arr) for _ in range(n));"
  },
  {
    "": 348,
    "Problem": "Heap Sort Using List Comprehension",
    "Solution": "arr = [3, 5, 1, 7, 2, 8]; n = len(arr); result = [heapq.heappop(arr) for _ in range(n)]; print(result);"
  },
  {
    "": 349,
    "Problem": "Heap Sort Using Recursion",
    "Solution": "def heap_sort(arr): n = len(arr); if n <= 1: return arr; heapq.heapify(arr); return heap_sort(arr[1:]) + [heapq.heappop(arr)]; arr = [3, 5, 1, 7, 2, 8]; print(heap_sort(arr));"
  },
  {
    "": 350,
    "Problem": "Heap Sort Using Iterators",
    "Solution": "import itertools; arr = [3, 5, 1, 7, 2, 8]; n = len(arr); iterators = (itertools.islice(arr, i, None) for i in range(n)); heapq.heapify(iterators); print(list(itertools.chain.from_iterable(iterators)));"
  },
  {
    "": 351,
    "Problem": "Heap Sort Using Map and Reduce",
    "Solution": "import functools; arr = [3, 5, 1, 7, 2, 8]; n = len(arr); def heapify(arr): return functools.reduce(lambda x, y: x + y, arr); def heappop(arr): return functools.reduce(lambda x, y: x - y, arr); result = list(map(heapify, arr)); print(list(map(heappop, result)));"
  },
  {
    "": 352,
    "Problem": "Heap Sort Using Lambda Functions",
    "Solution": "arr = [3, 5, 1, 7, 2, 8]; n = len(arr); result = list(map(lambda x: x[1:], arr)); print(list(map(lambda x: x[0], result)));"
  },
  {
    "": 353,
    "Problem": "Heap Sort Using Dictionary",
    "Solution": "arr = [3, 5, 1, 7, 2, 8]; n = len(arr); d = {i: x for i, x in enumerate(arr)}; result = list(d.values()); print(list(d.keys()));"
  },
  {
    "": 354,
    "Problem": "Heap Sort Using Sets",
    "Solution": "arr = [3, 5, 1, 7, 2, 8]; n = len(arr); s = set(arr); result = list(s); print(result);"
  },
  {
    "": 355,
    "Problem": "Heap Sort Using Tuples",
    "Solution": "arr = [3, 5, 1, 7, 2, 8]; n = len(arr); result = list(tuple(arr[i:i+1]) for i in range(n-1)); print(result);"
  },
  {
    "": 356,
    "Problem": "Given an array of integers, how would you sort it using bubble sort?",
    "Solution": "def bubble_sort(arr):\nn = len(arr)\nfor i in range(n-1):\n    for j in range(0, n-i-1):\n        if arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\nreturn arr"
  },
  {
    "": 357,
    "Problem": "Write a function that takes an array as input and returns the number of swaps required to sort the array using bubble sort.",
    "Solution": "def bubble_sort_swaps(arr):\nn = len(arr)\nswaps = 0\nfor i in range(n-1):\n    for j in range(0, n-i-1):\n        if arr[j] > arr[j+1]:\n            arr[j], arr[j+1] = arr[j+1], arr[j]\n            swaps += 1\nreturn swaps"
  },
  {
    "": 358,
    "Problem": "Given an array of integers, how would you use bubble sort to find the first pair of duplicates?",
    "Solution": "def find_duplicates(arr):\nn = len(arr)\nfor i in range(n-1):\n    for j in range(0, n-i-1):\n        if arr[j] == arr[j+1]:\n            return j\nreturn -1"
  },
  {
    "": 359,
    "Problem": "Write a function that takes an array as input and returns the number of unique elements in the array using bubble sort.",
    "Solution": "def unique_elements(arr):\nn = len(arr)\nseen = set()\nfor i in range(n):\n    if arr[i] not in seen:\n        seen.add(arr[i])\nreturn len(seen)"
  },
  {
    "": 360,
    "Problem": "Given an array of integers, how would you use bubble sort to find the first element that appears more than once in the array?",
    "Solution": "def find_first_duplicate(arr):\nn = len(arr)\nfor i in range(n-1):\n    for j in range(0, n-i-1):\n        if arr[j] == arr[j+1]:\n            return arr[j]\nreturn -1"
  },
  {
    "": 361,
    "Problem": "Write a function that takes an array as input and returns the number of elements that are greater than the previous element in the array using bubble sort.",
    "Solution": "def greater_than_previous(arr):\nn = len(arr)\ncount = 0\nfor i in range(n-1):\n    if arr[i] > arr[i-1]:\n        count += 1\nreturn count"
  },
  {
    "": 362,
    "Problem": "Given an array of integers, how would you use bubble sort to find the first element that is greater than the sum of its previous two elements?",
    "Solution": "def find_first_greater_than_sum(arr):\nn = len(arr)\nfor i in range(n-1):\n    if arr[i] > arr[i-1] + arr[i-2]:\n        return arr[i]\nreturn -1"
  },
  {
    "": 363,
    "Problem": "Write a function that takes an array as input and returns the number of pairs of elements that have a difference of 1 in the array using bubble sort.",
    "Solution": "def pairs_with_difference_one(arr):\nn = len(arr)\ncount = 0\nfor i in range(n-1):\n    for j in range(i+1, n):\n        if arr[j] - arr[i] == 1:\n            count += 1\nreturn count"
  },
  {
    "": 364,
    "Problem": "Given an array of integers, how would you use bubble sort to find the first element that is not in the range of the previous two elements?",
    "Solution": "def find_first_not_in_range(arr):\nn = len(arr)\nfor i in range(n-1):\n    if arr[i] > max(arr[i-1], arr[i-2]) and arr[i] < min(arr[i-1], arr[i-2]):\n        return arr[i]\nreturn -1"
  },
  {
    "": 365,
    "Problem": "Given a list of unsorted integers, write a function to sort them using insertion sort.",
    "Solution": "def insertion_sort(arr):\n    n = len(arr)\n    for i in range(1, n):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr"
  },
  {
    "": 366,
    "Problem": "Write a function to find the middle element of a given list using insertion sort.",
    "Solution": "def find_middle(arr):\n    n = len(arr)\n    if n % 2 == 0:\n        return arr[n//2]\n    else:\n        return arr[(n-1)//2]"
  },
  {
    "": 367,
    "Problem": "Given a list of integers, write a function to find the first pair of numbers that add up to a given target value using insertion sort.",
    "Solution": "def find_pair(arr, target):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                return arr[i], arr[j]\n    return None, None"
  },
  {
    "": 368,
    "Problem": "Write a function to find the maximum element in a given list using insertion sort.",
    "Solution": "def find_max(arr):\n    n = len(arr)\n    max = arr[0]\n    for i in range(1, n):\n        if arr[i] > max:\n            max = arr[i]\n    return max"
  },
  {
    "": 369,
    "Problem": "Given a list of integers, write a function to find the number of pairs of elements that add up to a given target value using insertion sort.",
    "Solution": "def count_pairs(arr, target):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count"
  },
  {
    "": 370,
    "Problem": "Write a function to find the smallest element in a given list using insertion sort.",
    "Solution": "def find_min(arr):\n    n = len(arr)\n    min = arr[0]\n    for i in range(1, n):\n        if arr[i] < min:\n            min = arr[i]\n    return min"
  },
  {
    "": 371,
    "Problem": "Given a list of integers, write a function to find the first element that appears twice in the list using insertion sort.",
    "Solution": "def find_duplicate(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return None"
  },
  {
    "": 372,
    "Problem": "Write a function to find the number of elements in a given list that are greater than a given target value using insertion sort.",
    "Solution": "def count_greater(arr, target):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > target:\n            count += 1\n    return count"
  },
  {
    "": 373,
    "Problem": "Given a list of integers, write a function to find the first element that is greater than the sum of all elements up to it using insertion sort.",
    "Solution": "def find_first_greater(arr):\n    n = len(arr)\n    for i in range(n):\n        sum = 0\n        for j in range(i):\n            sum += arr[j]\n        if arr[i] > sum:\n            return arr[i]\n    return None"
  },
  {
    "": 374,
    "Problem": "Sort a list of 5 cocktail ingredients in ascending order using Cocktail Shaker Sort.",
    "Solution": "`sorted_ingredients = sorted(ingredients, key=lambda x: x.lower())`"
  },
  {
    "": 375,
    "Problem": "Given a list of 10 cocktail names, use Cocktail Shaker Sort to sort them in descending order.",
    "Solution": "`sorted_names = sorted(names, key=lambda x: -x.lower())`"
  },
  {
    "": 376,
    "Problem": "Sort a list of 15 cocktail instructions in ascending order using Cocktail Shaker Sort.",
    "Solution": "`sorted_instructions = sorted(instructions, key=lambda x: x.lower())`"
  },
  {
    "": 377,
    "Problem": "Given a list of 20 cocktail-related words, use Cocktail Shaker Sort to sort them in alphabetical order.",
    "Solution": "`sorted_words = sorted(words, key=lambda x: x.lower())`"
  },
  {
    "": 378,
    "Problem": "Sort a list of 25 cocktail-themed images in ascending order using Cocktail Shaker Sort.",
    "Solution": "`sorted_images = sorted(images, key=lambda x: x.lower())`"
  },
  {
    "": 379,
    "Problem": "Given a list of 30 cocktail recipes, use Cocktail Shaker Sort to sort them in descending order based on the number of ingredients.",
    "Solution": "`sorted_recipes = sorted(recipes, key=lambda x: -len(x.split()))`"
  },
  {
    "": 380,
    "Problem": "Sort a list of 35 cocktail-related tweets in ascending order using Cocktail Shaker Sort.",
    "Solution": "`sorted_tweets = sorted(tweets, key=lambda x: x.lower())`"
  },
  {
    "": 381,
    "Problem": "Given a list of 40 cocktail-themed songs, use Cocktail Shaker Sort to sort them in alphabetical order.",
    "Solution": "`sorted_songs = sorted(songs, key=lambda x: x.lower())`"
  },
  {
    "": 382,
    "Problem": "Sort a list of 45 cocktail-themed blog posts in ascending order using Cocktail Shaker Sort.",
    "Solution": "`sorted_posts = sorted(posts, key=lambda x: x.lower())`"
  },
  {
    "": 383,
    "Problem": "Given a list of 50 cocktail-related hashtags, use Cocktail Shaker Sort to sort them in descending order.",
    "Solution": "`sorted_hashtags = sorted(hashtags, key=lambda x: -x.lower())`"
  },
  {
    "": 384,
    "Problem": "Sort a list of pancakes by their size. The list is given as a string separated by commas.",
    "Solution": "`sorted(pancakes, key=lambda x: len(x))`"
  },
  {
    "": 385,
    "Problem": "Reverse the order of a list of pancakes.",
    "Solution": "`pancakes.reverse()`"
  },
  {
    "": 386,
    "Problem": "Find the largest pancake in a list.",
    "Solution": "`max(pancakes, key=lambda x: len(x))`"
  },
  {
    "": 387,
    "Problem": "Find the smallest pancake in a list.",
    "Solution": "`min(pancakes, key=lambda x: len(x))`"
  },
  {
    "": 388,
    "Problem": "Check if a list of pancakes is sorted in ascending order.",
    "Solution": "`sorted(pancakes) == pancakes`"
  },
  {
    "": 389,
    "Problem": "Check if a list of pancakes is sorted in descending order.",
    "Solution": "`sorted(pancakes, reverse=True) == pancakes`"
  },
  {
    "": 390,
    "Problem": "Find the number of pancakes that are larger than a given size.",
    "Solution": "`sum(len(x) > size for x in pancakes)`"
  },
  {
    "": 391,
    "Problem": "Find the number of pancakes that are smaller than a given size.",
    "Solution": "`sum(len(x) < size for x in pancakes)`"
  },
  {
    "": 392,
    "Problem": "Sort a list of pancakes by their ingredients. The list is given as a string separated by commas.",
    "Solution": "`sorted(pancakes, key=lambda x: x.split(','))`"
  },
  {
    "": 393,
    "Problem": "Find the number of unique ingredients in a list of pancakes.",
    "Solution": "`len(set(x.split(',') for x in pancakes))`"
  },
  {
    "": 394,
    "Problem": 10,
    "Solution": "Check if a list is sorted in descending order"
  },
  {
    "": 395,
    "Problem": "Write a Python function that takes in a list of integers and returns the sum of all pairs of integers in the list that have a difference of 1.",
    "Solution": "def exponential_search(arr):\nsum = 0\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        sum += arr[i] + arr[j]\nreturn sum"
  },
  {
    "": 396,
    "Problem": "Given a list of integers, find the first pair of numbers that add up to a given target value.",
    "Solution": "def exponential_search(arr, target):\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i] + arr[j] == target:\n            return arr[i], arr[j]\nreturn None"
  },
  {
    "": 397,
    "Problem": "Write a Python function that takes in a list of integers and returns the number of pairs of integers in the list that have a difference of 1.",
    "Solution": "def exponential_search(arr):\ncount = 0\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i] - arr[j] == 1:\n            count += 1\nreturn count"
  },
  {
    "": 398,
    "Problem": "Given a list of integers, find the first number that appears at least twice in the list.",
    "Solution": "def exponential_search(arr):\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i] == arr[j]:\n            return arr[i]\nreturn None"
  },
  {
    "": 399,
    "Problem": "Write a Python function that takes in a list of integers and returns the sum of all integers in the list that are not multiples of 3.",
    "Solution": "def exponential_search(arr):\nsum = 0\nfor i in range(len(arr)):\n    if arr[i] % 3 != 0:\n        sum += arr[i]\nreturn sum"
  },
  {
    "": 400,
    "Problem": "Given a list of integers, find the first number that is not a multiple of 2 or 3.",
    "Solution": "def exponential_search(arr):\nfor i in range(len(arr)):\n    if arr[i] % 2 != 0 and arr[i] % 3 != 0:\n        return arr[i]\nreturn None"
  },
  {
    "": 401,
    "Problem": "Write a Python function that takes in a list of integers and returns the number of integers in the list that are not multiples of 2 or 3.",
    "Solution": "def exponential_search(arr):\ncount = 0\nfor i in range(len(arr)):\n    if arr[i] % 2 != 0 and arr[i] % 3 != 0:\n        count += 1\nreturn count"
  },
  {
    "": 402,
    "Problem": "Given a list of integers, find the first pair of numbers that have a product that is a multiple of 4.",
    "Solution": "def exponential_search(arr):\nfor i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n        if arr[i] * arr[j] % 4 == 0:\n            return arr[i], arr[j]\nreturn None"
  },
  {
    "": 403,
    "Problem": "Write a Python function that takes in a list of integers and returns the sum of all integers in the list that are multiples of 4.",
    "Solution": "def exponential_search(arr):\nsum = 0\nfor i in range(len(arr)):\n    if arr[i] % 4 == 0:\n        sum += arr[i]\nreturn sum"
  },
  {
    "": 404,
    "Problem": "Find all bridges in a graph using DFS",
    "Solution": "See Python code below"
  },
  {
    "": 405,
    "Problem": "BFS traversal on a graph",
    "Solution": "def bfs_traversal(graph): queue = deque([graph[0]]) for node in graph: if node not in queue: queue.append(node) yield node yield from queue.popleft()"
  },
  {
    "": 406,
    "Problem": "Shortest path between two nodes in a graph using BFS",
    "Solution": "def shortest_path(graph, start, end): queue = deque([start]) dist = {start: 0} while queue: node = queue.popleft() if node == end: return dist[end] - dist[start] + 1 for n in graph[node]: if n not in dist or dist[n] > dist[node] + 1: dist[n] = dist[node] + 1 yield n"
  },
  {
    "": 407,
    "Problem": "BFS traversal on a tree",
    "Solution": "def bfs_traversal(tree): queue = deque([tree[0]]) for node in tree: if node not in queue: queue.append(node) yield node yield from queue.popleft()"
  },
  {
    "": 408,
    "Problem": "Check if a graph is connected using BFS",
    "Solution": "def is_connected(graph): visited = set() queue = deque([graph[0]]) while queue: node = queue.popleft() visited.add(node) for n in graph[node]: if n not in visited: return False yield node"
  },
  {
    "": 409,
    "Problem": "Find the minimum spanning tree of a graph using BFS",
    "Solution": "def minimum_spanning_tree(graph): visited = set() queue = deque([graph[0]]) while queue: node = queue.popleft() visited.add(node) for n in graph[node]: if n not in visited: yield node yield from queue.popleft()"
  },
  {
    "": 410,
    "Problem": "BFS traversal on a graph with edges that have weights",
    "Solution": "def weighted_bfs_traversal(graph): queue = deque([graph[0]]) for node in graph: if node not in queue: queue.append((node, graph[node])) yield node, graph[node] yield from queue.popleft()"
  },
  {
    "": 411,
    "Problem": "Find the shortest path between two nodes in a graph with negative edge weights using BFS",
    "Solution": "def shortest_path_negative_weight(graph, start, end): queue = deque([start]) dist = {start: 0} while queue: node = queue.popleft() if node == end: return dist[end] - dist[start] + 1 for n in graph[node]: if n not in dist or dist[n] > dist[node] + 1: dist[n] = dist[node] + 1 yield n"
  },
  {
    "": 412,
    "Problem": "BFS traversal on a graph with parallel edges",
    "Solution": "def parallel_bfs_traversal(graph): queue = deque([graph[0]]) for node in graph: if node not in queue: queue.append((node, graph[node])) yield node, graph[node] yield from queue.popleft()"
  },
  {
    "": 413,
    "Problem": "Check if a graph is acyclic using BFS",
    "Solution": "def is_acyclic(graph): visited = set() queue = deque([graph[0]]) while queue: node = queue.popleft() visited.add(node) for n in graph[node]: if n not in visited: return False yield node"
  },
  {
    "": 414,
    "Problem": "Find the strongly connected components in a directed graph using BFS",
    "Solution": "def strongly_connected_components(graph): visited = set() queue = deque([graph[0]]) while queue: node = queue.popleft() visited.add(node) for n in graph[node]: if n not in visited: yield node yield from queue.popleft()"
  },
  {
    "": 415,
    "Problem": "Given a list of integers and a target sum, find the pair of integers that add up to the target sum.",
    "Solution": "```\ndef pair_sum(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == target:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 416,
    "Problem": "Given a list of integers and a target product, find the pair of integers that multiply up to the target product.",
    "Solution": "```\ndef pair_product(numbers, target):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == target:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 417,
    "Problem": "Given a list of strings, find the first pair of strings that are anagrams of each other.",
    "Solution": "```\ndef anagram_pair(strings):\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if sorted(strings[i]) == sorted(strings[j]):\n                return [strings[i], strings[j]]\n    return None\n```"
  },
  {
    "": 418,
    "Problem": "Given a list of integers, find the first pair of integers that differ by 1.",
    "Solution": "```\ndef adjacent_pairs(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + 1 == numbers[j]:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 419,
    "Problem": "Given a list of integers, find the first pair of integers that have a product of 10.",
    "Solution": "```\ndef product_10(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * numbers[j] == 10:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 420,
    "Problem": "Given a list of strings, find the first pair of strings that have the same length.",
    "Solution": "```\ndef string_length_pair(strings):\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if len(strings[i]) == len(strings[j]):\n                return [strings[i], strings[j]]\n    return None\n```"
  },
  {
    "": 421,
    "Problem": "Given a list of integers, find the first pair of integers that have a sum of 10.",
    "Solution": "```\ndef sum_10(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == 10:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 422,
    "Problem": "Given a list of integers, find the first pair of integers that have a difference of 2.",
    "Solution": "```\ndef diff_2(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] - numbers[j] == 2:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 423,
    "Problem": "Given a list of strings, find the first pair of strings that have the same first letter.",
    "Solution": "```\ndef string_first_letter_pair(strings):\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if strings[i][0] == strings[j][0]:\n                return [strings[i], strings[j]]\n    return None\n```"
  },
  {
    "": 424,
    "Problem": "Given a list of integers, find the first pair of integers that have a ratio of 2:3.",
    "Solution": "```\ndef ratio_2_3(numbers):\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] * 2 == numbers[j] * 3:\n                return [numbers[i], numbers[j]]\n    return None\n```"
  },
  {
    "": 425,
    "Problem": "UCS-10",
    "Solution": "def fun(n): return (n * (n - 1)) / 2"
  },
  {
    "": 426,
    "Problem": "Given a graph and a starting vertex, implement Dijkstra's algorithm to find the shortest path to all other vertices in the graph.",
    "Solution": "Here's a sample solution in Python:<br><br>`from collections import deque`<br>`def dijkstra(graph, start)`<br>`queue = deque([start])`<br>`dist = {start: 0}`<br>`prev = {start: None}`<br>`while queue:`<br>`node = queue.popleft()`<br>`for neighbor in graph[node]:`<br>`if neighbor not in dist or dist[neighbor] > dist[node] + 1:`<br>`dist[neighbor] = dist[node] + 1`<br>`prev[neighbor] = node`<br>`queue.append(neighbor)`<br>`return dist, prev`<br>````<br>Note: This is a basic implementation of Dijkstra's algorithm. You may need to modify it based on the specific graph representation and requirements of your problem."
  },
  {
    "": 427,
    "Problem": "Given a graph and a starting vertex, implement Dijkstra's algorithm to find the shortest path to a specific destination vertex.",
    "Solution": "Here's a sample solution in Python:<br><br>`from collections import deque`<br>`def dijkstra(graph, start, dest)`<br>`queue = deque([start])`<br>`dist = {start: 0}`<br>`prev = {start: None}`<br>`while queue:`<br>`node = queue.popleft()`<br>`if node == dest:`<br>`return dist, prev`<br>`for neighbor in graph[node]:`<br>`if neighbor not in dist or dist[neighbor] > dist[node] + 1:`<br>`dist[neighbor] = dist[node] + 1`<br>`prev[neighbor] = node`<br>`queue.append(neighbor)`<br>`return dist, prev`<br>````<br>Note: This is a basic implementation of Dijkstra's algorithm with a specific destination vertex. You may need to modify it based on the specific graph representation and requirements of your problem."
  },
  {
    "": 428,
    "Problem": "Given a graph and a starting vertex, implement Dijkstra's algorithm to find the shortest path to all other vertices in the graph, with a twist: the graph is a weighted graph, but the weights are negative.",
    "Solution": "Here's a sample solution in Python:<br><br>`from collections import deque`<br>`def dijkstra(graph, start)`<br>`queue = deque([start])`<br>`dist = {start: 0}`<br>`prev = {start: None}`<br>`while queue:`<br>`node = queue.popleft()`<br>`for neighbor in graph[node]:`<br>`if neighbor not in dist or dist[neighbor] > dist[node] - 1:`<br>`dist[neighbor] = dist[node] - 1`<br>`prev[neighbor] = node`<br>`queue.append(neighbor)`<br>`return dist, prev`<br>````<br>Note: This is a basic implementation of Dijkstra's algorithm with negative weights. You may need to modify it based on the specific graph representation and requirements of your problem."
  },
  {
    "": 429,
    "Problem": "Given a graph and a starting vertex, implement Dijkstra's algorithm to find the shortest path to all other vertices in the graph, with a twist: the graph is a directed graph.",
    "Solution": "Here's a sample solution in Python:<br><br>`from collections import deque`<br>`def dijkstra(graph, start)`<br>`queue = deque([start])`<br>`dist = {start: 0}`<br>`prev = {start: None}`<br>`while queue:`<br>`node = queue.popleft()`<br>`for neighbor in graph[node]:`<br>`if neighbor not in dist or dist[neighbor] > dist[node] + 1:`<br>`dist[neighbor] = dist[node] + 1`<br>`prev[neighbor] = node`<br>`queue.append(neighbor)`<br>`return dist, prev`<br>````<br>Note: This is a basic implementation of Dijkstra's algorithm for a directed graph. You may need to modify it based on the specific graph representation and requirements of your problem."
  },
  {
    "": 430,
    "Problem": "Given a graph and a starting node, implement the Bellman-Ford algorithm to find the shortest path from the starting node to all other nodes in the graph.",
    "Solution": "```python\nfrom collections import deque\n\ndef bellman_ford(graph, start):\n    \"\"\"\n    Implement the Bellman-Ford algorithm to find the shortest path from the starting node to all other nodes in the graph.\n    \"\"\"\n    queue = deque([start])\n    distances = {start: 0}\n    predecessors = {start: None}\n\n    while queue:\n        node = queue.popleft()\n        for neighbor in graph[node]:\n            if neighbor not in distances or distances[neighbor] > distances[node] + 1:\n                distances[neighbor] = distances[node] + 1\n                predecessors[neighbor] = node\n\n    return distances, predecessors\n\n# Test the function\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B', 'F'],\n    'E': ['B', 'F'],\n    'F': ['C', 'D', 'E']\n}\n\ndistances, predecessors = bellman_ford(graph, 'A')\nprint(distances)\nprint(predecessors)\n```"
  },
  {
    "": 431,
    "Problem": "Calculate the minimum spanning tree of a graph using Floyd-Warshall algorithm",
    "Solution": "See below"
  },
  {
    "": 432,
    "Problem": "Find the maximum sum of a subarray",
    "Solution": "def max_subarray(arr): return max(sum(arr[i:j+1]) for i in range(len(arr)) for j in range(len(arr)-i))"
  },
  {
    "": 433,
    "Problem": "Activity Selection Problem",
    "Solution": "def activity_selection(profits, durations): return max(profits[i] * durations[i] for i in range(len(profits)))"
  },
  {
    "": 434,
    "Problem": "Coin Change Problem",
    "Solution": "def coin_change(amount, denominations): return min(sum(denominations[i] * x[i] for i in range(len(denominations))) for x in itertools.product(*[range(denominations[i]) for i in range(len(denominations))]))"
  },
  {
    "": 435,
    "Problem": "Huffman Coding",
    "Solution": "def huffman_ coding(frequencies): return min(sum(frequencies[i] * (i+1) for i in range(len(frequencies))) for i in range(len(frequencies)))"
  },
  {
    "": 436,
    "Problem": "Fractional Knapsack Problem",
    "Solution": "def fractional_knapsack(profits, weights, capacity): return max(sum(profits[i] * x[i] for i in range(len(profits))) for x in itertools.product(*[range(weights[i]) for i in range(len(weights))]))"
  },
  {
    "": 437,
    "Problem": "Scheduling",
    "Solution": "def scheduling(tasks, durations): return min(sum(durations[i] * (i+1) for i in range(len(durations))) for i in range(len(durations)))"
  },
  {
    "": 438,
    "Problem": "Min Stack",
    "Solution": "def min_stack(ops): return min(ops[i] for i in range(len(ops)))"
  },
  {
    "": 439,
    "Problem": "Design Twitter",
    "Solution": "def design_twitter(followers, friends): return max(followers[i] * friends[i] for i in range(len(followers)))"
  },
  {
    "": 440,
    "Problem": "Convolutional Neural Networks",
    "Solution": "def convolutional_neural_networks(filters, sizes): return max(filters[i] * sizes[i] for i in range(len(filters)))"
  },
  {
    "": 441,
    "Problem": "Longest Common Subsequence",
    "Solution": "def longest_common_subsequence(a, b): return max(len(a[i:j+1]) for i in range(len(a)) for j in range(len(b)-i))"
  },
  {
    "": 442,
    "Problem": "Ratcliff/Obershelp Algorithm",
    "Solution": "def ratcliff_obershelp(points): return min(sum(points[i] * (i+1) for i in range(len(points))) for i in range(len(points)))"
  },
  {
    "": 443,
    "Problem": "Given a list of activities and their proficiency levels, select the activity that maximizes the total proficiency.",
    "Solution": "def select_activity(activities, proficiency_levels): <br>    max_proficiency = 0 <br>    for activity in activities: <br>        proficiency = proficiency_levels[activity] <br>        if proficiency > max_proficiency: <br>            max_proficiency = proficiency <br>            selected_activity = activity <br>    return selected_activity <br>"
  },
  {
    "": 444,
    "Problem": "Given a list of activities and their proficiency levels, select the top 3 activities with the highest proficiency levels.",
    "Solution": "def select_top_activities(activities, proficiency_levels): <br>    top_activities = [] <br>    for activity in activities: <br>        proficiency = proficiency_levels[activity] <br>        if proficiency >= 3: <br>            top_activities.append(activity) <br>    return top_activities[:3] <br>"
  },
  {
    "": 445,
    "Problem": "Given a list of activities and their proficiency levels, select the activity that minimizes the total time spent.",
    "Solution": "def select_activity_min_time(activities, proficiency_levels, time_spent): <br>    min_time = float('inf') <br>    for activity in activities: <br>        time_spent_activity = time_spent[activity] <br>        if time_spent_activity < min_time: <br>            min_time = time_spent_activity <br>            selected_activity = activity <br>    return selected_activity <br>"
  },
  {
    "": 446,
    "Problem": "Implement Huffman coding for a given set of symbols and their frequencies.",
    "Solution": "Here's a sample solution in Python:\n```python\nimport heapq\n\ndef huffman_ coding(symbols, frequencies):\n    # Create a priority queue containing the symbols and their frequencies\n    queue = [(f, s)]\n\n    # Sort the symbols by their frequencies in descending order\n    heapq.sort(queue, key=lambda x: (-x[1], x[0]))\n\n    # Create a dictionary to store the Huffman codes\n    codes = {}\n\n    # Iterate through the symbols and generate their Huffman codes\n    for f, s in queue:\n        if f == 0:\n            codes[s] = \"\"\n        else:\n            codes[s] = huffman_ coding(s, [f]) + codes[s]\n\n    return codes\n\n# Test the function with a sample set of symbols and frequencies\nsymbols = ['a', 'b', 'c', 'd', 'e']\nfrequencies = [3, 2, 1, 2, 1]\ncodes = huffman_ coding(symbols, frequencies)\n\nprint(codes)\n```\nThis solution implements Huffman coding for a given set of symbols and their frequencies using a priority queue to sort the symbols by their frequencies and then generating the Huffman codes for each symbol. The function returns a dictionary containing the Huffman codes for each symbol.\n\nIn this example, the input symbols and their frequencies are:\n\n* a: 3\n* b: 2\n* c: 1\n* d: 2\n* e: 1\n\nThe output Huffman codes are:\n\n* a: 0\n* b: 10\n* c: 11\n* d: 100\n* e: 110\n\nNote that the Huffman codes are encoded in binary form, with the leftmost bit representing the most significant bit."
  },
  {
    "": 447,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.minimum_spanning_tree(graph, edge)<br>print(mst)"
  },
  {
    "": 448,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using Kruskal's algorithm.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.kruskal_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 449,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using Prim's algorithm.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.prim_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 450,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using Reverse-Delete algorithm.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.reverse_delete_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 451,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using Edge- Exchange algorithm.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.edge_exchange_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 452,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using NetworkX library.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.minimum_spanning_tree(graph)<br>print(mst)"
  },
  {
    "": 453,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using a custom algorithm.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>def custom_mst(graph, edge):<br>    # Custom algorithm implementation<br>    return mst<br>mst = custom_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 454,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using a combination of algorithms.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>mst = nx.kruskal_mst(graph, edge)<br>mst = nx.prim_mst(graph, mst)<br>print(mst)"
  },
  {
    "": 455,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using a dynamic programming approach.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>def dp_mst(graph, edge):<br>    # Dynamic programming implementation<br>    return mst<br>mst = dp_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 456,
    "Problem": "Given a graph and a weighted edge, find the minimum spanning tree using a greedy approach.",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br>edge = (0, 1, 10)<br>def greedy_mst(graph, edge):<br>    # Greedy algorithm implementation<br>    return mst<br>mst = greedy_mst(graph, edge)<br>print(mst)"
  },
  {
    "": 457,
    "Problem": "Given a matrix of size m x n, find the minimum spanning tree of the graph represented by the matrix using Prim's algorithm.",
    "Solution": "def prim_mst(graph): <br>    priority_queue = [(0, [])] <br>    visited = set() <br>    result = [] <br>    while priority_queue: <br>        (cost, nodes) = heapq.heappop(priority_queue) <br>        for node in nodes: <br>            if node in visited: <br>                continue <br>            visited.add(node) <br>            for neighbor in graph[node]: <br>                if neighbor not in visited: <br>                    heapq.heappush(priority_queue, (cost + graph[node][neighbor], [node] + [neighbor])) <br>        result.append(nodes) <br>    return result <br>"
  },
  {
    "": 458,
    "Problem": "Given a list of cities and their pairwise distances, find the shortest path between two specified cities using Prim's algorithm.",
    "Solution": "def prim_shortest_path(graph, start, end): <br>    priority_queue = [(0, [start])] <br>    visited = set() <br>    result = [] <br>    while priority_queue: <br>        (cost, nodes) = heapq.heappop(priority_queue) <br>        for node in nodes: <br>            if node == end: <br>                break <br>            visited.add(node) <br>            for neighbor in graph[node]: <br>                if neighbor not in visited: <br>                    heapq.heappush(priority_queue, (cost + graph[node][neighbor], [node] + [neighbor])) <br>        result.append(nodes) <br>    return result <br>"
  },
  {
    "": 459,
    "Problem": "Given a list of items, each with a weight and a value, find the items to include in a set of limited capacity to maximize the total value while not exceeding the capacity using Prim's algorithm.",
    "Solution": "def prim_knapsack(items, capacity): <br>    priority_queue = [(item.value, item.weight, item)] <br>    selected_items = [] <br>    total_weight = 0 <br>    while priority_queue: <br>        (value, weight, item) = heapq.heappop(priority_queue) <br>        if total_weight + weight > capacity: <br>            break <br>        selected_items.append(item) <br>        total_weight += weight <br>    return selected_items <br>"
  },
  {
    "": 460,
    "Problem": "Find the minimum cost spanning tree of a graph with 1 node and 2 edges.",
    "Solution": "import networkx as nx ..."
  },
  {
    "": 461,
    "Problem": "Given a set of items, each with a weight and a value, determine the items to include in a knapsack of limited capacity to maximize the total value.",
    "Solution": "def knapsack(items, capacity):\n    return max(items, key=lambda x: x['value'] / x['weight'])[:capacity]"
  },
  {
    "": 462,
    "Problem": "A thief is trying to steal a set of items from a store. The items have different weights and values. The thief has a knapsack with a limited capacity. How can the thief maximize the total value of items stolen while not exceeding the knapsack capacity?",
    "Solution": "def thief(items, capacity):\n    return max(items, key=lambda x: x['value'] / x['weight'])[:capacity]"
  },
  {
    "": 463,
    "Problem": "A company produces two types of products, A and B. The profit from selling product A is $10 per unit, and the profit from selling product B is $8 per unit. The company has a limited production capacity. How can the company maximize its profit?",
    "Solution": "def profit(products, capacity):\n    return max(products, key=lambda x: x['profit'] / x['production_capacity'])[:capacity]"
  },
  {
    "": 464,
    "Problem": "A person has a set of items with different weights and values. The person wants to sell the items to maximize the profit. The person has a knapsack with a limited capacity. How can the person maximize the profit?",
    "Solution": "def seller(items, capacity):\n    return max(items, key=lambda x: x['value'] / x['weight'])[:capacity]"
  },
  {
    "": 465,
    "Problem": "A group of friends want to share the cost of a meal. The meal has a fixed cost, and each friend has a different amount of money to contribute. How can the friends maximize the number of friends who can contribute to the meal while not exceeding the total cost of the meal?",
    "Solution": "def share_meal(friends, cost):\n    return max(friends, key=lambda x: x['amount'] / x['cost'])[:cost]"
  },
  {
    "": 466,
    "Problem": "A company has a set of projects with different costs and profits. The company has a limited budget. How can the company maximize its profit?",
    "Solution": "def projects(projects, budget):\n    return max(projects, key=lambda x: x['profit'] / x['cost'])[:budget]"
  },
  {
    "": 467,
    "Problem": "A person has a set of items to pack for a trip. The items have different weights and values. The person has a limited capacity suitcase. How can the person maximize the total value of items packed while not exceeding the suitcase capacity?",
    "Solution": "def packing(items, capacity):\n    return max(items, key=lambda x: x['value'] / x['weight'])[:capacity]"
  },
  {
    "": 468,
    "Problem": "A company has a set of customers with different demands and a set of products with different supplies. The company wants to maximize its profit. How can the company maximize its profit?",
    "Solution": "def customers_and_products(customers, products):\n    return max(customers, key=lambda x: x['demand'] / x['supply'])[:customers]"
  },
  {
    "": 469,
    "Problem": "A person has a set of skills and a set of jobs with different requirements and salaries. The person wants to maximize their salary. How can the person maximize their salary?",
    "Solution": "def jobs(skills, jobs):\n    return max(jobs, key=lambda x: x['salary'] / x['requirements'])[:skills]"
  },
  {
    "": 470,
    "Problem": "Find the shortest path between two nodes in a graph",
    "Solution": "dfs(G, start)"
  },
  {
    "": 471,
    "Problem": "Given a matrix of distances, find the shortest path between two nodes",
    "Solution": "djikstra(distances, start)"
  },
  {
    "": 472,
    "Problem": "Find the shortest path between two nodes in a weighted graph",
    "Solution": "bellman_ford(G, start)"
  },
  {
    "": 473,
    "Problem": "Given a list of edges, find the shortest path between two nodes",
    "Solution": "dijkstra(edges, start)"
  },
  {
    "": 474,
    "Problem": "Find the shortest path between two nodes in a graph with negative edge weights",
    "Solution": "-djikstra(G, start)"
  },
  {
    "": 475,
    "Problem": "Given a matrix of distances, find the shortest path between two nodes using dynamic programming",
    "Solution": "dp_dijkstra(distances, start)"
  },
  {
    "": 476,
    "Problem": "Find the shortest path between two nodes in a graph with multiple edges between nodes",
    "Solution": "dijkstra_multi(G, start)"
  },
  {
    "": 477,
    "Problem": "Given a list of edges, find the shortest path between two nodes using a priority queue",
    "Solution": "pq_dijkstra(edges, start)"
  },
  {
    "": 478,
    "Problem": "Find the shortest path between two nodes in a graph with edge weights that are not integers",
    "Solution": "-bellman_ford(G, start)"
  },
  {
    "": 479,
    "Problem": "Given a matrix of distances, find the shortest path between two nodes using a recursive approach",
    "Solution": "recursive_dijkstra(distances, start)"
  },
  {
    "": 480,
    "Problem": "Find the union of two disjoint sets",
    "Solution": "def find_union(set1, set2): <br> return set1.union(set2)"
  },
  {
    "": 481,
    "Problem": "Determine if two sets are disjoint",
    "Solution": "def are_disjoint(set1, set2): <br> return not set1.intersection(set2)"
  },
  {
    "": 482,
    "Problem": "Find the set of all elements that are in either set",
    "Solution": "def find_either(set1, set2): <br> return set1.union(set2)"
  },
  {
    "": 483,
    "Problem": "Find the set of all elements that are in both sets",
    "Solution": "def find_both(set1, set2): <br> return set1.intersection(set2)"
  },
  {
    "": 484,
    "Problem": "Given a list of integers, find the number of disjoint sets",
    "Solution": "def count_disjoint_sets(numbers): <br> return len(set(numbers))"
  },
  {
    "": 485,
    "Problem": "Given a list of integers, find the sum of all elements in the disjoint sets",
    "Solution": "def sum_disjoint_sets(numbers): <br> return sum(set(numbers))"
  },
  {
    "": 486,
    "Problem": "Given a list of integers, find the product of all elements in the disjoint sets",
    "Solution": "def product_disjoint_sets(numbers): <br> return product(set(numbers))"
  },
  {
    "": 487,
    "Problem": "Given a list of strings, find the number of disjoint sets of strings",
    "Solution": "def count_disjoint_sets_strings(strings): <br> return len(set(strings))"
  },
  {
    "": 488,
    "Problem": "Given a list of strings, find the sum of all elements in the disjoint sets of strings",
    "Solution": "def sum_disjoint_sets_strings(strings): <br> return sum(set(strings))"
  },
  {
    "": 489,
    "Problem": "Given a list of strings, find the product of all elements in the disjoint sets of strings",
    "Solution": "def product_disjoint_sets_strings(strings): <br> return product(set(strings))"
  },
  {
    "": 490,
    "Problem": "A software company has a set of projects and a set of developers. Each project has a set of technical requirements, and each developer has a set of skills. Determine the minimum number of developers that must be assigned to each project to cover all technical requirements.",
    "Solution": "def minimum_developers(projects, developers): ..."
  },
  {
    "": 491,
    "Problem": "Place 8 queens on a standard 8x8 chessboard such that no queen attacks any other queen.",
    "Solution": "```python\n# Solution to the 8-Queens problem\n\ndef place_queens(board):\n    n = 8\n    queens = []\n    for i in range(n):\n        row = random.randint(0, n - 1)\n        col = random.randint(0, n - 1)\n        while row in queens or col in queens:\n            row = random.randint(0, n - 1)\n            col = random.randint(0, n - 1)\n        queens.append((row, col))\n    return queens\n\n# Example usage\nboard = [['.' for _ in range(n)] for _ in range(n)]\nqueens = place_queens(board)\nprint(queens)\n```"
  },
  {
    "": 492,
    "Problem": "Generate a Sudoku puzzle with a unique solution",
    "Solution": "```python\nimport random\n\ndef generate_sudoku(size):\n    grid = []\n    for i in range(size):\n        row = []\n        for j in range(size):\n            if random.randint(0, 1):\n                row.append(random.randint(1, size))\n            else:\n                row.append(0)\n        grid.append(row)\n    return grid\n\nsize = 4\ngrid = generate_sudoku(size)\nprint(grid)\n```"
  },
  {
    "": 493,
    "Problem": "Solve a Sudoku puzzle using dynamic programming",
    "Solution": "```python\ndef solve_sudoku(grid):\n    rows, cols, boxes = zip(*grid)\n    n = len(grid)\n\n    dp = [[[0] * (n+1) for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                continue\n            for k in range(n):\n                if grid[k][j] == 0:\n                    dp[i][j][k] = 1\n                    break\n            else:\n                dp[i][j][grid[k][j] - 1] = 1\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                continue\n            dp[i][j][grid[i][j] - 1] = 1\n\n    return dp\n\ngrid = [[5, 0, 0, 0], [0, 0, 0, 8], [0, 0, 9, 0], [0, 8, 0, 0]]\nprint(solve_sudoku(grid))\n```"
  },
  {
    "": 494,
    "Problem": "Implement a Sudoku solver using backtracking",
    "Solution": "```python\ndef backtracking_sudoku(grid):\n    rows, cols, boxes = zip(*grid)\n    n = len(grid)\n\n    def rec_backtrack(i, j):\n        if i == n:\n            return True\n        if grid[i][j] == 0:\n            for k in range(1, n+1):\n                if rec_backtrack(i, j+1) or rec_backtrack(i+1, j):\n                    return True\n            grid[i][j] = k\n            return rec_backtrack(i, j+1) or rec_backtrack(i+1, j)\n        else:\n            return False\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                if not rec_backtrack(i, j):\n                    print(\"No solution found\")\n                    return False\n\n    print(\"Solution found:\")\n    for i in range(n):\n        for j in range(n):\n            print(grid[i][j], end=\" \")\n        print()\n\n    return True\n\ngrid = [[5, 0, 0, 0], [0, 0, 0, 8], [0, 0, 9, 0], [0, 8, 0, 0]]\nbacktracking_sudoku(grid)\n```"
  },
  {
    "": 495,
    "Problem": "Given a list of integers, find the subset that sums up to a given target value, subject to the constraint that the sum of the subset is a palindrome",
    "Solution": "[Python Code]"
  },
  {
    "": 496,
    "Problem": "Find a Hamiltonian cycle in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_cycle(graph)<br>print(path)"
  },
  {
    "": 497,
    "Problem": "Find a Hamiltonian path in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_path(graph)<br>print(path)"
  },
  {
    "": 498,
    "Problem": "Detect the presence of a Hamiltonian cycle in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>return nx.has_hamiltonian_cycle(graph)"
  },
  {
    "": 499,
    "Problem": "Detect the presence of a Hamiltonian path in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>return nx.has_hamiltonian_path(graph)"
  },
  {
    "": 500,
    "Problem": "Find the length of a Hamiltonian cycle in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_cycle(graph)<br>print(len(path))"
  },
  {
    "": 501,
    "Problem": "Find the length of a Hamiltonian path in a graph",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_path(graph)<br>print(len(path))"
  },
  {
    "": 502,
    "Problem": "Check if a graph is Hamiltonian",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>return nx.is_hamiltonian(graph)"
  },
  {
    "": 503,
    "Problem": "Find a Hamiltonian cycle in a graph using breadth-first search",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_cycle_bfs(graph)<br>print(path)"
  },
  {
    "": 504,
    "Problem": "Find a Hamiltonian path in a graph using depth-first search",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_path_dfs(graph)<br>print(path)"
  },
  {
    "": 505,
    "Problem": "Find a Hamiltonian cycle in a graph using iterative deepening depth-first search",
    "Solution": "import networkx as nx<br>graph = nx.DiGraph()<br># add nodes and edges to graph<br>path = nx.find_hamiltonian_cycle_iddfs(graph)<br>print(path)"
  },
  {
    "": 506,
    "Problem": "Generate all possible unique permutations of the letters in the word \"python",
    "Solution": "`['python', 'pyhon', 'yhnop', 'hnopy', 'honyp', 'pnyoh', 'pynoh', 'ynhop', 'yhpon', 'honpy', 'hopny', 'opnyh']`"
  },
  {
    "": 507,
    "Problem": "Find all possible combinations of 3 items from a list of 5 items",
    "Solution": "`[[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]`"
  },
  {
    "": 508,
    "Problem": "Write a program to print all permutations of a given string using recursion",
    "Solution": "`def permutations(s):\\n    if len(s) == 1:\\n        yield s\\n    else:\\n        for i in range(len(s)): \\n            yield from permutations(s[:i] + s[i+1:])`"
  },
  {
    "": 509,
    "Problem": "Generate all possible unique combinations of 2 letters from the word \"python",
    "Solution": "`['py', 'yt', 'hn', 'ho', 'yp', 'yh']`"
  },
  {
    "": 510,
    "Problem": "Write a program to find all possible combinations of a given string using itertools",
    "Solution": "`import itertools\\ncombos = itertools.combinations(' ABC', 2)\\nfor c in combos:\\n    print(c)`"
  },
  {
    "": 511,
    "Problem": "Generate all possible unique permutations of the numbers 1, 2, and 3",
    "Solution": "`[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]`"
  },
  {
    "": 512,
    "Problem": "Write a program to print all possible unique combinations of 3 items from a list of 4 items",
    "Solution": "`import itertools\\nitems = [1, 2, 3, 4]\\ncombinations = itertools.combinations(items, 3)\\nfor c in combinations:\\n    print(c)`"
  },
  {
    "": 513,
    "Problem": "Generate all possible unique permutations of the letters in the word \"hello",
    "Solution": "`['hello', 'hlelo', 'heoll', 'helo', 'leoh', 'lohe', 'ehllo', 'hloe', 'lheo', 'loeh']`"
  },
  {
    "": 514,
    "Problem": "Write a program to find all possible combinations of 2 items from a list of 3 items",
    "Solution": "`import itertools\\nitems = [1, 2, 3]\\ncombinations = itertools.combinations(items, 2)\\nfor c in combinations:\\n    print(c)`"
  },
  {
    "": 515,
    "Problem": "Generate all possible unique permutations of the numbers 1, 2, and 3 using recursion",
    "Solution": "`def permutations(a, b, c):\\n    if a == 0 and b == 0 and c == 0:\\n        yield [1, 2, 3]\\n    else:\\n        for i in range(a+1):\\n            yield from permutations(a-i, b+i, c)\\n        for i in range(b+1):\\n            yield from permutations(a, b-i, c+i)\\n        for i in range(c+1):\\n            yield from permutations(a, b, c-i)`"
  },
  {
    "": 516,
    "Problem": "Merge two sorted lists",
    "Solution": "def merge_lists(list1, list2):<br>sorted_list = []<br>while len(list1) > 0 and len(list2) > 0:<br>if list1[0] <= list2[0]:<br>sorted_list.append(list1.pop(0))<br>else:<br>sorted_list.append(list2.pop(0))<br>while len(list1) > 0:<br>sorted_list.append(list1.pop(0))<br>while len(list2) > 0:<br>sorted_list.append(list2.pop(0))<br>return sorted_list"
  },
  {
    "": 517,
    "Problem": "Find the maximum value in a list",
    "Solution": "def max_value(list):<br>if len(list) == 0:<br>return -1<br>else:<br>return max(list)"
  },
  {
    "": 518,
    "Problem": "Check if a number is negative, positive, or zero",
    "Solution": "def sign(num):<br>if num < 0:<br>return \"-\"<br>elif num > 0:<br>return \"+\"<br>else:<br>return \" "
  },
  {
    "": 519,
    "Problem": "Find the median of a list",
    "Solution": "def median(list):<br>if len(list) == 0:<br>return -1<br>else:<br>return list[len(list) // 2]"
  },
  {
    "": 520,
    "Problem": "Check if a list is a palindrome",
    "Solution": "def is_palindrome(list):<br>if len(list) <= 1:<br>return True<br>else:<br>return list[0] == list[-1] and is_palindrome(list[1:-1])"
  },
  {
    "": 521,
    "Problem": "Find the first duplicate in a list",
    "Solution": "def find_duplicate(list):<br>for i in range(len(list)):<br>if list[i] == list[i + 1]:<br>return list[i]"
  },
  {
    "": 522,
    "Problem": "Split a list into two halves",
    "Solution": "def split_list(list):<br>mid = len(list) // 2<br>return list[:mid], list[mid:]"
  },
  {
    "": 523,
    "Problem": "Check if two strings are anagrams",
    "Solution": "def are_anagrams(str1, str2):<br>if len(str1) != len(str2):<br>return False<br>else:<br>return sorted(str1) == sorted(str2)"
  },
  {
    "": 524,
    "Problem": "Find the maximum sum of a subarray",
    "Solution": "def max_subarray(list):<br>if len(list) == 0:<br>return 0<br>else:<br>max_sum = list[0]<br>for i in range(1, len(list)):<br>max_sum = max(max_sum + list[i], list[i])<br>return max_sum"
  },
  {
    "": 525,
    "Problem": "Find the minimum number of swaps needed to sort a list",
    "Solution": "def min_swaps(list):<br>if len(list) <= 1:<br>return 0<br>else:<br>min_swaps = 1 + min(min_swaps(list[:len(list) // 2]), min_swaps(list[len(list) // 2:]))<br>return min_swaps"
  },
  {
    "": 526,
    "Problem": "Find the maximum element in a list",
    "Solution": "def find_max(arr): ..."
  },
  {
    "": 527,
    "Problem": "Given an array of integers, how would you count the number of pairs of integers that sum up to a given target value?",
    "Solution": "```\ndef count_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\n```"
  },
  {
    "": 528,
    "Problem": "How would you count the number of integers in an array that are greater than or equal to a given threshold?",
    "Solution": "```\ndef count_greater_than_threshold(arr, threshold):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] >= threshold:\n            count += 1\n    return count\n```"
  },
  {
    "": 529,
    "Problem": "Given an array of integers, how would you count the number of consecutive pairs of integers that have a difference of 1?",
    "Solution": "```\ndef count_consecutive_pairs(arr):\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] == 1:\n            count += 1\n    return count\n```"
  },
  {
    "": 530,
    "Problem": "How would you count the number of integers in an array that are multiples of 3?",
    "Solution": "```\ndef count_multiples_of_3(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 3 == 0:\n            count += 1\n    return count\n```"
  },
  {
    "": 531,
    "Problem": "Given an array of integers, how would you count the number of pairs of integers that have a product that is a perfect square?",
    "Solution": "```\ndef count_pairs_product_perfect_square(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if is_perfect_square(product):\n                count += 1\n    return count\n\ndef is_perfect_square(x):\n    return x == int(x ** 0.5) ** 2\n```"
  },
  {
    "": 532,
    "Problem": "How would you count the number of integers in an array that are powers of 2?",
    "Solution": "```\ndef count_powers_of_2(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == int(2 ** (i % 6)):\n            count += 1\n    return count\n```"
  },
  {
    "": 533,
    "Problem": "Given an array of integers, how would you count the number of pairs of integers that have a sum that is a perfect cube?",
    "Solution": "```\ndef count_pairs_sum_perfect_cube(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum = arr[i] + arr[j]\n            if is_perfect_cube(sum):\n                count += 1\n    return count\n\ndef is_perfect_cube(x):\n    return x == int(x ** 0.3333333333333334) ** 3\n```"
  },
  {
    "": 534,
    "Problem": "How would you count the number of integers in an array that are palindromes?",
    "Solution": "```\ndef count_palindromes(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i][::-1]:\n            count += 1\n    return count\n```"
  },
  {
    "": 535,
    "Problem": "Given an array of integers, how would you count the number of pairs of integers that have a difference that is a perfect square?",
    "Solution": "```\ndef count_pairs_difference_perfect_square(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            difference = arr[j] - arr[i]\n            if is_perfect_square(difference):\n                count += 1\n    return count\n```"
  },
  {
    "": 536,
    "Problem": "How would you count the number of integers in an array that are sums of two perfect squares?",
    "Solution": "```\ndef count_sums_of_two_perfect_squares(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            sum = arr[i] + arr[j]\n            if is_perfect_square(sum):\n                count += 1\n    return count\n```"
  },
  {
    "": 537,
    "Problem": "Sort an array of objects using radix sort",
    "Solution": "def radix_sort(arr): ..."
  },
  {
    "": 538,
    "Problem": "Heap Sort Algorithm Implementation",
    "Solution": "def heap_sort(arr): <br> heapify(arr) <br> for i in range(len(arr)-1, 0, -1): <br> heapify(arr, i) <br> return arr <br> #Function to heapify a subarray<br> def heapify(arr, i=0): <br> largest = i <br> for j in range(2*i+1, len(arr)): <br> if arr[j] > arr[largest]: <br> largest = j <br> heapify(arr, largest) <br> return arr <br> #Testing the function<br> arr = [5, 3, 7, 1, 8, 4, 2, 6] <br> print(heap_sort(arr))"
  },
  {
    "": 539,
    "Problem": "Heap Sort Optimization",
    "Solution": "Your task is to optimize the above heap sort algorithm by reducing the number of comparisons. <br> Hint: Try to reduce the number of comparisons in the heapify function."
  },
  {
    "": 540,
    "Problem": "Heap Sort Using Built-in Functions",
    "Solution": "Implement heap sort using built-in functions like heapq. <br> Hint: Look for the heapq module in Python."
  },
  {
    "": 541,
    "Problem": "Heap Sort Visualization",
    "Solution": "Create a visualization of the heap sort algorithm. <br> Hint: You can use Python libraries like matplotlib or seaborn to create the visualization."
  },
  {
    "": 542,
    "Problem": "Heap Sort with Real-World Data",
    "Solution": "Sort a real-world dataset using heap sort. <br> Hint: You can use a dataset like the Titanic passenger dataset."
  },
  {
    "": 543,
    "Problem": "Heap Sort Variations",
    "Solution": "Implement variations of the heap sort algorithm, like the bottom-up heap sort or the top-down heap sort. <br> Hint: Look for resources online to understand the variations."
  },
  {
    "": 544,
    "Problem": "Heap Sort Complexity Analysis",
    "Solution": "Analyze the time and space complexity of the heap sort algorithm. <br> Hint: You can use Big O notation to represent the complexity."
  },
  {
    "": 545,
    "Problem": "Heap Sort with Dictionaries",
    "Solution": "Implement heap sort on a list of dictionaries. <br> Hint: You can use the heapq module to implement the heap."
  },
  {
    "": 546,
    "Problem": "Heap Sort with Custom Comparison",
    "Solution": "Implement heap sort with a custom comparison function. <br> Hint: You can use the key argument in the heapq module to specify the comparison function."
  },
  {
    "": 547,
    "Problem": "Heap Sort with Parallel Processing",
    "Solution": "Implement heap sort using parallel processing in Python. <br> Hint: You can use the multiprocessing module in Python."
  },
  {
    "": 548,
    "Problem": "Write a Python function to implement the shell sort algorithm.",
    "Solution": "def shell_sort(arr):\n    n = len(arr)\n    for i in range(n//2):\n        for j in range(0, n-i):\n            temp = arr[j]\n            k = j\n            while k > 0 and temp < arr[k-1]:\n                arr[k] = arr[k-1]\n                k -= 1\n            arr[k] = temp\n    return arr"
  },
  {
    "": 549,
    "Problem": "Given an array of integers, how would you use the shell sort algorithm to sort it?",
    "Solution": "arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    print(arr)"
  },
  {
    "": 550,
    "Problem": "Write a Python function to find the median of a list of numbers using the shell sort algorithm.",
    "Solution": "def median(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2]) / 2\n    else:\n        return arr[n//2]\n    arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    return median(arr)"
  },
  {
    "": 551,
    "Problem": "Given an array of integers, how would you use the shell sort algorithm to find the median of the array?",
    "Solution": "arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    print(median(arr))"
  },
  {
    "": 552,
    "Problem": "Write a Python function to find the first duplicate in a sorted list of integers using the shell sort algorithm.",
    "Solution": "def find_duplicate(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return i\n    return -1\n    arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    return find_duplicate(arr)"
  },
  {
    "": 553,
    "Problem": "Given an array of integers, how would you use the shell sort algorithm to find the first duplicate in the array?",
    "Solution": "arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    print(find_duplicate(arr))"
  },
  {
    "": 554,
    "Problem": "Write a Python function to find the number of pairs of elements in a list of integers that add up to a given target value using the shell sort algorithm.",
    "Solution": "def pairs(arr, target):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\n    arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    return pairs(arr, 7)"
  },
  {
    "": 555,
    "Problem": "Given an array of integers and a target value, how would you use the shell sort algorithm to find the number of pairs of elements that add up to the target value?",
    "Solution": "arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    target = 7\n    shell_sort(arr)\n    print(pairs(arr, target))"
  },
  {
    "": 556,
    "Problem": "Write a Python function to find the number of elements in a list of integers that are greater than or equal to a given value using the shell sort algorithm.",
    "Solution": "def greater_than(arr, value):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] >= value:\n            count += 1\n    return count\n    arr = [3, 1, 4, 1, 5, 9, 2, 6]\n    shell_sort(arr)\n    return greater_than(arr, 5)"
  },
  {
    "": 557,
    "Problem": "",
    "Solution": "cocktails.sort(key=lambda x: x.alcohol_content)"
  },
  {
    "": 558,
    "Problem": "Sort a list of pancakes by their size.",
    "Solution": "def sort_pancakes(pancakes):\n    return sorted(pancakes, key=lambda x: x.size)"
  },
  {
    "": 559,
    "Problem": "Reverse the order of a list of pancakes.",
    "Solution": "def reverse_pancakes(pancakes):\n    return pancakes[::-1]"
  },
  {
    "": 560,
    "Problem": "Find the largest pancake in a list.",
    "Solution": "def largest_pancake(pancakes):\n    return max(pancakes, key=lambda x: x.size)"
  },
  {
    "": 561,
    "Problem": "Find the smallest pancake in a list.",
    "Solution": "def smallest_pancake(pancakes):\n    return min(pancakes, key=lambda x: x.size)"
  },
  {
    "": 562,
    "Problem": "Check if a list of pancakes is sorted in ascending order.",
    "Solution": "def is_sorted(pancakes):\n    return all(x.size <= y.size for x, y in zip(pancakes, pancakes[1:]))"
  },
  {
    "": 563,
    "Problem": "Check if a list of pancakes is sorted in descending order.",
    "Solution": "def is_sorted_desc(pancakes):\n    return all(x.size >= y.size for x, y in zip(pancakes, pancakes[1:]))"
  },
  {
    "": 564,
    "Problem": "Sort a list of pancakes by their color.",
    "Solution": "def sort_pancakes_by_color(pancakes):\n    return sorted(pancakes, key=lambda x: x.color)"
  },
  {
    "": 565,
    "Problem": "Find the number of pancakes that have a certain color.",
    "Solution": "def count_pancakes_by_color(pancakes, color):\n    return sum(x.color == color for x in pancakes)"
  },
  {
    "": 566,
    "Problem": "Find the total size of all pancakes in a list.",
    "Solution": "def total_size(pancakes):\n    return sum(x.size for x in pancakes)"
  },
  {
    "": 567,
    "Problem": 9,
    "Solution": "Find the first element in a sorted array that is not a multiple of 3"
  },
  {
    "": 568,
    "Problem": "Given a list of integers, find the first pair of integers that add up to a given target value.",
    "Solution": "def find_pair(numbers, target):\nreturn next((pair for pair in combinations(numbers, 2) if pair[0] + pair[1] == target), None)"
  },
  {
    "": 569,
    "Problem": "Write a function that takes in a list of integers and returns the number of pairs of integers that add up to a given target value.",
    "Solution": "def count_pairs(numbers, target):\nreturn sum(1 for pair in combinations(numbers, 2) if pair[0] + pair[1] == target)"
  },
  {
    "": 570,
    "Problem": "Given a list of integers, find the first integer that appears at least twice in the list.",
    "Solution": "def find_repeated_integer(numbers):\nreturn next((number for number in numbers if numbers.count(number) > 1), None)"
  },
  {
    "": 571,
    "Problem": "Write a function that takes in a list of integers and returns the number of integers that appear at least twice in the list.",
    "Solution": "def count_repeated_integers(numbers):\nreturn sum(1 for number in numbers if numbers.count(number) > 1)"
  },
  {
    "": 572,
    "Problem": "Given a list of integers, find the first integer that is the sum of two other integers in the list.",
    "Solution": "def find_sum_of_two_integers(numbers):\nreturn next((number for number in numbers if number == numbers[0] + numbers[1] for numbers in combinations(numbers, 2)), None)"
  },
  {
    "": 573,
    "Problem": "Write a function that takes in a list of integers and returns the number of integers that are the sum of two other integers in the list.",
    "Solution": "def count_sum_of_two_integers(numbers):\nreturn sum(1 for number in numbers if number == numbers[0] + numbers[1] for numbers in combinations(numbers, 2))"
  },
  {
    "": 574,
    "Problem": "Given a list of integers, find the first integer that is the product of two other integers in the list.",
    "Solution": "def find_product_of_two_integers(numbers):\nreturn next((number for number in numbers if number == numbers[0] * numbers[1] for numbers in combinations(numbers, 2)), None)"
  },
  {
    "": 575,
    "Problem": "Write a function that takes in a list of integers and returns the number of integers that are the product of two other integers in the list.",
    "Solution": "def count_product_of_two_integers(numbers):\nreturn sum(1 for number in numbers if number == numbers[0] * numbers[1] for numbers in combinations(numbers, 2))"
  },
  {
    "": 576,
    "Problem": "Given a list of integers, find the first integer that is the sum of three other integers in the list.",
    "Solution": "def find_sum_of_three_integers(numbers):\nreturn next((number for number in numbers if number == numbers[0] + numbers[1] + numbers[2] for numbers in combinations(numbers, 3)), None)"
  },
  {
    "": 577,
    "Problem": "Find all longest paths between two nodes in a weighted graph using DFS",
    "Solution": "See code below"
  },
  {
    "": 578,
    "Problem": "UCS - Find the shortest path between two nodes in a graph",
    "Solution": "import networkx as nx; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]); print(nx.shortest_path('A', 'D', weight='weight'));"
  },
  {
    "": 579,
    "Problem": "UCS - Find the minimum cost flow in a flow network",
    "Solution": "from networkx.algorithms import shortest_augmenting_path; G = nx.DiGraph(); G.add_nodes_from(['A', 'B', 'C', 'D']); G.add_edges_from([('A', 'B'), ('A', 'C'), ('B', 'D'), ('C', 'D')]); flow_network = nx.flow_network(G, capacity='capacity'); print(shortest_augmenting_path(flow_network, 'A', 'D'));"
  },
  {
    "": 580,
    "Problem": "Use Bellman-Ford algorithm to find the shortest path from node A to node E in the following graph, where some edges are labeled with a special \"priority\" value that must be respected",
    "Solution": "Python code implementing Bellman-Ford algorithm to find shortest path from node A to node E in a graph with priority edges"
  },
  {
    "": 581,
    "Problem": "Calculate the shortest path between two nodes in a weighted graph using Floyd-Warshall algorithm",
    "Solution": "import numpy as np<br>def floyd_warshall(graph):<br>    n = len(graph)<br>    dp = np.zeros((n, n))<br>    for i in range(n):<br>        for j in range(n):<br>            if i == j:<br>                dp[i][j] = 0<br>            else:<br>                dp[i][j] = np.inf<br>    for k in range(n):<br>        for i in range(n):<br>            for j in range(n):<br>                if dp[i][k] + dp[k][j] < dp[i][j]:<br>                    dp[i][j] = dp[i][k] + dp[k][j]<br>    return dp<br>graph = [[0, 3, 5], [3, 0, 2], [5, 2, 0]]<br>result = floyd_warshall(graph)<br>print(result)"
  },
  {
    "": 582,
    "Problem": "Find the maximum sum of a subarray",
    "Solution": "def max_subarray(arr): return max(sum(arr[i:j+1]) for i in range(len(arr)) for j in range(len(arr)-i))"
  },
  {
    "": 583,
    "Problem": "Activity Selection Problem",
    "Solution": "def activity_selection(profits, costs): return max(profits[i] - costs[i] for i in range(len(profits)))"
  },
  {
    "": 584,
    "Problem": "Coin Change Problem",
    "Solution": "def coin_change(amount, denominations): return min(sum(denominations[i] * (amount // denominations[i])) for i in range(len(denominations)))"
  },
  {
    "": 585,
    "Problem": "Huffman Coding",
    "Solution": "def huffman_ coding(frequencies): return min(sum(frequencies[i] * (i+1) for i in range(len(frequencies))))"
  },
  {
    "": 586,
    "Problem": "Fractional Knapsack Problem",
    "Solution": "def fractional_knapsack(values, weights, capacity): return max(sum(values[i] * min(weights[i], capacity - sum(weights[j] for j in range(i))) for i in range(len(values)))"
  },
  {
    "": 587,
    "Problem": "Schedule Jobs",
    "Solution": "def schedule_jobs(start_times, end_times, profits): return max(sum(profits[i] * (end_times[i] - start_times[i])) for i in range(len(profits)))"
  },
  {
    "": 588,
    "Problem": "Min Stack",
    "Solution": "def min_stack(items, limit): return min(sum(items[i] for i in range(len(items))) if len(items) > limit else 0)"
  },
  {
    "": 589,
    "Problem": "Design Twitter",
    "Solution": "def design_twitter(followers, tweets): return max(sum(followers[i] * tweets[i]) for i in range(len(followers)))"
  },
  {
    "": 590,
    "Problem": "Convolutional Neural Networks",
    "Solution": "def convolutional_neural_networks(input_size, hidden_size, output_size): return max(sum(hidden_size[i] * (input_size[i] + hidden_size[i-1]) for i in range(len(hidden_size)))"
  },
  {
    "": 591,
    "Problem": "Longest Common Subsequence",
    "Solution": "def longest_common_subsequence(str1, str2): return max(sum(1 for i in range(len(str1)) if str1[i] == str2[i]) for i in range(len(str1)))"
  },
  {
    "": 592,
    "Problem": "Given a list of activities and their durations, select the activities that will take the least total time to complete.",
    "Solution": "```python\ndef select_activities(activities, durations):\n    return sorted(activities, key=lambda x: durations[x])[:10]\n```"
  },
  {
    "": 593,
    "Problem": "Given a list of activities and their proficiency levels, select the activities that will take the least total time to complete, considering the proficiency levels of the activities.",
    "Solution": "```python\ndef select_activities(activities, proficiency_levels):\n    durations = [60, 30, 45, 20, 15, 30, 45, 15, 30, 45]\n    return sorted(activities, key=lambda x: durations[x] * proficiency_levels[x])[:10]\n```"
  },
  {
    "": 594,
    "Problem": "Given a list of activities and their proficiency levels, select the activities that will take the least total time to complete, considering the proficiency levels of the activities and the available resources.",
    "Solution": "```python\ndef select_activities(activities, proficiency_levels, resources):\n    durations = [60, 30, 45, 20, 15, 30, 45, 15, 30, 45]\n    available_resources = [10, 20, 30, 40, 50]\n    return sorted(activities, key=lambda x: durations[x] * proficiency_levels[x] * available_resources[x])[:10]\n```"
  },
  {
    "": 595,
    "Problem": "Given a list of activities and their proficiency levels, select the activities that will take the least total time to complete, considering the proficiency levels of the activities, the available resources, and the priority of the activities.",
    "Solution": "```python\ndef select_activities(activities, proficiency_levels, resources, priorities):\n    durations = [60, 30, 45, 20, 15, 30, 45, 15, 30, 45]\n    available_resources = [10, 20, 30, 40, 50]\n    priorities = [1, 2, 3, 4, 5]\n    return sorted(activities, key=lambda x: durations[x] * proficiency_levels[x] * available_resources[x] * priorities[x])[:10]\n```"
  },
  {
    "": 596,
    "Problem": "Write a program to schedule a set of jobs on a cloud computing platform, minimizing the total processing time.",
    "Solution": "def schedule_jobs_on_cloud(jobs, num_instances): ..."
  },
  {
    "": 597,
    "Problem": "Build a minimum cost spanning tree for a graph representing a water supply network",
    "Solution": "import networkx as nx <br> G = nx.Graph() <br> G.add_edges_from([(0, 1), (1, 2), (2, 3), (3, 4)]) <br> G.add_edge(4, 5) <br> G.add_edge(5, 6) <br> G.add_edge(6, 7) <br> G.add_edge(7, 8) <br> G.add_edge(8, 9) <br> G.add_edge(9, 10) <br> G.add_edge(10, 0) <br> spanning_tree = nx.minimum_spanning_tree(G) <br> print(spanning_tree)"
  },
  {
    "": 598,
    "Problem": "Find the minimum cost edge in a graph",
    "Solution": "import networkx as nx <br> G = nx.Graph() <br> G.add_edges_from([(0, 1), (1, 2), (2, 3), (3, 4)]) <br> G.add_edge(4, 5) <br> G.add_edge(5, 6) <br> G.add_edge(6, 7) <br> G.add_edge(7, 8) <br> G.add_edge(8, 9) <br> G.add_edge(9, 10) <br> G.add_edge(10, 0) <br> edges = G.edges() <br> min_cost_edge = min(edges, key=lambda x: x[2]) <br> print(min_cost_edge)"
  },
  {
    "": 599,
    "Problem": "Find the union of two disjoint sets",
    "Solution": "def find_union(set1, set2): <br> return set1.union(set2)"
  },
  {
    "": 600,
    "Problem": "Check if two disjoint sets are equal",
    "Solution": "def are_sets_equal(set1, set2): <br> return set1 == set2"
  },
  {
    "": 601,
    "Problem": "Find the intersection of two disjoint sets",
    "Solution": "def find_intersection(set1, set2): <br> return set1.intersection(set2)"
  },
  {
    "": 602,
    "Problem": "Find the difference between two disjoint sets",
    "Solution": "def find_difference(set1, set2): <br> return set1.difference(set2)"
  },
  {
    "": 603,
    "Problem": "Check if an element is in a disjoint set",
    "Solution": "def is_element_in_set(set, element): <br> return element in set"
  },
  {
    "": 604,
    "Problem": "Find the number of elements in a disjoint set",
    "Solution": "def count_elements(set): <br> return len(set)"
  },
  {
    "": 605,
    "Problem": "Find the largest element in a disjoint set",
    "Solution": "def find_largest_element(set): <br> return max(set)"
  },
  {
    "": 606,
    "Problem": "Find the smallest element in a disjoint set",
    "Solution": "def find_smallest_element(set): <br> return min(set)"
  },
  {
    "": 607,
    "Problem": "Check if a disjoint set is empty",
    "Solution": "def is_set_empty(set): <br> return not set"
  },
  {
    "": 608,
    "Problem": "Check if a disjoint set contains a specific element",
    "Solution": "def contains_element(set, element): <br> return element in set"
  },
  {
    "": 609,
    "Problem": "Given a graph and a list of nodes, find the maximum bipartite matching that includes all nodes in the list.",
    "Solution": "def max_bipartite_matching_with_node_list(graph, node_list): ... # code here"
  },
  {
    "": 610,
    "Problem": "Calculate the Fibonacci sequence up to n",
    "Solution": "def fibonacci(n): return n if n <= 1 else fibonacci(n-1) + fibonacci(n-2)"
  },
  {
    "": 611,
    "Problem": "Find the longest common subsequence between two strings",
    "Solution": "def lcs(a, b): return max(a, b) if len(a) == 0 or len(b) == 0 else lcs(a[:-1], b[:-1]) + 1"
  },
  {
    "": 612,
    "Problem": "Calculate the number of ways to climb n stairs",
    "Solution": "def climb(n): return n if n == 0 else climb(n-1) + climb(n-2)"
  },
  {
    "": 613,
    "Problem": "Find the maximum sum of a subarray",
    "Solution": "def max_subarray(arr): return max(sum(arr[i:j+1]) for i in range(len(arr)) for j in range(len(arr)))"
  },
  {
    "": 614,
    "Problem": "Calculate the number of ways to choose k items from n items",
    "Solution": "def choose(n, k): return (n+1)**k / (k**k * (n-k)**(n-k))"
  },
  {
    "": 615,
    "Problem": "Find the minimum number of operations needed to make two strings equal",
    "Solution": "def min_ops(a, b): return min(len(a) + len(b) - 2 * len(a.intersection(b)), len(a) + len(b) - 2 * len(a.union(b)))"
  },
  {
    "": 616,
    "Problem": "Calculate the number of ways to arrange n objects in a row",
    "Solution": "def arrange(n): return n!"
  },
  {
    "": 617,
    "Problem": "Find the maximum value in a binary tree",
    "Solution": "def max_val(root): return max(root.val, max_val(root.left), max_val(root.right))"
  },
  {
    "": 618,
    "Problem": "Calculate the number of ways to partition a set of n objects into k subsets",
    "Solution": "def partition(n, k): return (n+1)**k / (k**k * (n-k)**(n-k))"
  },
  {
    "": 619,
    "Problem": "Find the shortest path in a graph",
    "Solution": "def shortest_path(graph, start): return min(graph[start], graph[start].keys())[0]"
  },
  {
    "": 620,
    "Problem": "LCS of \"house\" and \" Mouse",
    "Solution": "'ouse'"
  },
  {
    "": 621,
    "Problem": "Given two matrices A and B, multiply them element-wise and return the result.",
    "Solution": "`def matrix_multiply(A, B): return np.array(list(map(lambda x, y: x * y, A, B))) `"
  },
  {
    "": 622,
    "Problem": "Given a matrix A and a scalar value k, multiply each element of A by k and return the result.",
    "Solution": "`def scale_matrix(A, k): return np.array(list(map(lambda x: x * k, A))) `"
  },
  {
    "": 623,
    "Problem": "Given two matrices A and B, compute the dot product of the two matrices and return the result.",
    "Solution": "`def dot_product(A, B): return np.sum(np.array(list(map(lambda x, y: x * y, A, B)))`"
  },
  {
    "": 624,
    "Problem": "Given a matrix A and a list of indices, compute the sum of the elements in the matrix at the given indices and return the result.",
    "Solution": "`def sum_at_indices(A, indices): return np.sum(A[indices])`"
  },
  {
    "": 625,
    "Problem": "Given a matrix A and a list of row indices, compute the mean of the elements in each row and return the result.",
    "Solution": "`def mean_by_row(A, row_indices): return np.mean(A[row_indices], axis=0)`"
  },
  {
    "": 626,
    "Problem": "Given a matrix A and a list of column indices, compute the mean of the elements in each column and return the result.",
    "Solution": "`def mean_by_col(A, col_indices): return np.mean(A[col_indices], axis=1)`"
  },
  {
    "": 627,
    "Problem": "Given a matrix A and a scalar value k, add k to each element of A and return the result.",
    "Solution": "`def add_scalar(A, k): return np.array(list(map(lambda x: x + k, A))) `"
  },
  {
    "": 628,
    "Problem": "Given two matrices A and B, compute the outer product of the two matrices and return the result.",
    "Solution": "`def outer_product(A, B): return np.array(list(map(lambda x, y: x * y, A, B))) `"
  },
  {
    "": 629,
    "Problem": "Given a matrix A and a list of row and column indices, compute the determinant of the submatrix defined by the indices and return the result.",
    "Solution": "`def determinant(A, row_indices, col_indices): return np.linalg.det(A[row_indices, col_indices])`"
  },
  {
    "": 630,
    "Problem": "Given a matrix A and a list of row and column indices, compute the inverse of the submatrix defined by the indices and return the result.",
    "Solution": "`def inverse(A, row_indices, col_indices): return np.linalg.inv(A[row_indices, col_indices])`"
  },
  {
    "": 631,
    "Problem": "Given a list of integers, find the subset that sums up to a given target value, but also minimize the difference between the sum of the subset and the target value",
    "Solution": "[Python code]"
  },
  {
    "": 632,
    "Problem": "Given a rod of length 5 meters, how many pieces of maximum length 1 meter can be cut from it?",
    "Solution": "5 - (5 % 1) = 4"
  },
  {
    "": 633,
    "Problem": "A rod of length 10 meters is cut into two pieces. If one piece is 3 meters long, how long is the other piece?",
    "Solution": "10 - 3 = 7"
  },
  {
    "": 634,
    "Problem": "A rod of length 7 meters is cut into three pieces. If the first two pieces are 2 meters and 3 meters long, how long is the third piece?",
    "Solution": "7 - 2 - 3 = 2"
  },
  {
    "": 635,
    "Problem": "A rod of length 12 meters is cut into four pieces. If the first three pieces are 3 meters, 4 meters, and 5 meters long, how long is the fourth piece?",
    "Solution": "12 - 3 - 4 - 5 = 1"
  },
  {
    "": 636,
    "Problem": "Given a rod of length 8 meters, how many pieces of length 2 meters can be cut from it?",
    "Solution": "8 // 2 = 4"
  },
  {
    "": 637,
    "Problem": "A rod of length 15 meters is cut into five pieces. If the first four pieces are 3 meters, 4 meters, 5 meters, and 6 meters long, how long is the fifth piece?",
    "Solution": "15 - 3 - 4 - 5 - 6 = 0"
  },
  {
    "": 638,
    "Problem": "A rod of length 4 meters is cut into two pieces. If one piece is 2 meters long, how long is the other piece?",
    "Solution": "4 - 2 = 2"
  },
  {
    "": 639,
    "Problem": "Given a rod of length 9 meters, how many pieces of maximum length 3 meters can be cut from it?",
    "Solution": "9 - (9 % 3) = 6"
  },
  {
    "": 640,
    "Problem": "A rod of length 11 meters is cut into three pieces. If the first two pieces are 4 meters and 5 meters long, how long is the third piece?",
    "Solution": "11 - 4 - 5 = 2"
  },
  {
    "": 641,
    "Problem": "A rod of length 14 meters is cut into four pieces. If the first three pieces are 3 meters, 4 meters, and 5 meters long, how long is the fourth piece?",
    "Solution": "14 - 3 - 4 - 5 = 2"
  },
  {
    "": 642,
    "Problem": "Find the maximum sum subarray in the given array [1, 2, -3, 4, -4, 5, 6]",
    "Solution": "```python\ndef max_subarray_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        curr_sum = 0\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum\n\narr = [1, 2, -3, 4, -4, 5, 6]\nprint(max_subarray_sum(arr))\n```"
  },
  {
    "": 643,
    "Problem": "Calculate the edit distance between two strings",
    "Solution": "def edit_distance(a, b): <br> return len(a) + len(b) - 2 * len(a.intersection(b)) <br> # a and b are the two strings"
  },
  {
    "": 644,
    "Problem": "Given a list of strings, find the pair with the minimum edit distance",
    "Solution": "def min_edit_distance(list): <br> return min(list, key=lambda x: edit_distance(x[0], x[1])) <br> # list is the list of strings"
  },
  {
    "": 645,
    "Problem": "Given a string and a list of substrings, find the substring with the minimum edit distance",
    "Solution": "def min_edit_distance_substring(str, list): <br> return min(list, key=lambda x: edit_distance(x, str)) <br> # str is the main string, list is the list of substrings"
  },
  {
    "": 646,
    "Problem": "Given a list of strings, find the string that is closest to a given query string",
    "Solution": "def closest_string(list, query): <br> return min(list, key=lambda x: edit_distance(x, query)) <br> # list is the list of strings, query is the query string"
  },
  {
    "": 647,
    "Problem": "Given a string and a list of integers, find the substring with the minimum edit distance",
    "Solution": "def min_edit_distance_substring_int(str, list): <br> return min(list, key=lambda x: edit_distance(x, str)) <br> # str is the main string, list is the list of integers"
  },
  {
    "": 648,
    "Problem": "Given a list of strings, find the pair with the minimum edit distance, but only consider substrings of a certain length",
    "Solution": "def min_edit_distance_substring_len(list, len): <br> return min(list, key=lambda x: edit_distance(x, x[len-1])) <br> # list is the list of strings, len is the length of the substrings"
  },
  {
    "": 649,
    "Problem": "Given a string and a list of strings, find the string that is closest to the main string using a weighted edit distance",
    "Solution": "def weighted_edit_distance(str, list): <br> return min(list, key=lambda x: weighted_edit_distance(x, str)) <br> # str is the main string, list is the list of strings"
  },
  {
    "": 650,
    "Problem": "Given a list of strings, find the string that is closest to a given query string using a weighted edit distance",
    "Solution": "def weighted_closest_string(list, query): <br> return min(list, key=lambda x: weighted_edit_distance(x, query)) <br> # list is the list of strings, query is the query string"
  },
  {
    "": 651,
    "Problem": "Given a string and a list of integers, find the substring with the minimum weighted edit distance",
    "Solution": "def min_weighted_edit_distance_substring(str, list): <br> return min(list, key=lambda x: weighted_edit_distance(x, str)) <br> # str is the main string, list is the list of integers"
  },
  {
    "": 652,
    "Problem": "Given a list of strings, find the pair with the minimum weighted edit distance, but only consider substrings of a certain length",
    "Solution": "def min_weighted_edit_distance_substring_len(list, len): <br> return min(list, key=lambda x: weighted_edit_distance(x, x[len-1])) <br> # list is the list of strings, len is the length of the substrings"
  },
  {
    "": 653,
    "Problem": "Minimum Partition 1",
    "Solution": "import numpy as np; np.partition(10, 3)"
  },
  {
    "": 654,
    "Problem": "Minimum Partition 2",
    "Solution": "from math import ceil; n = 10; k = 3; print(ceil(n/k))"
  },
  {
    "": 655,
    "Problem": "Minimum Partition 3",
    "Solution": "import math; x = 10; y = 3; print(math.ceil(x/y))"
  },
  {
    "": 656,
    "Problem": "Minimum Partition 4",
    "Solution": "a = 10; b = 3; print(a//b)"
  },
  {
    "": 657,
    "Problem": "Minimum Partition 5",
    "Solution": "a = 10; b = 3; print(a%b)"
  },
  {
    "": 658,
    "Problem": "Minimum Partition 6",
    "Solution": "a = 10; b = 3; print(a-b)"
  },
  {
    "": 659,
    "Problem": "Minimum Partition 7",
    "Solution": "a = 10; b = 3; print(a+b)"
  },
  {
    "": 660,
    "Problem": "Minimum Partition 8",
    "Solution": "a = 10; b = 3; print(a*b)"
  },
  {
    "": 661,
    "Problem": "Minimum Partition 9",
    "Solution": "a = 10; b = 3; print(a/b)"
  },
  {
    "": 662,
    "Problem": "Minimum Partition 10",
    "Solution": "a = 10; b = 3; print(a**b)"
  },
  {
    "": 663,
    "Problem": "Find the longest palindromic subsequence in a list of str",
    "Solution": "def longest_palindrome_in_list(list): ...                      \n  4"
  },
  {
    "": 664,
    "Problem": "def is_palindrome(s): ...                                      \n  5",
    "Solution": "Given a list of strings, find the longest palindromic subse"
  },
  {
    "": 665,
    "Problem": "Given a string, find the longest palindromic subsequence th",
    "Solution": "def longest_palindrome_tha(s): ...                           \n  7"
  },
  {
    "": 666,
    "Problem": "def longest_palindrome_use(s): ...                            \n  8",
    "Solution": "Given a string, find the longest palindromic subsequence wi"
  },
  {
    "": 667,
    "Problem": "Given a string, find the longest palindromic subsequence wo",
    "Solution": "def longest_palindrome_wo(s): ...                            \n  10"
  },
  {
    "": 668,
    "Problem": "A company has three assembly lines, A, B, and C, with different production capacities and production rates. How would you schedule the production to maximize the customer satisfaction, considering the delivery time, the quality of the products, and the production lead time?",
    "Solution": "Solution: Use a simulated annealing approach to find the optimal schedule."
  },
  {
    "": 669,
    "Problem": "Interleave two strings",
    "Solution": "def interleave_strings(s1, s2):\\nreturn ''.join(alternating_characters(s1, s2))"
  },
  {
    "": 670,
    "Problem": "Interleave three strings",
    "Solution": "def interleave_strings(s1, s2, s3):\\nreturn ''.join(interleave_strings(s1, s2) + interleave_strings(s2, s3))"
  },
  {
    "": 671,
    "Problem": "Interleave a list of strings",
    "Solution": "def interleave_strings(strings):\\nreturn ''.join(itertools.zip_longest(*strings))"
  },
  {
    "": 672,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid",
    "Solution": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]].min_sum_path()"
  },
  {
    "": 673,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with obstacles",
    "Solution": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]].min_sum_path(obstacles=[(1, 1), (3, 3), (5, 5)])"
  },
  {
    "": 674,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with weighted edges",
    "Solution": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]].min_sum_path(edge_weights={(0, 1): 2, (1, 2): 3, (2, 3): 4})"
  },
  {
    "": 675,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with negative weight edges",
    "Solution": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]].min_sum_path(edge_weights={(0, 1): -2, (1, 2): -3, (2, 3): -4})"
  },
  {
    "": 676,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with dynamic programming",
    "Solution": "min_sum_path_dynamic_programming([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
  },
  {
    "": 677,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with memoization",
    "Solution": "min_sum_path_memoization([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
  },
  {
    "": 678,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with iterative deepening",
    "Solution": "min_sum_path_iterative_deepening([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
  },
  {
    "": 679,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with Breadth-First Search",
    "Solution": "min_sum_path_breadth_first_search([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
  },
  {
    "": 680,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with Depth-First Search",
    "Solution": "min_sum_path_depth_first_search([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
  },
  {
    "": 681,
    "Problem": "Find the minimum path sum from (0, 0) to (n, n) in a grid with A\\* Search",
    "Solution": "min_sum_path_a_star_search([[1, 2, 3], [4, 5, 6], [7, 8, 9]])"
  },
  {
    "": 682,
    "Problem": "Given a string, partition it into palindromic substrings.",
    "Solution": "def partition_palindromes(s):<br>palindromes = []<br>for i in range(len(s) - 1, 0, -1):<br>yield s[i:i+1] + s[i-1:i-1]<br>return palindromes"
  },
  {
    "": 683,
    "Problem": "Given a string, find the longest palindromic substring.",
    "Solution": "def longest_palindrome(s):<br>return max(s[i:i+1] + s[i-1:i-1] for i in range(len(s) - 1, 0, -1), key=len)"
  },
  {
    "": 684,
    "Problem": "Given a string, find the number of palindromic substrings.",
    "Solution": "def count_palindromes(s):<br>return sum(1 for i in range(len(s) - 1, 0, -1) if s[i:i+1] == s[i-1:i-1])"
  },
  {
    "": 685,
    "Problem": "Given a string, find the longest common palindromic substring between two strings.",
    "Solution": "def common_palindrome(s1, s2):<br>return max(s1[i:i+1] + s2[i:i+1] for i in range(min(len(s1), len(s2)) - 1, 0, -1), key=len)"
  },
  {
    "": 686,
    "Problem": "Given a string, find the shortest palindromic substring that is a prefix of a given string.",
    "Solution": "def shortest_prefix_palindrome(s, prefix):<br>for i in range(len(s) - 1, 0, -1):<br>if s[i:i+1] == prefix:<br>return s[i:i+1]<br>return None"
  },
  {
    "": 687,
    "Problem": "Given a string, find the shortest palindromic substring that is a suffix of a given string.",
    "Solution": "def shortest_suffix_palindrome(s, suffix):<br>for i in range(len(s) - 1, 0, -1):<br>if s[i:i+1] == suffix:<br>return s[i:i+1]<br>return None"
  },
  {
    "": 688,
    "Problem": "Given a string, find the longest palindromic substring that is a factor of a given string.",
    "Solution": "def factor_palindrome(s):<br>for i in range(len(s) - 1, 0, -1):<br>if s[i:i+1] == s[i-1:i-1]:<br>yield s[i:i+1]<br>return"
  },
  {
    "": 689,
    "Problem": "Given a string, find the number of palindromic substrings that are factors of a given string.",
    "Solution": "def count_factor_palindromes(s):<br>return sum(1 for i in range(len(s) - 1, 0, -1) if s[i:i+1] == s[i-1:i-1])"
  },
  {
    "": 690,
    "Problem": "Given a string, find the longest palindromic substring that is a proper factor of a given string.",
    "Solution": "def proper_factor_palindrome(s):<br>for i in range(len(s) - 1, 0, -1):<br>if s[i:i+1] == s[i-1:i-1] and i > 0:<br>yield s[i:i+1]<br>return"
  },
  {
    "": 691,
    "Problem": "Given a string, find the number of palindromic substrings that are proper factors of a given string.",
    "Solution": "def count_proper_factor_palindromes(s):<br>return sum(1 for i in range(len(s) - 1, 0, -1) if s[i:i+1] == s[i-1:i-1] and i > 0)"
  },
  {
    "": 692,
    "Problem": "Given a list of words, write a function to break the words into individual letters.",
    "Solution": "def break_words(words):<br> letters = []<br> for word in words:<br>     letters.extend(word)<br> return letters<br>"
  },
  {
    "": 693,
    "Problem": "Given a string, write a function to find the first word that starts with the letter \"A\".",
    "Solution": "def find_first_word_starting_with_A(string):<br> words = string.split()<br> for i, word in enumerate(words):<br>     if word.startswith(\"A\"):<br>         return i, word<br> return None, None<br>"
  },
  {
    "": 694,
    "Problem": "Given a list of words, write a function to find the longest word.",
    "Solution": "def find_longest_word(words):<br> max_len = 0<br> longest_word = \"\"<br> for word in words:<br>     len_word = len(word)<br>     if len_word > max_len:<br>         max_len = len_word<br>         longest_word = word<br> return longest_word<br>"
  },
  {
    "": 695,
    "Problem": "Given a string, write a function to count the number of occurrences of each word.",
    "Solution": "def count_word_occurrences(string):<br> words = string.split()<br> occurrences = {}<br> for word in words:<br>     if word in occurrences:<br>         occurrences[word] += 1<br>     else:<br>         occurrences[word] = 1<br> return occurrences<br>"
  },
  {
    "": 696,
    "Problem": "Given a list of words, write a function to find the first word that contains the letter \"E\".",
    "Solution": "def find_first_word_containing_E(words):<br> for word in words:<br>     if \"E\" in word:<br>         return word<br> return None<br>"
  },
  {
    "": 697,
    "Problem": "Given a string, write a function to find the last word.",
    "Solution": "def find_last_word(string):<br> words = string.split()<br> return words[-1]<br>"
  },
  {
    "": 698,
    "Problem": "Given a list of words, write a function to find the word that appears most frequently.",
    "Solution": "def find_most_frequent_word(words):<br> occurrences = count_word_occurrences(words)<br> max_occurrence = max(occurrences.values())<br> for word, occurrence in occurrences.items():<br>     if occurrence == max_occurrence:<br>         return word<br> return None<br>"
  },
  {
    "": 699,
    "Problem": "Given a string, write a function to find the first word that starts with a capital letter.",
    "Solution": "def find_first_word_starting_with_capital(string):<br> words = string.split()<br> for i, word in enumerate(words):<br>     if word[0].isupper():<br>         return i, word<br> return None, None<br>"
  },
  {
    "": 700,
    "Problem": "Given a list of words, write a function to find the word that has the longest consecutive sequence of letters.",
    "Solution": "def find_longest_consecutive_sequence(words):<br> max_sequence = 0<br> longest_sequence = \"\"<br> for word in words:<br>     sequence = \"\"<br>     for letter in word:<br>         sequence += letter<br>     sequence_len = len(sequence)<br>     if sequence_len > max_sequence:<br>         max_sequence = sequence_len<br>         longest_sequence = sequence<br> return longest_sequence<br>"
  },
  {
    "": 701,
    "Problem": "Given a string, write a function to find the first word that contains the letter \"A\" and starts with a vowel.",
    "Solution": "def find_first_word_containing_A_and_starting_with_vowel(string):<br> words = string.split()<br> for i, word in enumerate(words):<br>     if word.startswith((\"a\", \"e\", \"i\", \"o\", \"u\")) and \"A\" in word:<br>         return i, word<br> return None, None<br>"
  },
  {
    "": 702,
    "Problem": "Find the maximum number of nodes in a binary search tree",
    "Solution": "def max_nodes(root):<br> return max(len(root.left), len(root.right))<br>"
  },
  {
    "": 703,
    "Problem": "Check if a binary search tree is a valid BST",
    "Solution": "def is_bst(root):<br> return root.val < root.left.val and root.val < root.right.val and is_bst(root.left) and is_bst(root.right)<br>"
  },
  {
    "": 704,
    "Problem": "Find the minimum number of nodes in a binary search tree",
    "Solution": "def min_nodes(root):<br> return min(len(root.left), len(root.right))<br>"
  },
  {
    "": 705,
    "Problem": "Check if a binary search tree is balanced",
    "Solution": "def is_balanced(root):<br> return abs(len(root.left) - len(root.right)) <= 1 and is_balanced(root.left) and is_balanced(root.right)<br>"
  },
  {
    "": 706,
    "Problem": "Find the height of a binary search tree",
    "Solution": "def height(root):<br> return 1 + max(height(root.left), height(root.right))<br>"
  },
  {
    "": 707,
    "Problem": "Check if two binary search trees are identical",
    "Solution": "def are_identical(root1, root2):<br> return root1.val == root2.val and are_identical(root1.left, root2.left) and are_identical(root1.right, root2.right)<br>"
  },
  {
    "": 708,
    "Problem": "Find the number of nodes in a binary search tree that are greater than a given value",
    "Solution": "def greater_than(root, val):<br> return sum(node.val > val for node in root.left.leaves() + root.right.leaves())<br>"
  },
  {
    "": 709,
    "Problem": "Check if a binary search tree is a complete binary tree",
    "Solution": "def is_complete(root):<br> return len(root.left) == len(root.right) and is_complete(root.left) and is_complete(root.right)<br>"
  },
  {
    "": 710,
    "Problem": "Find the number of nodes in a binary search tree that are less than a given value",
    "Solution": "def less_than(root, val):<br> return sum(node.val < val for node in root.left.leaves() + root.right.leaves())<br>"
  },
  {
    "": 711,
    "Problem": "Check if a binary search tree is a perfect binary tree",
    "Solution": "def is_perfect(root):<br> return is_complete(root) and is_balanced(root)<br>"
  },
  {
    "": 712,
    "Problem": "Given a list of names, write a function that returns the names that contain the letter 'a'.",
    "Solution": "def filter_names(names):\nreturn [name for name in names if 'a' in name]"
  },
  {
    "": 713,
    "Problem": "Write a program that takes a list of numbers and returns the sum of all the even numbers.",
    "Solution": "def sum_evens(numbers):\ntotal = 0\nfor num in numbers:\nif num % 2 == 0:\ntotal += num\nreturn total"
  },
  {
    "": 714,
    "Problem": "Given a list of strings, write a function that returns the strings that are longer than 5 characters.",
    "Solution": "def filter_long_strings(strings):\nreturn [string for string in strings if len(string) > 5]"
  },
  {
    "": 715,
    "Problem": "Write a program that takes a list of integers and returns the number of pairs of integers that sum to a given target value.",
    "Solution": "def count_pairs(numbers, target):\npairs = 0\nfor i in range(len(numbers)):\nfor j in range(i+1, len(numbers)):\nif numbers[i] + numbers[j] == target:\npairs += 1\nreturn pairs"
  },
  {
    "": 716,
    "Problem": "Given a list of dictionaries, write a function that returns the dictionaries that have a value greater than 100.",
    "Solution": "def filter_dicts(dicts):\nreturn [dict for dict in dicts if dict.values() > 100]"
  },
  {
    "": 717,
    "Problem": "Write a program that takes a list of strings and returns the strings that contain the letter 'e' at least twice.",
    "Solution": "def filter_e_strings(strings):\nreturn [string for string in strings if 'e' in string and string.count('e') >= 2]"
  },
  {
    "": 718,
    "Problem": "Given a list of integers, write a function that returns the number of consecutive sequences of equal elements.",
    "Solution": "def count_sequences(numbers):\nsequences = 0\nfor i in range(len(numbers)):\nif numbers[i] == numbers[i+1]:\nsequences += 1\nreturn sequences"
  },
  {
    "": 719,
    "Problem": "Write a program that takes a list of strings and returns the strings that start with the letter 's' and end with the letter 'n'.",
    "Solution": "def filter_s_n_strings(strings):\nreturn [string for string in strings if string.startswith('s') and string.endswith('n')]"
  },
  {
    "": 720,
    "Problem": "Given a list of dictionaries, write a function that returns the dictionaries that have a key 'age' and the value of the key 'age' is greater than 30.",
    "Solution": "def filter_age_dicts(dicts):\nreturn [dict for dict in dicts if 'age' in dict and dict['age'] > 30]"
  },
  {
    "": 721,
    "Problem": "Write a program that takes a list of integers and returns the number of unique prime numbers.",
    "Solution": "def count_primes(numbers):\nprimes = set()\nfor num in numbers:\nif num > 1 and num % 2 != 0:\nprimes.add(num)\nreturn len(primes)"
  },
  {
    "": 722,
    "Problem": "",
    "Solution": ""
  },
  {
    "": 723,
    "Problem": "You are given a list of coins, some of which are heads up and some are tails up. Write a function that takes the list as input and returns the number of coins that are heads up.",
    "Solution": "def count_heads(coins):\n    return sum(coin == 'heads' for coin in coins)"
  },
  {
    "": 724,
    "Problem": "A snail is at the bottom of a 20-foot well. Each day, it climbs up 3 feet, but at night, it slips back 2 feet. How many days will it take for the snail to reach the top of the well?",
    "Solution": "def snail_well(days):\n    if days <= 0:\n        return 0\n    else:\n        return 1 + snail_well(days - 1)"
  },
  {
    "": 725,
    "Problem": "You are given a list of integers representing the weights of a set of coins. Some of the coins are counterfeit and weigh slightly less than the genuine coins. Write a function that takes the list of weights as input and returns the number of counterfeit coins.",
    "Solution": "def find_counterfeit(weights):\n    return sum(weight != max(weights) for weight in weights)"
  },
  {
    "": 726,
    "Problem": "A player is playing a game where he has to guess whether a coin will land heads or tails. If he guesses correctly, he wins $1. If he guesses incorrectly, he loses $1. Write a function that takes the number of guesses as input and returns the expected value of the game.",
    "Solution": "def coin_game(guesses):\n    return (guesses * 0.5) - (1 - 0.5) ** guesses"
  },
  {
    "": 727,
    "Problem": "A robot is at a certain position on a grid. It can move up, down, left, or right, but it cannot move through walls. Write a function that takes the robot's position and a list of moves as input and returns the new position of the robot.",
    "Solution": "def robot_move(position, moves):\n    new_position = position\n    for move in moves:\n        if move == 'up':\n            new_position -= 1\n        elif move == 'down':\n            new_position += 1\n        elif move == 'left':\n            new_position -= 10\n        elif move == 'right':\n            new_position += 10\n        else:\n            return None\n    return new_position"
  },
  {
    "": 728,
    "Problem": "You are given a list of integers representing the heights of a set of buildings. Write a function that takes the list of heights as input and returns the number of buildings that have a height greater than or equal to 10.",
    "Solution": "def tall_buildings(heights):\n    return sum(height >= 10 for height in heights)"
  },
  {
    "": 729,
    "Problem": "A player is playing a game where he has to guess the number of heads that will appear when a coin is flipped n times. If he guesses correctly, he wins $1. If he guesses incorrectly, he loses $1. Write a function that takes the number of flips as input and returns the expected value of the game.",
    "Solution": "def coin_flip(n):\n    return (1 + math.sqrt(n)) / 2"
  },
  {
    "": 730,
    "Problem": "You are given a list of integers representing the scores of a set of students. Write a function that takes the list of scores as input and returns the number of students who scored above the average score.",
    "Solution": "def above_average(scores):\n    return sum(score > sum(scores) / len(scores) for score in scores)"
  },
  {
    "": 731,
    "Problem": "A robot is at a certain position on a grid, and it can move up, down, left, or right. Write a function that takes the robot's position and a list of moves as input and returns the number of moves that the robot can make.",
    "Solution": "def robot_moves(position, moves):\n    return len([move for move in moves if position + move not in ['None', 'wall']])"
  },
  {
    "": 732,
    "Problem": "A rod of length 5 meters is to be cut into 3 pieces. What is the maximum length of each piece?",
    "Solution": "let x, y, z = 5.split(3)  # x, y, z are the lengths of the 3 pieces"
  },
  {
    "": 733,
    "Problem": "A rod of length 8 meters is to be cut into 4 pieces. What is the minimum length of each piece?",
    "Solution": "let x, y, z, w = 8.split(4)  # x, y, z, w are the lengths of the 4 pieces"
  },
  {
    "": 734,
    "Problem": "A rod of length 12 meters is to be cut into 5 pieces. What is the maximum length of the first piece?",
    "Solution": "let x, y, z, w, v = 12.split(5)  # x, y, z, w, v are the lengths of the 5 pieces"
  },
  {
    "": 735,
    "Problem": "A rod of length 15 meters is to be cut into 6 pieces. What is the minimum length of the last piece?",
    "Solution": "let x, y, z, w, v, u = 15.split(6)  # x, y, z, w, v, u are the lengths of the 6 pieces"
  },
  {
    "": 736,
    "Problem": "A rod of length 20 meters is to be cut into 7 pieces. What is the maximum length of the last piece?",
    "Solution": "let x, y, z, w, v, u, t = 20.split(7)  # x, y, z, w, v, u, t are the lengths of the 7 pieces"
  },
  {
    "": 737,
    "Problem": "A rod of length 10 meters is to be cut into 2 pieces. What is the minimum length of the first piece?",
    "Solution": "let x, y = 10.split(2)  # x, y are the lengths of the 2 pieces"
  },
  {
    "": 738,
    "Problem": "A rod of length 12 meters is to be cut into 3 pieces. What is the minimum length of the last piece?",
    "Solution": "let x, y, z = 12.split(3)  # x, y, z are the lengths of the 3 pieces"
  },
  {
    "": 739,
    "Problem": "A rod of length 18 meters is to be cut into 4 pieces. What is the maximum length of the first piece?",
    "Solution": "let x, y, z, w = 18.split(4)  # x, y, z, w are the lengths of the 4 pieces"
  },
  {
    "": 740,
    "Problem": "A rod of length 21 meters is to be cut into 5 pieces. What is the minimum length of the last piece?",
    "Solution": "let x, y, z, w, v = 21.split(5)  # x, y, z, w, v are the lengths of the 5 pieces"
  },
  {
    "": 741,
    "Problem": "A rod of length 14 meters is to be cut into 3 pieces. What is the maximum length of the last piece?",
    "Solution": "let x, y, z = 14.split(3)  # x, y, z are the lengths of the 3 pieces"
  },
  {
    "": 742,
    "Problem": "Given a string, partition it into palindromic substrings.",
    "Solution": "def partition(s): <br> palindromes = [] <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   palindromes.append(s[i:j]) <br> return palindromes <br>"
  },
  {
    "": 743,
    "Problem": "Given a string, find the longest palindromic substring.",
    "Solution": "def longest_palindrome(s): <br> longest = 0 <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   longest = max(longest, j-i+1) <br> return longest <br>"
  },
  {
    "": 744,
    "Problem": "Given a string, find the number of palindromic substrings.",
    "Solution": "def count_palindromes(s): <br> count = 0 <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   count += 1 <br> return count <br>"
  },
  {
    "": 745,
    "Problem": "Given a string, check if it is a palindrome.",
    "Solution": "def is_palindrome(s): <br> return s == s[::-1] <br>"
  },
  {
    "": 746,
    "Problem": "Given a string, find the first palindromic substring.",
    "Solution": "def first_palindrome(s): <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   return s[i:j] <br>"
  },
  {
    "": 747,
    "Problem": "Given a string, find the last palindromic substring.",
    "Solution": "def last_palindrome(s): <br> for i in range(len(s)-1, -1, -1): <br>   j = i + 1 <br>   while j > 0 and s[j] == s[j-1]: <br>     j -= 1 <br>   return s[j:i] <br>"
  },
  {
    "": 748,
    "Problem": "Given a string, find the maximum length of a palindromic substring that can be formed by removing a single character from the string.",
    "Solution": "def max_palindrome_remove(s): <br> max_len = 0 <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   max_len = max(max_len, j-i+1) <br> return max_len <br>"
  },
  {
    "": 749,
    "Problem": "Given a string, find the minimum length of a palindromic substring that can be formed by removing a single character from the string.",
    "Solution": "def min_palindrome_remove(s): <br> min_len = len(s) + 1 <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   min_len = min(min_len, j-i+1) <br> return min_len <br>"
  },
  {
    "": 750,
    "Problem": "Given a string, find the number of palindromic substrings that can be formed by removing a single character from the string.",
    "Solution": "def count_palindromes_remove(s): <br> count = 0 <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   count += 1 <br> return count <br>"
  },
  {
    "": 751,
    "Problem": "Given a string, find the longest palindromic substring that can be formed by removing a single character from the string.",
    "Solution": "def longest_palindrome_remove(s): <br> longest = 0 <br> for i in range(len(s)): <br>   j = i + 1 <br>   while j < len(s) and s[j] == s[j-1]: <br>     j += 1 <br>   longest = max(longest, j-i+1) <br> return longest <br>"
  },
  {
    "": 752,
    "Problem": "Given a string, count the number of palindromic substrings it contains.",
    "Solution": "def count_palindromes(s):<br>return sum(s[i:j+1] == s[i:j+1][::-1] for i in range(len(s)) for j in range(i, len(s)))<br>print(count_palindromes(\"racecar\"))"
  },
  {
    "": 753,
    "Problem": "Given a string, check if it is a palindrome.",
    "Solution": "def is_palindrome(s):<br>return s == s[::-1]<br>print(is_palindrome(\"level\"))"
  },
  {
    "": 754,
    "Problem": "Given a string, find the longest palindromic substring.",
    "Solution": "def longest_palindrome(s):<br>max_len = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        j += 1<br>    max_len = max(max_len, j - i + 1)<br>return max_len<br>print(longest_palindrome(\"radar\"))"
  },
  {
    "": 755,
    "Problem": "Given a string, find the number of unique palindromic substrings.",
    "Solution": "def unique_palindromes(s):<br>seen = set()<br>count = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        j += 1<br>    if s[i:j+1] not in seen:<br>        seen.add(s[i:j+1])<br>        count += 1<br>return count<br>print(unique_palindromes(\"level\"))"
  },
  {
    "": 756,
    "Problem": "Given a string, find the longest common palindromic substring between two strings.",
    "Solution": "def common_palindrome(s1, s2):<br>max_len = 0<br>for i in range(min(len(s1), len(s2))):<br>    j = i + 1<br>    while j < len(s1) and j < len(s2) and s1[j] == s2[j]:<br>        j += 1<br>    max_len = max(max_len, j - i + 1)<br>return max_len<br>print(common_palindrome(\"racecar\", \"care\"))"
  },
  {
    "": 757,
    "Problem": "Given a string, find the number of palindromic substrings that contain the letter 'a'.",
    "Solution": "def palindromes_with_a(s):<br>count = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        if s[i] == 'a':<br>            count += 1<br>return count<br>print(palindromes_with_a(\"a level racecar\"))"
  },
  {
    "": 758,
    "Problem": "Given a string, find the number of palindromic substrings that contain the letter 'r'.",
    "Solution": "def palindromes_with_r(s):<br>count = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        if s[i] == 'r':<br>            count += 1<br>return count<br>print(palindromes_with_r(\"racecar\"))"
  },
  {
    "": 759,
    "Problem": "Given a string, find the number of palindromic substrings that contain the letter 'l'.",
    "Solution": "def palindromes_with_l(s):<br>count = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        if s[i] == 'l':<br>            count += 1<br>return count<br>print(palindromes_with_l(\"level\"))"
  },
  {
    "": 760,
    "Problem": "Given a string, find the number of palindromic substrings that contain the letter 'c'.",
    "Solution": "def palindromes_with_c(s):<br>count = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        if s[i] == 'c':<br>            count += 1<br>return count<br>print(palindromes_with_c(\"racecar\"))"
  },
  {
    "": 761,
    "Problem": "Given a string, find the number of palindromic substrings that contain the letter 'e'.",
    "Solution": "def palindromes_with_e(s):<br>count = 0<br>for i in range(len(s)):<br>    j = i + 1<br>    while j < len(s) and s[j] == s[j-1]:<br>        if s[i] == 'e':<br>            count += 1<br>return count<br>print(palindromes_with_e(\"level\"))"
  },
  {
    "": 762,
    "Problem": "A person has a set of items with different weights and values, and they want to sell a subset of the items to maximize the total value, subject to a constraint on the total weight.",
    "Solution": "def item_selling(items, weight_limit): ..."
  },
  {
    "": 763,
    "Problem": "Given a list of integers, partition it into two subsets such that the sum of both subsets is equal.",
    "Solution": "def partition(arr): <br> subset1 = arr[:len(arr) // 2] <br> subset2 = arr[len(arr) // 2:] <br> return subset1, subset2"
  },
  {
    "": 764,
    "Problem": "A company has 100 employees and wants to split them equally into teams of 4, 5, or 6 members. How many ways can this be done?",
    "Solution": "def employee_teams(n=100): <br> teams = [] <br> for i in range(4, n+1, 4): <br> for j in range(i, n+1, 5): <br> for k in range(j, n+1, 6): <br> teams.append((i, j, k)) <br> return len(teams)"
  },
  {
    "": 765,
    "Problem": "A snail is at the bottom of a 20-foot well. Each day, it climbs up 3 feet, but at night, it slips back 2 feet. How many days will it take for the snail to reach the top?",
    "Solution": "def snail_well(n=20): <br> days = 0 <br> while n > 0: <br> days += 1 <br> n -= 3 <br> n += 2 <br> return days"
  },
  {
    "": 766,
    "Problem": "A box contains 10 red balls, 12 blue balls, and 8 green balls. If a ball is drawn at random from the box, what is the probability that it is blue?",
    "Solution": "def ball_probability(red=10, blue=12, green=8): <br> total = red + blue + green <br> prob_blue = blue / total <br> return prob_blue"
  },
  {
    "": 767,
    "Problem": "A window cleaning company has 5 workers who can clean 5 windows per hour. If the company has 100 windows to clean, how many hours will it take to finish the job?",
    "Solution": "def window_cleaning(workers=5, windows=100): <br> hours = windows / (workers * 5) <br> return hours"
  },
  {
    "": 768,
    "Problem": "A bookshelf has 12 shelves, and each shelf can hold 8 books. If the bookshelf is currently empty, how many ways can it be filled with books?",
    "Solution": "def bookshelf_filling(shelves=12, books_per_shelf=8): <br> ways = 1 << (shelves * books_per_shelf) <br> return ways - 1"
  },
  {
    "": 769,
    "Problem": "A water tank can hold 1000 gallons of water. If 300 gallons of water are added to the tank, what is the new volume of water in the tank?",
    "Solution": "def water_tank(old_volume=1000, added_volume=300): <br> new_volume = old_volume + added_volume <br> return new_volume"
  },
  {
    "": 770,
    "Problem": "A company sells 300 units of a product at a price of $50 per unit. If the cost of producing each unit is $30, what is the profit of the company?",
    "Solution": "def profit(units=300, price=50, cost=30): <br> profit = (price - cost) * units <br> return profit"
  },
  {
    "": 771,
    "Problem": "A box contains a mixture of 20 red and 30 blue marbles. If a marble is drawn at random from the box, what is the probability that it is red?",
    "Solution": "def marble_probability(red=20, blue=30): <br> total = red + blue <br> prob_red = red / total <br> return prob_red"
  },
  {
    "": 772,
    "Problem": "A person has $1000 to invest in a stock that increases in value by 10% per year. How much money will the person have after 5 years?",
    "Solution": "def stock_investment(principal=1000, rate=0.1, time=5): <br> amount = principal * (1 + rate)**time <br> return amount"
  },
  {
    "": 773,
    "Problem": "Given an array of integers, find the minimum number of jumps required to reach a given target value.",
    "Solution": "def min_jumps(arr, target):<br>    return min(arr[:len(arr) - 1]) if arr[0] <= target else min_jumps(arr[1:], target - arr[0]) + 1<br><br>"
  },
  {
    "": 774,
    "Problem": "A snail is at the bottom of a 20-foot well. Each day, it climbs up 3 feet, but at night, it slips back 2 feet. How many days will it take for the snail to reach the top of the well?",
    "Solution": "def snail_well(n):<br>    return (n // 3) * 3 + (n % 3) // 2<br><br>"
  },
  {
    "": 775,
    "Problem": "A person is standing at the edge of a cliff. He has a rope that is 15 feet long and he needs to reach a point that is 20 feet away from the edge. How many jumps will he need to make to reach the point?",
    "Solution": "def cliff_jump(n):<br>    return n // 5 + (n % 5) // 3<br><br>"
  },
  {
    "": 776,
    "Problem": "A ladder has 5 rungs, and the distance between each rung is 2 feet. If the ladder is placed against a wall, how many jumps will it take to reach the top of the ladder?",
    "Solution": "def ladder_jump(n):<br>    return n // 2 + (n % 2) // 1<br><br>"
  },
  {
    "": 777,
    "Problem": "A ball is thrown upwards from the ground with an initial velocity of 20 feet per second. It is caught by a person who is standing 10 feet above the ground. How many jumps will the ball make before it is caught?",
    "Solution": "def ball_catch(n):<br>    return n // 2 + (n % 2) // 1<br><br>"
  },
  {
    "": 778,
    "Problem": "A person is standing at the edge of a pool and wants to reach the other side, which is 15 feet away. He has a pole that is 10 feet long and can jump 3 feet at a time. How many jumps will he need to make to reach the other side?",
    "Solution": "def pool_jump(n):<br>    return n // 3 + (n % 3) // 2<br><br>"
  },
  {
    "": 779,
    "Problem": "A car is traveling at a speed of 60 miles per hour. It needs to travel 240 miles. How many jumps will it take to cover this distance?",
    "Solution": "def car_jump(n):<br>    return n // 4 + (n % 4) // 3<br><br>"
  },
  {
    "": 780,
    "Problem": "A rabbit is at the bottom of a 10-foot hole. It can jump 3 feet at a time. How many jumps will it take for the rabbit to reach the top of the hole?",
    "Solution": "def rabbit_hole(n):<br>    return n // 3 + (n % 3) // 2<br><br>"
  },
  {
    "": 781,
    "Problem": "A person is standing at the edge of a building that is 100 feet tall. He wants to reach the ground. He can jump 5 feet at a time. How many jumps will he need to make to reach the ground?",
    "Solution": "def building_jump(n):<br>    return n // 5 + (n % 5) // 4<br><br>"
  },
  {
    "": 782,
    "Problem": "A pencil is placed at the edge of a table that is 20 feet long. It is pushed 3 feet at a time. How many jumps will it take for the pencil to reach the other end of the table?",
    "Solution": "def pencil_push(n):<br>    return n // 3 + (n % 3) // 2<br><br>"
  },
  {
    "": 783,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn combinatorics.combinations(len(denominations), amount)"
  },
  {
    "": 784,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 785,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 786,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 787,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 788,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 789,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 790,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 791,
    "Problem": "You are given a list of coin denominations and a total amount. Write a function to calculate the number of ways to make change for the given amount using the available denominations.",
    "Solution": "def make_change(denominations, amount):\nreturn sum(combinatorics.combinations(len(denominations), i) for i in range(amount+1))"
  },
  {
    "": 792,
    "Problem": "Find the largest independent set in a graph with n nodes",
    "Solution": "def largest_independent_set(graph):\n return max(set(nx.find_cliques(graph)[0]), key=len)"
  },
  {
    "": 793,
    "Problem": "Given a matrix of 0s and 1s, find the largest rectangle that can be formed by 1s",
    "Solution": "def largest_rectangle(matrix):\n return max(nx.find_rectangles(matrix), key=lambda x: x[1] * x[0])"
  },
  {
    "": 794,
    "Problem": "Find the largest independent set in a directed graph",
    "Solution": "def largest_independent_set(graph):\n return max(set(nx.find_strongly_connected_components(graph)[0]), key=len)"
  },
  {
    "": 795,
    "Problem": "Given a list of integers, find the largest subset that sums up to a given target",
    "Solution": "def largest_subset(numbers, target):\n return max(set(combinations(numbers, min(len(numbers), target // 2))), key=sum)"
  },
  {
    "": 796,
    "Problem": "Find the largest independent set in a graph with edge weights",
    "Solution": "def largest_independent_set(graph):\n return max(set(nx.find_cliques(graph, weight='weight')[0]), key=lambda x: x['weight'] * len(x))"
  },
  {
    "": 797,
    "Problem": "Given a matrix of 0s and 1s, find the largest square that can be formed by 1s",
    "Solution": "def largest_square(matrix):\n return max(nx.find_squares(matrix), key=lambda x: x[1] * x[0])"
  },
  {
    "": 798,
    "Problem": "Find the largest independent set in a graph with multiple edges between nodes",
    "Solution": "def largest_independent_set(graph):\n return max(set(nx.find_cliques(graph, multiple_edges=True)[0]), key=len)"
  },
  {
    "": 799,
    "Problem": "Given a list of integers, find the largest subset that sums up to a given target without using any number twice",
    "Solution": "def largest_subset(numbers, target):\n return max(set(combinations(numbers, min(len(numbers), target // 2))), key=sum)"
  },
  {
    "": 800,
    "Problem": "Find the largest independent set in a graph with nodes and edges represented as strings",
    "Solution": "def largest_independent_set(graph):\n return max(set(nx.find_cliques(graph, node_attrs='label', edge_attrs='label')[0]), key=len)"
  },
  {
    "": 801,
    "Problem": "Given a list of integers, find the maximum length chain of pairs that can be formed by combining consecutive pairs of integers.",
    "Solution": "def max_chain(arr): <br> ans = 0 <br> for i in range(len(arr) - 1): <br> if arr[i] + arr[i + 1] > ans: <br> ans = arr[i] + arr[i + 1] <br> return ans <br> # Example: arr = [1, 2, 3, 4, 5, 6] <br> # Output: 6 <br>"
  },
  {
    "": 802,
    "Problem": "Given a list of strings, find the maximum length chain of pairs that can be formed by combining consecutive pairs of strings.",
    "Solution": "def max_chain(arr): <br> ans = 0 <br> for i in range(len(arr) - 1): <br> if arr[i] + arr[i + 1] > ans: <br> ans = arr[i] + arr[i + 1] <br> return ans <br> # Example: arr = ['hello', 'world', 'python', 'rocks', 'awesome'] <br> # Output: 'hello world' <br>"
  },
  {
    "": 803,
    "Problem": "Given an array of integers, find the longest sequence of consecutive integers that can be found in the array, but with the additional constraint that the sequence must start and end with the same value, and the sequence must contain at least one odd number. For example, if the input array is [1, 2, 3, 4, 5, 6, 7], the output should be [1, 3, 5, 7]",
    "Solution": [
      1,
      3,
      5,
      7
    ]
  },
  {
    "": 804,
    "Problem": "Given a list of integers, partition it into two subsets such that the sum of integers in each subset is as close as possible to half the sum of the original list.",
    "Solution": "```\ndef partition(arr):\n    n = len(arr)\n    if n <= 1:\n        return [arr]\n    else:\n        mid = n // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        return [left, right]\n```"
  },
  {
    "": 805,
    "Problem": "Given a list of integers, find the maximum sum of a subset of integers that can be selected from the list such that the sum of the subset is less than or equal to a given target value.",
    "Solution": "```\ndef max_sum_subarray(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_sum = -float('inf')\n    for i in range(n):\n        curr_sum = arr[i]\n        if curr_sum > target:\n            break\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n```"
  },
  {
    "": 806,
    "Problem": "Given a list of integers, find the minimum number of integers that need to be removed from the list such that the sum of the remaining integers is less than or equal to a given target value.",
    "Solution": "```\ndef min_remove_to_target(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    min_remove = n\n    curr_sum = sum(arr)\n    while curr_sum > target:\n        min_remove -= 1\n        curr_sum -= arr.pop()\n    return min_remove\n```"
  },
  {
    "": 807,
    "Problem": "Given a list of integers, find the maximum number of integers that can be selected from the list such that the sum of the selected integers is less than or equal to a given target value.",
    "Solution": "```\ndef max_select_to_target(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_select = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += arr[i]\n        max_select = max(max_select, i + 1)\n        if curr_sum > target:\n            break\n    return max_select\n```"
  },
  {
    "": 808,
    "Problem": "Given a list of integers, find the minimum number of integers that need to be added to the list such that the sum of the list is greater than or equal to a given target value.",
    "Solution": "```\ndef min_add_to_target(arr, target):\n    n = len(arr)\n    if n == 0:\n        return target\n    min_add = target - sum(arr)\n    return min_add\n```"
  },
  {
    "": 809,
    "Problem": "Given a list of integers, find the maximum number of integers that can be selected from the list such that the sum of the selected integers is greater than or equal to a given target value.",
    "Solution": "```\ndef max_select_from_target(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_select = 0\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += arr[i]\n        max_select = max(max_select, i + 1)\n        if curr_sum >= target:\n            break\n    return max_select\n```"
  },
  {
    "": 810,
    "Problem": "Given a list of integers, find the minimum number of integers that need to be removed from the list such that the sum of the remaining integers is greater than or equal to a given target value.",
    "Solution": "```\ndef min_remove_from_target(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    min_remove = n\n    curr_sum = sum(arr)\n    while curr_sum < target:\n        min_remove -= 1\n        curr_sum -= arr.pop()\n    return min_remove\n```"
  },
  {
    "": 811,
    "Problem": "Given a list of integers, find the maximum sum of a subset of integers that can be selected from the list such that the sum of the subset is greater than or equal to a given target value.",
    "Solution": "```\ndef max_sum_subarray_greater(arr, target):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_sum = -float('inf')\n    for i in range(n):\n        curr_sum = arr[i]\n        if curr_sum >= target:\n            break\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n```"
  },
  {
    "": 812,
    "Problem": "Given a list of integers, find the minimum number of integers that need to be added to the list such that the sum of the list is greater than or equal to a given target value.",
    "Solution": "```\ndef min_add_to_target_greater(arr, target):\n    n = len(arr)\n    if n == 0:\n        return target\n    min_add = target - sum(arr)\n    return min_add\n```"
  },
  {
    "": 813,
    "Problem": "Given a string, find the longest subsequence that consists of only seven characters.",
    "Solution": "'ABCDEFG'"
  },
  {
    "": 814,
    "Problem": "A snail is at the bottom of a 20-foot well. Each day, it climbs up 3 feet, but at night, it slips back 2 feet. How many days will it take for the snail to reach the top of the well?",
    "Solution": "import math\nmath.ceil(20/(3+2))"
  },
  {
    "": 815,
    "Problem": "A company has 3000 employees, and each employee has a unique employee ID number. The ID numbers are consecutive integers starting from 1. If the ID number of an employee is x, then the ID number of their manager is x+10. If an employee has a manager, what is the maximum number of employees that can be managed by that manager?",
    "Solution": "import math\nmath.floor(3000/10)"
  },
  {
    "": 816,
    "Problem": "A rod of length 3 meters is broken into three parts. The first part is 1 meter long, and the second part is 2 meters long. What is the length of the third part?",
    "Solution": "1 + 2 = 3"
  },
  {
    "": 817,
    "Problem": "A bookshelf has 12 shelves, and each shelf can hold 8 books. If the bookshelf is currently empty, how many books can be placed on it in total?",
    "Solution": "12 * 8 = 96"
  },
  {
    "": 818,
    "Problem": "A water tank has a capacity of 1500 liters. If 300 liters of water are added to the tank, what is the new capacity of the tank?",
    "Solution": "1500 + 300 = 1800"
  },
  {
    "": 819,
    "Problem": "A box contains 10 red balls, 12 blue balls, and 8 green balls. If a ball is drawn at random from the box, what is the probability that it is blue?",
    "Solution": "12/30 = 0.4"
  },
  {
    "": 820,
    "Problem": "A person has 1000 rupees and wants to buy a toy that costs 500 rupees. If he also buys a pencil that costs 20 rupees, how much money will he have left?",
    "Solution": "1000 - 500 - 20 = 580"
  },
  {
    "": 821,
    "Problem": "A car travels 300 miles in 6 hours. How many miles does it travel per hour?",
    "Solution": "300/6 = 50"
  },
  {
    "": 822,
    "Problem": "A rectangular garden measures 20 meters in length and 15 meters in width. If a path that is 2 meters wide is built around the garden, what is the area of the path?",
    "Solution": "20 * 15 = 300"
  },
  {
    "": 823,
    "Problem": "A cube has a surface area of 64 square meters. What is the length of each side of the cube?",
    "Solution": "64 = 4^2\n4 = side length"
  },
  {
    "": 824,
    "Problem": "Count all palindromic substrings in \"sails",
    "Solution": "['sails', 'sail', 's', 'sails', 'sail', 's']"
  },
  {
    "": 825,
    "Problem": "Find the length of the longest subsequence of [1, 2, 3, 4, 5, 6] such that adjacent elements of the subsequence are adjacent in the original sequence.",
    "Solution": "Here's a possible solution:\n\ndef longest_subsequence(seq):\n    max_len = 0\n    curr_len = 0\n    for i in range(len(seq)):\n        if seq[i] == seq[i + 1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 0\n    return max_len\n\nprint(longest_subsequence([1, 2, 3, 4, 5, 6])) # Output: 3"
  },
  {
    "": 826,
    "Problem": "Find the length of the longest subsequence of [3, 2, 1, 4, 5, 7] such that adjacent elements of the subsequence are adjacent in the original sequence.",
    "Solution": "Here's a possible solution:\n\ndef longest_subsequence(seq):\n    max_len = 0\n    curr_len = 0\n    for i in range(len(seq)):\n        if seq[i] == seq[i + 1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 0\n    return max_len\n\nprint(longest_subsequence([3, 2, 1, 4, 5, 7])) # Output: 3"
  },
  {
    "": 827,
    "Problem": "Find the length of the longest subsequence of [1, 2, 4, 5, 3, 6] such that adjacent elements of the subsequence are adjacent in the original sequence.",
    "Solution": "Here's a possible solution:\n\ndef longest_subsequence(seq):\n    max_len = 0\n    curr_len = 0\n    for i in range(len(seq)):\n        if seq[i] == seq[i + 1]:\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n        else:\n            curr_len = 0\n    return max_len\n\nprint(longest_subsequence([1, 2, 4, 5, 3, 6])) # Output: 3"
  },
  {
    "": 828,
    "Problem": "A knight is placed on a chessboard at (4, 4). How many steps will it take for the knight to reach (1, 6)?",
    "Solution": "Python code to calculate the number of steps required for the knight to reach (1, 6)"
  },
  {
    "": 829,
    "Problem": "You are given a list of integers representing the heights of a set of blocks. You need to find the minimum number of jumps required to reach the last block.",
    "Solution": "def min_jumps(heights): return min(heights[:-1], key=lambda x: heights[1:] - x)"
  },
  {
    "": 830,
    "Problem": "You are given a list of integers representing the positions of a set of obstacles on a track. You need to find the minimum number of jumps required to reach the end of the track without colliding with any obstacle.",
    "Solution": "def min_jumps(obstacles): return min(obstacles[:-1], key=lambda x: obstacles[1:] - x)"
  },
  {
    "": 831,
    "Problem": "You are given a list of integers representing the levels of a building. You need to find the minimum number of jumps required to reach the top level.",
    "Solution": "def min_jumps(levels): return min(levels[:-1], key=lambda x: levels[1:] - x)"
  },
  {
    "": 832,
    "Problem": "You are given a list of integers representing the positions of a set of checkpoints on a route. You need to find the minimum number of jumps required to reach the last checkpoint.",
    "Solution": "def min_jumps(checkpoints): return min(checkpoints[:-1], key=lambda x: checkpoints[1:] - x)"
  },
  {
    "": 833,
    "Problem": "You are given a list of integers representing the heights of a set of platforms. You need to find the minimum number of jumps required to reach the last platform.",
    "Solution": "def min_jumps(platforms): return min(platforms[:-1], key=lambda x: platforms[1:] - x)"
  },
  {
    "": 834,
    "Problem": "You are given a list of integers representing the positions of a set of hurdles on a track. You need to find the minimum number of jumps required to reach the end of the track without colliding with any hurdle.",
    "Solution": "def min_jumps(hurdles): return min(hurdles[:-1], key=lambda x: hurdles[1:] - x)"
  },
  {
    "": 835,
    "Problem": "You are given a list of integers representing the levels of a parking garage. You need to find the minimum number of jumps required to reach the top level.",
    "Solution": "def min_jumps(levels): return min(levels[:-1], key=lambda x: levels[1:] - x)"
  },
  {
    "": 836,
    "Problem": "You are given a list of integers representing the positions of a set of stairs on a floor. You need to find the minimum number of jumps required to reach the last stair.",
    "Solution": "def min_jumps(stairs): return min(stairs[:-1], key=lambda x: stairs[1:] - x)"
  },
  {
    "": 837,
    "Problem": "You are given a list of integers representing the heights of a set of ladders. You need to find the minimum number of jumps required to reach the last ladder.",
    "Solution": "def min_jumps(ladders): return min(ladders[:-1], key=lambda x: ladders[1:] - x)"
  },
  {
    "": 838,
    "Problem": "You are given a list of integers representing the positions of a set of elevators on a floor. You need to find the minimum number of jumps required to reach the last elevator.",
    "Solution": "def min_jumps(elevators): return min(elevators[:-1], key=lambda x: elevators[1:] - x)"
  },
  {
    "": 839,
    "Problem": "You are given a list of integers representing the levels of a building. You need to find the minimum number of jumps required to reach the last level without using any elevators.",
    "Solution": "def min_jumps(levels): return min(levels[:-1], key=lambda x: levels[1:] - x)"
  },
  {
    "": 840,
    "Problem": "Given an array of positive integers, find the minimum sum of a subset of the array that sums up to a given target value.",
    "Solution": "def min_sum_partition(arr, target):\n    return sum(arr[:i] + arr[i+1:]) - target"
  },
  {
    "": 841,
    "Problem": "A company produces two types of products, A and B. The profit from selling product A is $10 per unit, and the profit from selling product B is $8 per unit. The company wants to maximize its profit, but it has a limited supply of raw materials. The production of product A requires 3 units of raw materials, and the production of product B requires 2 units of raw materials. The company has a total of 100 units of raw materials. Write a Python function that takes in the number of units of product A and product B as inputs and returns the maximum profit.",
    "Solution": "def max_profit(a, b):\n    return 10 * a + 8 * b"
  },
  {
    "": 842,
    "Problem": "A snail is at the bottom of a 20-foot well. Each day, it climbs up 3 feet, but at night, it slips back 2 feet. How many days will it take for the snail to reach the top of the well?",
    "Solution": "def snail_well(n):\n    return (n // 3) * 3"
  },
  {
    "": 843,
    "Problem": "A company has a fixed amount of money to invest in two different projects, A and B. The return from investing in project A is 10% per year, and the return from investing in project B is 8% per year. The company wants to invest the money in a way that will maximize the return after 5 years. Write a Python function that takes in the amount of money available for investment and returns the maximum return after 5 years.",
    "Solution": "def investment_return(m):\n    return 0.10 * m + 0.08 * m"
  },
  {
    "": 844,
    "Problem": "A student scored 80, 70, 90, 75, 85, and 75 in six different subjects. Write a Python function that takes in the scores as inputs and returns the average score.",
    "Solution": "def average_score(s1, s2, s3, s4, s5, s6):\n    return (s1 + s2 + s3 + s4 + s5 + s6) / 6"
  },
  {
    "": 845,
    "Problem": "A library has a collection of books, and each book has a unique ID number. Write a Python function that takes in a list of book IDs and returns the number of books that have an ID that is a multiple of 3.",
    "Solution": "def books_multiple_of_3(ids):\n    return len(ids) - len(ids) % 3"
  },
  {
    "": 846,
    "Problem": "A company has a list of employees, and each employee has a unique ID number. Write a Python function that takes in a list of employee IDs and returns the number of employees that have an ID that is a multiple of 4.",
    "Solution": "def employees_multiple_of_4(ids):\n    return len(ids) - len(ids) % 4"
  },
  {
    "": 847,
    "Problem": "A box contains a mixture of 20 red, 30 blue, and 40 green marbles. Write a Python function that takes in the number of marbles drawn from the box and returns the number of marbles that are red.",
    "Solution": "def red_marbles(n):\n    return n // 2"
  },
  {
    "": 848,
    "Problem": "A company sells two types of products, A and B. The cost of producing product A is $50 per unit, and the cost of producing product B is $30 per unit. The company wants to maximize its profit, but it has a limited supply of raw materials. The production of product A requires 2 units of raw materials, and the production of product B requires 1 unit of raw materials. The company has a total of 100 units of raw materials. Write a Python function that takes in the number of units of product A and product B as inputs and returns the maximum profit.",
    "Solution": "def profit_raw_materials(a, b):\n    return 50 * a + 30 * b"
  },
  {
    "": 849,
    "Problem": "What is the minimum value of the expression (2 * 5) - 3?",
    "Solution": "The minimum value of the expression (2 * 5) - 3 is 7."
  },
  {
    "": 850,
    "Problem": "Given an array of integers, find the first pair of numbers that add up to a given target value.",
    "Solution": "```\ndef find_pair(arr, target):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return arr[i], arr[j]\n    return None, None\n```"
  },
  {
    "": 851,
    "Problem": "Write a function that takes an array of integers and returns the sum of all the pairs of elements that add up to a given target value.",
    "Solution": "```\ndef pair_sum(arr, target):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                sum += arr[i] + arr[j]\n    return sum\n```"
  },
  {
    "": 852,
    "Problem": "Given an array of integers, find the first element that appears at least twice in the array.",
    "Solution": "```\ndef find_repeated_element(arr):\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            return ele\n        seen.add(ele)\n    return None\n```"
  },
  {
    "": 853,
    "Problem": "Write a function that takes an array of integers and returns the number of pairs of elements that add up to a given target value.",
    "Solution": "```\ndef pair_count(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count\n```"
  },
  {
    "": 854,
    "Problem": "Given an array of integers, find the first element that appears at least three times in the array.",
    "Solution": "```\ndef find_repeated_element_3(arr):\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            seen.add(ele)\n        else:\n            seen.add(ele)\n    for ele in seen:\n        if seen.count(ele) >= 3:\n            return ele\n    return None\n```"
  },
  {
    "": 855,
    "Problem": "Write a function that takes an array of integers and returns the sum of all the elements that appear at least twice in the array.",
    "Solution": "```\ndef repeated_sum(arr):\n    sum = 0\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            sum += ele\n        seen.add(ele)\n    return sum\n```"
  },
  {
    "": 856,
    "Problem": "Given an array of integers, find the first element that appears at least four times in the array.",
    "Solution": "```\ndef find_repeated_element_4(arr):\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            seen.add(ele)\n        else:\n            seen.add(ele)\n    for ele in seen:\n        if seen.count(ele) >= 4:\n            return ele\n    return None\n```"
  },
  {
    "": 857,
    "Problem": "Write a function that takes an array of integers and returns the number of elements that appear at least three times in the array.",
    "Solution": "```\ndef repeated_count(arr):\n    count = 0\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            count += 1\n        seen.add(ele)\n    return count\n```"
  },
  {
    "": 858,
    "Problem": "Given an array of integers, find the first element that appears at least five times in the array.",
    "Solution": "```\ndef find_repeated_element_5(arr):\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            seen.add(ele)\n        else:\n            seen.add(ele)\n    for ele in seen:\n        if seen.count(ele) >= 5:\n            return ele\n    return None\n```"
  },
  {
    "": 859,
    "Problem": "Write a function that takes an array of integers and returns the sum of all the elements that appear at least four times in the array.",
    "Solution": "```\ndef repeated_sum_4(arr):\n    sum = 0\n    seen = set()\n    for ele in arr:\n        if ele in seen:\n            sum += ele\n        seen.add(ele)\n    return sum\n```"
  },
  {
    "": 860,
    "Problem": "Reverse a given string",
    "Solution": "def reverse_string(s): return s[::-1]; print(reverse_string('hello'))"
  },
  {
    "": 861,
    "Problem": "Check if a given string is palindrome",
    "Solution": "def is_palindrome(s): return s == s[::-1]; print(is_palindrome('racecar'))"
  },
  {
    "": 862,
    "Problem": "Find all occurrences of a given word in a string",
    "Solution": "def find_word(s, word): return [i for i, w in enumerate(s.split()) if w == word]; print(find_word('hello world', 'world'))"
  },
  {
    "": 863,
    "Problem": "Sort an array of integers in ascending order using a comparison-based sorting algorithm.",
    "Solution": "`arr = [3, 1, 4, 1, 5, 9, 2, 6];`<br>`sorted_arr = sorted(arr, key=lambda x: x)`<br>`print(sorted_arr)`"
  },
  {
    "": 864,
    "Problem": "Sort a list of strings in descending order using a non-comparison sorting algorithm.",
    "Solution": "`strings = ['hello', 'world', 'python', 'is', 'awesome']`<br>`sorted_strings = sorted(strings, key=len)`<br>`print(sorted_strings[::-1])`"
  },
  {
    "": 865,
    "Problem": "Find the median of a list of integers.",
    "Solution": "`numbers = [1, 3, 5, 7, 9, 11]`<br>`median = numbers[len(numbers) // 2]`<br>`print(median)`"
  },
  {
    "": 866,
    "Problem": "Sort a dictionary by the length of its keys.",
    "Solution": "`dct = {'hello': 1, 'world': 2, 'python': 3}`<br>`sorted_dct = sorted(dct.items(), key=lambda x: len(x[0]))`<br>`print(sorted_dct)`"
  },
  {
    "": 867,
    "Problem": "Sort a list of integers in ascending order using a non-comparison sorting algorithm.",
    "Solution": "`numbers = [3, 1, 4, 1, 5, 9, 2, 6]`<br>`sorted_numbers = sorted(numbers, key=lambda x: x**2)`<br>`print(sorted_numbers)`"
  },
  {
    "": 868,
    "Problem": "Find the maximum value in a list of integers.",
    "Solution": "`numbers = [1, 2, 3, 4, 5]`<br>`max_num = max(numbers)`<br>`print(max_num)`"
  },
  {
    "": 869,
    "Problem": "Sort a list of strings in ascending order using a comparison-based sorting algorithm.",
    "Solution": "`strings = ['hello', 'world', 'python', 'is', 'awesome']`<br>`sorted_strings = sorted(strings)`<br>`print(sorted_strings)`"
  },
  {
    "": 870,
    "Problem": "Sort a list of integers in descending order using a non-comparison sorting algorithm.",
    "Solution": "`numbers = [1, 2, 3, 4, 5]`<br>`sorted_numbers = sorted(numbers, key=lambda x: -x**2)`<br>`print(sorted_numbers[::-1])`"
  },
  {
    "": 871,
    "Problem": "Find the minimum value in a list of integers.",
    "Solution": "`numbers = [1, 2, 3, 4, 5]`<br>`min_num = min(numbers)`<br>`print(min_num)`"
  },
  {
    "": 872,
    "Problem": "Sort a list of integers in ascending order using a non-comparison sorting algorithm.",
    "Solution": "`numbers = [3, 1, 4, 1, 5, 9, 2, 6]`<br>`sorted_numbers = sorted(numbers, key=lambda x: x**3)`<br>`print(sorted_numbers)`"
  },
  {
    "": 873,
    "Problem": "Write a Python function that takes a string as input and returns the string reversed.",
    "Solution": "def reverse_string(s): return s[::-1]"
  },
  {
    "": 874,
    "Problem": "Write a Python function that takes a list of integers as input and returns the sum of all the pairs of integers in the list that add up to a given target value.",
    "Solution": "def pair_sum(lst, target): ..."
  },
  {
    "": 875,
    "Problem": "Find the shortest path between two vertices in a weighted graph using DFS",
    "Solution": "Python Code: shortest_path_dfs(graph, start, end)"
  },
  {
    "": 876,
    "Problem": "Find the in-order traversal of a binary tree",
    "Solution": "def in_order_traversal(root):\nif root == None:\nreturn []\nstack = [(root, [])]\nwhile stack:\nnode, traverse_list = stack.pop()\nyield node.val\nif node.left:\nstack.append((node.left, traverse_list + [node.val]))\nif node.right:\nstack.append((node.right, traverse_list + [node.val]))"
  },
  {
    "": 877,
    "Problem": "Check if a binary tree is a binary search tree",
    "Solution": "def is_binary_search_tree(root):\nif root == None:\nreturn True\nif not isinstance(root.val, int):\nreturn False\nif root.left and root.right:\nreturn is_binary_search_tree(root.left) and is_binary_search_tree(root.right) and root.val > root.left.val > root.right.val\nreturn False"
  },
  {
    "": 878,
    "Problem": "Find the pre-order traversal of a binary tree",
    "Solution": "def pre_order_traversal(root):\nif root == None:\nreturn []\nyield root.val\nif root.left:\nyield from pre_order_traversal(root.left)\nif root.right:\nyield from pre_order_traversal(root.right)"
  },
  {
    "": 879,
    "Problem": "Find the post-order traversal of a binary tree",
    "Solution": "def post_order_traversal(root):\nif root == None:\nreturn []\nif root.left:\nyield from post_order_traversal(root.left)\nif root.right:\nyield from post_order_traversal(root.right)\nyield root.val"
  },
  {
    "": 880,
    "Problem": "Check if a binary tree is a height balanced tree",
    "Solution": "def is_height_balanced(root):\nif root == None:\nreturn True\nif abs(height(root.left) - height(root.right)) > 1:\nreturn False\nreturn is_height_balanced(root.left) and is_height_balanced(root.right)"
  },
  {
    "": 881,
    "Problem": "Find the maximum value in a binary tree",
    "Solution": "def max_value(root):\nif root == None:\nreturn -inf\nif root.val > max_value(root.left):\nreturn root.val\nreturn max_value(root.left)"
  },
  {
    "": 882,
    "Problem": "Find the minimum value in a binary tree",
    "Solution": "def min_value(root):\nif root == None:\nreturn inf\nif root.val < min_value(root.left):\nreturn root.val\nreturn min_value(root.left)"
  },
  {
    "": 883,
    "Problem": "Check if a binary tree is a complete binary tree",
    "Solution": "def is_complete_binary_tree(root):\nif root == None:\nreturn True\nif not root.left and not root.right:\nreturn False\nreturn is_complete_binary_tree(root.left) and is_complete_binary_tree(root.right)"
  },
  {
    "": 884,
    "Problem": "Find the number of nodes in a binary tree",
    "Solution": "def num_nodes(root):\nif root == None:\nreturn 0\nreturn 1 + num_nodes(root.left) + num_nodes(root.right)"
  },
  {
    "": 885,
    "Problem": "Find the level order traversal of a binary tree",
    "Solution": "def level_order_traversal(root):\nif root == None:\nreturn []\nqueue = deque([root])\nwhile queue:\nnode = queue.popleft()\nyield node.val\nif node.left:\nqueue.append(node.left)\nif node.right:\nqueue.append(node.right)"
  },
  {
    "": 886,
    "Problem": "Reverse a linked list",
    "Solution": "`def reverse_list(head):`<br>`head = head.next`<br>`return head`<br>"
  },
  {
    "": 887,
    "Problem": "Find the middle node of a linked list",
    "Solution": "`def find_middle(head):`<br>`slow = head`<br>`fast = head.next.next`<br>`while fast.next != None:`<br>`slow = slow.next`<br>`fast = fast.next`<br>`return slow`<br>"
  },
  {
    "": 888,
    "Problem": "Remove the first occurrence of a node in a linked list",
    "Solution": "`def remove_node(head, node):`<br>`if head == node:`<br>`head = head.next`<br>`else:`<br>`head.prev.next = node.next`<br>`node.next = None`<br>`return head`<br>"
  },
  {
    "": 889,
    "Problem": "Generate a Python code to implement a basic hash function that takes a string as input and returns its hash value as a string. The hash function should use the FNV-1a algorithm.",
    "Solution": "def hash_fnv1a(s): return hashlib.fnv1a(s.encode()).hexdigest()"
  },
  {
    "": 890,
    "Problem": "Write a Python function that takes a list of strings as input and returns the number of unique words in the list. The function should use a hash table to count the number of occurrences of each word.",
    "Solution": "def count_unique_words(words): dic = {} for w in words: if w not in dic: dic[w] = 1 return len(dic)"
  },
  {
    "": 891,
    "Problem": "Implement a simple Bloom filter in Python. The Bloom filter should take a list of strings as input and return True if any of the strings have been seen before, False otherwise. The filter should use a hash function to map the strings to a bit vector.",
    "Solution": "def bloom_filter(words): bf = BloomFilter(words) return bf.has_seen(words[0])"
  },
  {
    "": 892,
    "Problem": "Write a Python function that takes a string as input and returns its longest palindromic substring. The function should use a hash table to keep track of the characters in the string.",
    "Solution": "def longest_palindrome(s): dic = {} for i in range(len(s)): if s[i] in dic: if len(s[i:]) > len(dic[s[i]]): dic[s[i]] = s[i:] return dic[s[0]]"
  },
  {
    "": 893,
    "Problem": "Implement a Python function that takes a list of integers as input and returns the number of pairs of integers that have a given target value. The function should use a hash table to count the number of occurrences of each integer.",
    "Solution": "def count_pairs(numbers, target): dic = {} for i in range(len(numbers)): for j in range(i, len(numbers)): if numbers[i] + numbers[j] == target: dic[numbers[i]] = dic.get(numbers[i], 0) + 1 return sum(dic.values())"
  },
  {
    "": 894,
    "Problem": 9,
    "Solution": "Find the last integer in a sorted array that is a multiple of a given integer"
  },
  {
    "": 895,
    "Problem": "Reverse Linked List",
    "Solution": "def reverse_list(head): <br>     if head is None: <br>         return None <br>     else: <br>         temp = head.next <br>         head.next = None <br>         return temp <br>"
  },
  {
    "": 896,
    "Problem": "Maximum Subarray",
    "Solution": "def max_subarray(arr): <br>     if len(arr) == 0: <br>         return 0 <br>     else: <br>         max_so_far = arr[0] <br>         curr_max = arr[0] <br>         for i in range(1, len(arr)): <br>             curr_max = max(curr_max, arr[i]) <br>         return max_so_far <br>"
  },
  {
    "": 897,
    "Problem": "Min Stack",
    "Solution": "class Node: <br>     def __init__(self, val): <br>         self.val = val <br>         self.next = None <br> class Stack: <br>     def __init__(self): <br>         self.head = None <br>     def push(self, val): <br>         new_node = Node(val) <br>         new_node.next = self.head <br>         self.head = new_node <br>     def pop(self): <br>         if self.head is None: <br>             return None <br>         temp = self.head.val <br>         self.head = self.head.next <br>         return temp <br> def min_stack(arr): <br>     stack = Stack() <br>     for i in range(len(arr)): <br>         stack.push(arr[i]) <br>     while stack.head is not None: <br>         print(stack.pop()) <br>     return stack.head.val <br>"
  },
  {
    "": 898,
    "Problem": "Validate IP Address",
    "Solution": "def validate_ip(ip): <br>     if len(ip) != 12: <br>         return False <br>     for i in range(4): <br>         if ip[i] > 255 or ip[i] < 0: <br>             return False <br>     return True <br>"
  },
  {
    "": 899,
    "Problem": "Merge two sorted lists",
    "Solution": "def merge_lists(list1, list2): <br> sorted_list = [] <br> while len(list1) > 0 and len(list2) > 0: <br> if list1[0] <= list2[0]: <br> sorted_list.append(list1.pop(0)) <br> else: <br> sorted_list.append(list2.pop(0)) <br> while len(list1) > 0: <br> sorted_list.append(list1.pop(0)) <br> while len(list2) > 0: <br> sorted_list.append(list2.pop(0)) <br> return sorted_list"
  },
  {
    "": 900,
    "Problem": "Find the maximum value in a list",
    "Solution": "def find_max(list): <br> if not list: <br> return None <br> else: <br> return max(list)"
  },
  {
    "": 901,
    "Problem": "Check if a list is a palindrome",
    "Solution": "def is_palindrome(list): <br> if not list: <br> return False <br> else: <br> return list == list[::-1]"
  },
  {
    "": 902,
    "Problem": "Split a list into two halves",
    "Solution": "def split_list(list): <br> half_len = len(list) // 2 <br> first_half = list[:half_len] <br> second_half = list[half_len:] <br> return first_half, second_half"
  },
  {
    "": 903,
    "Problem": "Find the median of a list",
    "Solution": "def find_median(list): <br> if not list: <br> return None <br> else: <br> return median(list)"
  },
  {
    "": 904,
    "Problem": "Check if a list contains a specific element",
    "Solution": "def contains_element(list, element): <br> if not list: <br> return False <br> else: <br> for item in list: <br> if item == element: <br> return True <br> return False"
  },
  {
    "": 905,
    "Problem": "Find the first duplicate in a list",
    "Solution": "def find_duplicate(list): <br> if not list: <br> return None <br> else: <br> for i in range(len(list)): <br> if list[i] == list[i+1]: <br> return list[i] <br> return None"
  },
  {
    "": 906,
    "Problem": "Remove duplicates from a list",
    "Solution": "def remove_duplicates(list): <br> if not list: <br> return [] <br> else: <br> seen = set() <br> res = [] <br> for item in list: <br> if item not in seen: <br> seen.add(item) <br> res.append(item) <br> return res"
  },
  {
    "": 907,
    "Problem": "Find the maximum value in a list of integers",
    "Solution": "def find_max_int(list): <br> if not list: <br> return None <br> else: <br> return max(list, key=lambda x: int(x))"
  },
  {
    "": 908,
    "Problem": "Check if a list is sorted",
    "Solution": "def is_sorted(list): <br> if not list: <br> return False <br> else: <br> return all(x <= y for x, y in zip(list, list[1:]))"
  },
  {
    "": 909,
    "Problem": "Calculate the sum of the numbers in a sliding window of size 3",
    "Solution": "```python\ndef sum_window(numbers, window_size=3):\n    sum = 0\n    for i in range(window_size):\n        sum += numbers[i]\n    return sum\n```"
  },
  {
    "": 910,
    "Problem": "Calculate the average of the numbers in a sliding window of size 5",
    "Solution": "```python\ndef avg_window(numbers, window_size=5):\n    sum = 0\n    count = 0\n    for i in range(window_size):\n        sum += numbers[i]\n        count += 1\n    return sum / count\n```"
  },
  {
    "": 911,
    "Problem": "Find the maximum value in a sliding window of size 7",
    "Solution": "```python\ndef max_window(numbers, window_size=7):\n    max_val = None\n    for i in range(window_size):\n        if max_val is None or numbers[i] > max_val:\n            max_val = numbers[i]\n    return max_val\n```"
  },
  {
    "": 912,
    "Problem": "Find the minimum value in a sliding window of size 3",
    "Solution": "```python\ndef min_window(numbers, window_size=3):\n    min_val = None\n    for i in range(window_size):\n        if min_val is None or numbers[i] < min_val:\n            min_val = numbers[i]\n    return min_val\n```"
  },
  {
    "": 913,
    "Problem": "Count the number of pairs of integers in a sliding window of size 5 that sum to a given target value",
    "Solution": "```python\ndef count_pairs(numbers, target, window_size=5):\n    count = 0\n    for i in range(window_size):\n        for j in range(i, window_size):\n            if numbers[i] + numbers[j] == target:\n                count += 1\n    return count\n```"
  },
  {
    "": 914,
    "Problem": "Calculate the sum of the squares of the numbers in a sliding window of size 7",
    "Solution": "```python\ndef sum_squares_window(numbers, window_size=7):\n    sum = 0\n    for i in range(window_size):\n        sum += numbers[i] ** 2\n    return sum\n```"
  },
  {
    "": 915,
    "Problem": "Calculate the number of consecutive integers in a sliding window of size 3 that are greater than a given threshold",
    "Solution": "```python\ndef consecutive_greater(numbers, threshold, window_size=3):\n    count = 0\n    for i in range(window_size):\n        if numbers[i] > threshold:\n            count += 1\n            if i + 1 < window_size and numbers[i + 1] > threshold:\n                count += 1\n            if i + 2 < window_size and numbers[i + 2] > threshold:\n                count += 1\n    return count\n```"
  },
  {
    "": 916,
    "Problem": "Calculate the number of consecutive integers in a sliding window of size 5 that are less than a given threshold",
    "Solution": "```python\ndef consecutive_less(numbers, threshold, window_size=5):\n    count = 0\n    for i in range(window_size):\n        if numbers[i] < threshold:\n            count += 1\n            if i + 1 < window_size and numbers[i + 1] < threshold:\n                count += 1\n            if i + 2 < window_size and numbers[i + 2] < threshold:\n                count += 1\n            if i + 3 < window_size and numbers[i + 3] < threshold:\n                count += 1\n    return count\n```"
  },
  {
    "": 917,
    "Problem": "Calculate the number of integers in a sliding window of size 7 that are divisible by a given divisor",
    "Solution": "```python\ndef divisible_window(numbers, divisor, window_size=7):\n    count = 0\n    for i in range(window_size):\n        if numbers[i] % divisor == 0:\n            count += 1\n    return count\n```"
  },
  {
    "": 918,
    "Problem": "Calculate the number of integers in a sliding window of size 3 that are prime numbers",
    "Solution": "```python\ndef prime_window(numbers, window_size=3):\n    count = 0\n    for i in range(window_size):\n        if isprime(numbers[i]):\n            count += 1\n    return count\n```"
  },
  {
    "": 919,
    "Problem": "",
    "Solution": ""
  },
  {
    "": 920,
    "Problem": "Given a matrix of size 3x4, how would you find the sum of all elements in the matrix?",
    "Solution": "`sum(matrix)`"
  },
  {
    "": 921,
    "Problem": "How would you find the maximum value in a matrix of size 4x5?",
    "Solution": "`max(matrix)`"
  },
  {
    "": 922,
    "Problem": "Given a matrix of size 5x6, how would you find the mean of all elements in the matrix?",
    "Solution": "`mean(matrix)`"
  },
  {
    "": 923,
    "Problem": "How would you find the standard deviation of a matrix of size 6x7?",
    "Solution": "`std(matrix)`"
  },
  {
    "": 924,
    "Problem": "Given a matrix of size 7x8, how would you find the sum of all elements in the diagonal?",
    "Solution": "`sum(diag(matrix))`"
  },
  {
    "": 925,
    "Problem": "How would you find the number of rows in a matrix of size 8x9?",
    "Solution": "`shape(matrix)[0]`"
  },
  {
    "": 926,
    "Problem": "Given a matrix of size 9x10, how would you find the number of columns?",
    "Solution": "`shape(matrix)[1]`"
  },
  {
    "": 927,
    "Problem": "How would you find the transpose of a matrix of size 10x9?",
    "Solution": "`transpose(matrix)`"
  },
  {
    "": 928,
    "Problem": "Given a matrix of size 9x10, how would you find the determinant?",
    "Solution": "`det(matrix)`"
  },
  {
    "": 929,
    "Problem": "How would you find the inverse of a matrix of size 10x9?",
    "Solution": "`inv(matrix)`"
  },
  {
    "": 930,
    "Problem": "import re",
    "Solution": "re.findall(r'(?<=' + letter + ').+', text)\n    10"
  },
  {
    "": 931,
    "Problem": "Compress a large dataset of images",
    "Solution": "Use Pillow library to compress images and reduce file size by 50%"
  },
  {
    "": 932,
    "Problem": "Optimize a slow-loading webpage",
    "Solution": "Use Gzip to compress HTML, CSS, and JavaScript files, reducing page load time by 75%"
  },
  {
    "": 933,
    "Problem": "Reduce the size of a large CSV file",
    "Solution": "Use Pandas library to read and write CSV files, and compress data using Run-Length Encoding (RLE) technique, reducing file size by 80%"
  },
  {
    "": 934,
    "Problem": "Compress a video file",
    "Solution": "Use FFmpeg library to compress video file using H.264 codec, reducing file size by 60%"
  },
  {
    "": 935,
    "Problem": "Implement a lossless audio compression algorithm",
    "Solution": "Use SciPy library to implement a lossless audio compression algorithm, such as FLAC, and reduce audio file size by 50%"
  },
  {
    "": 936,
    "Problem": "Compress a large text document",
    "Solution": "Use NLTK library to tokenize text and remove stop words, and use Gzip to compress text, reducing file size by 85%"
  },
  {
    "": 937,
    "Problem": "Optimize a database query",
    "Solution": "Use SQLAlchemy library to optimize a database query, reducing query execution time by 90%"
  },
  {
    "": 938,
    "Problem": "Compress a large dataset of scientific data",
    "Solution": "Use NumPy library to compress scientific data using a lossless compression algorithm, such as LZW, reducing file size by 75%"
  },
  {
    "": 939,
    "Problem": "Implement a data deduplication algorithm",
    "Solution": "Use pandas library to implement a data deduplication algorithm, reducing data size by 60%"
  },
  {
    "": 940,
    "Problem": "Compress a large dataset of logs",
    "Solution": "Use Logging library to compress logs using Gzip, reducing log file size by 90%"
  },
  {
    "": 941,
    "Problem": "Write a program to create a new file and write some text to it.",
    "Solution": "```\nfile = open(\"new_file.txt\", \"w\")\nfile.write(\"This is some text written to a new file.\")\nfile.close()\n```"
  },
  {
    "": 942,
    "Problem": "Read a file and print its contents.",
    "Solution": "```\nfile = open(\"existing_file.txt\", \"r\")\nprint(file.read())\nfile.close()\n```"
  },
  {
    "": 943,
    "Problem": "Write a program to append some text to an existing file.",
    "Solution": "```\nfile = open(\"existing_file.txt\", \"a\")\nfile.write(\"This is some text appended to an existing file.\")\nfile.close()\n```"
  },
  {
    "": 944,
    "Problem": "Write a program to read a file line by line and print each line.",
    "Solution": "```\nfile = open(\"large_file.txt\", \"r\")\nfor line in file:\n    print(line)\nfile.close()\n```"
  },
  {
    "": 945,
    "Problem": "Write a program to write a list of integers to a file.",
    "Solution": "```\nnumbers = [1, 2, 3, 4, 5]\nwith open(\"numbers.txt\", \"w\") as file:\n    for number in numbers:\n        file.write(f\"{number}\\n\")\n```"
  },
  {
    "": 946,
    "Problem": "Write a program to read a file and extract all the integers from it.",
    "Solution": "```\nwith open(\"numbers.txt\", \"r\") as file:\n    numbers = [int(line.strip()) for line in file]\nprint(numbers)\n```"
  },
  {
    "": 947,
    "Problem": "Write a program to delete a file.",
    "Solution": "```\nos.remove(\"old_file.txt\")\n```"
  },
  {
    "": 948,
    "Problem": "Write a program to rename a file.",
    "Solution": "```\nos.rename(\"old_file.txt\", \"new_file.txt\")\n```"
  },
  {
    "": 949,
    "Problem": "Write a program to create a directory and create a file inside it.",
    "Solution": "```\nos.makedirs(\"new_directory\")\nwith open(\"new_directory/new_file.txt\", \"w\") as file:\n    file.write(\"This is some text written to a new file in a new directory.\")\n```"
  },
  {
    "": 950,
    "Problem": "Write a program to copy a file.",
    "Solution": "```\nshutil.copy(\"original_file.txt\", \"copy_of_original_file.txt\")\n```"
  },
  {
    "": 951,
    "Problem": "How to define a class in Python that inherits from another class?",
    "Solution": "class Child(Parent): pass"
  },
  {
    "": 952,
    "Problem": "How to create an instance of a class in Python?",
    "Solution": "x = Child()"
  },
  {
    "": 953,
    "Problem": "How to define a method in a class that takes an argument and returns a value?",
    "Solution": "def greet(name): return \"Hello, \" + name"
  },
  {
    "": 954,
    "Problem": "How to call a method on an instance of a class?",
    "Solution": "x.greet(\"John\")"
  },
  {
    "": 955,
    "Problem": "How to define a class that has a private attribute?",
    "Solution": "class Person: private_name = \"John"
  },
  {
    "": 956,
    "Problem": "How to define a class that has a static method?",
    "Solution": "class Math: @staticmethod def add(a, b): return a + b"
  },
  {
    "": 957,
    "Problem": "How to call a static method on a class?",
    "Solution": "Math.add(3, 5)"
  },
  {
    "": 958,
    "Problem": "How to define a class that has a property?",
    "Solution": "class Person: @property def name(self): return self.private_name"
  },
  {
    "": 959,
    "Problem": "How to define a class that has a constructor that takes an argument?",
    "Solution": "class Person: def __init__(self, name): self.private_name = name"
  },
  {
    "": 960,
    "Problem": "How to define a class that has a metaclass?",
    "Solution": "class Person(type): pass"
  },
  {
    "": 961,
    "Problem": "Inheritance - Animal class hierarchy",
    "Solution": "class Animal: pass class Dog(Animal): pass class Cat(Animal): pass"
  },
  {
    "": 962,
    "Problem": "Polymorphism - Shape class hierarchy",
    "Solution": "class Shape: pass class Circle(Shape): def __init__(self, radius): self.radius = radius class Rectangle(Shape): def __init__(self, width, height): self.width = width; self.height = height"
  },
  {
    "": 963,
    "Problem": "Inheritance - Vehicle class hierarchy",
    "Solution": "class Vehicle: pass class Car(Vehicle): pass class Truck(Vehicle): pass"
  },
  {
    "": 964,
    "Problem": "Polymorphism - Animal sounds",
    "Solution": "class Animal: def make_sound(self): pass class Dog(Animal): def make_sound(self): print(\"Woof!\") class Cat(Animal): def make_sound(self): print(\"Meow!\")"
  },
  {
    "": 965,
    "Problem": "Inheritance - Employee class hierarchy",
    "Solution": "class Employee: pass class Manager(Employee): pass class Staff(Employee): pass"
  },
  {
    "": 966,
    "Problem": "Polymorphism - Shape area calculation",
    "Solution": "class Shape: def area(self): pass class Circle(Shape): def area(self): return 3.14 * self.radius ** 2 class Rectangle(Shape): def area(self): return self.width * self.height"
  },
  {
    "": 967,
    "Problem": "Inheritance - School class hierarchy",
    "Solution": "class School: pass class HighSchool(School): pass class ElementarySchool(School): pass"
  },
  {
    "": 968,
    "Problem": "Polymorphism - Animal movement",
    "Solution": "class Animal: def move(self): pass class Dog(Animal): def move(self): print(\"Walking!\") class Cat(Animal): def move(self): print(\"Jumping!\")"
  },
  {
    "": 969,
    "Problem": "Inheritance - Customer class hierarchy",
    "Solution": "class Customer: pass class RetailCustomer(Customer): pass class WholesaleCustomer(Customer): pass"
  },
  {
    "": 970,
    "Problem": "Polymorphism - Shape perimeter calculation",
    "Solution": "class Shape: def perimeter(self): pass class Circle(Shape): def perimeter(self): return 2 * 3.14 * self.radius class Rectangle(Shape): def perimeter(self): return 2 * (self.width + self.height)"
  },
  {
    "": 971,
    "Problem": "How to handle invalid data types in a list comprehension?",
    "Solution": "Use a try-except block to catch TypeError and handle it appropriately."
  },
  {
    "": 972,
    "Problem": "How to handle missing values in a pandas DataFrame?",
    "Solution": "Use try-except block to catch ValueError and handle it appropriately."
  },
  {
    "": 973,
    "Problem": "How to handle too many arguments in a function call?",
    "Solution": "Use a try-except block to catch TypeErrror and handle it appropriately."
  },
  {
    "": 974,
    "Problem": "How to handle a situation where a file doesn't exist?",
    "Solution": "Use a try-except block to catch FileNotFoundError and handle it appropriately."
  },
  {
    "": 975,
    "Problem": "How to handle a situation where a module isn't installed?",
    "Solution": "Use a try-except block to catch ModuleNotFoundError and handle it appropriately."
  },
  {
    "": 976,
    "Problem": "How to handle a situation where a function doesn't exist?",
    "Solution": "Use a try-except block to catch AttributeError and handle it appropriately."
  },
  {
    "": 977,
    "Problem": "How to handle a situation where a variable doesn't exist?",
    "Solution": "Use a try-except block to catch NameError and handle it appropriately."
  },
  {
    "": 978,
    "Problem": "How to handle a situation where a database connection fails?",
    "Solution": "Use a try-except block to catch SQLException and handle it appropriately."
  },
  {
    "": 979,
    "Problem": "How to handle a situation where a socket connection fails?",
    "Solution": "Use a try-except block to catch socket.error and handle it appropriately."
  },
  {
    "": 980,
    "Problem": "How to handle a situation where a JSON decode fails?",
    "Solution": "Use a try-except block to catch JSONDecodeError and handle it appropriately."
  },
  {
    "": 981,
    "Problem": "Write a Python program that uses multithreading to calculate the sum of two arrays.",
    "Solution": "import threading\n\ndef sum_arrays(arr1, arr2):\nthread1 = threading.Thread(target=sum_arrays, args=(arr1,))\nthread2 = threading.Thread(target=sum_arrays, args=(arr2,))\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nreturn arr1 + arr2\n\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\nprint(sum_arrays(arr1, arr2)) # Output: 10"
  },
  {
    "": 982,
    "Problem": "How to optimize the memory usage of a Python program that performs a large amount of data processing?",
    "Solution": "Use Python's built-in memory management functions such as `numpy.memmap` or `scipy.sparse` to efficiently store and process large datasets. Consider using a 64-bit version of Python to handle large datasets that don't fit in memory."
  },
  {
    "": 983,
    "Problem": "How to prevent memory leaks in a Python program that uses a lot of temporary objects?",
    "Solution": "Use Python's built-in `weakref` module to detect and break circular references that can cause memory leaks. Use Python's `gc` module to force garbage collection and free up memory. Use `with` statements to ensure that temporary objects are properly cleaned up."
  },
  {
    "": 984,
    "Problem": "How to improve the performance of a Python program that performs a lot of string concatenation?",
    "Solution": "Use Python's `str.format` method or f-strings instead of concatenating strings directly. This can reduce the number of memory allocations and copies. Use a string buffer or a string accumulator to build up strings in a loop."
  },
  {
    "": 985,
    "Problem": "How to optimize the memory usage of a Python program that performs a lot of image processing?",
    "Solution": "Use Python's `Pillow` library to efficiently handle image data. Use `Pillow.Image.frombuffer` to create images from memory-mapped files, reducing the need for memory allocation. Use `Pillow.Image.save` to save images in a memory-efficient format."
  },
  {
    "": 986,
    "Problem": "How to prevent memory leaks in a Python program that uses a lot of Python objects?",
    "Solution": "Use Python's `weakref` module to detect and break circular references that can cause memory leaks. Use Python's `gc` module to force garbage collection and free up memory. Use `with` statements to ensure that objects are properly cleaned up. Use Python's `del` statement to remove unused objects from memory."
  },
  {
    "": 987,
    "Problem": "How to improve the performance of a Python program that performs a lot of dictionary lookups?",
    "Solution": "Use Python's `dict.get` method instead of `dict.keys` or `dict.values` to reduce the number of memory allocations. Use a dictionary's `items` or `values` method to iterate over the dictionary instead of iterating over the keys and looking up the values separately. Use a hash table or a tree-based dictionary for large datasets."
  },
  {
    "": 988,
    "Problem": "How to optimize the memory usage of a Python program that performs a lot of numerical computations?",
    "Solution": "Use Python's `numpy` library to efficiently handle numerical computations. Use `numpy.zeros` or `numpy.zeros_like` to create arrays with minimal memory allocation. Use `numpy.ufunc` to create custom functions that operate on arrays and reduce memory allocation."
  },
  {
    "": 989,
    "Problem": "How to prevent memory leaks in a Python program that uses a lot of file I/O?",
    "Solution": "Use Python's `contextlib.ExitStack` to ensure that files are properly closed, even if an exception is raised. Use Python's `with` statements to ensure that file objects are properly cleaned up. Use a `try`-`except` block to catch and handle exceptions that may cause memory leaks."
  },
  {
    "": 990,
    "Problem": "How to improve the performance of a Python program that performs a lot of network I/O?",
    "Solution": "Use Python's `asyncio` library to perform network I/O asynchronously, reducing the amount of memory used by the program. Use Python's `socket` library to efficiently handle network sockets. Use a connection pool to re-use existing connections and reduce the overhead of creating new connections."
  },
  {
    "": 991,
    "Problem": "How to optimize the memory usage of a Python program that performs a lot of data compression?",
    "Solution": "Use Python's `zlib` library to efficiently compress and decompress data. Use Python's `lzma` library to compress and decompress data using the LZMA algorithm. Use a compression library that supports multiple algorithms and can automatically choose the best algorithm for the data being compressed."
  },
  {
    "": 992,
    "Problem": "How to prevent memory leaks in a Python program that uses a lot of third-party libraries?",
    "Solution": "Use Python's `weakref` module to detect and break circular references that can cause memory leaks. Use Python's `gc` module to force garbage collection and free up memory. Use `with` statements to ensure that objects are properly cleaned up. Check the documentation of the third-party libraries to see if they have any known memory leaks or issues."
  },
  {
    "": 993,
    "Problem": "Implement the Singleton pattern in Python",
    "Solution": "class Singleton: <br>    def __init__(self): <br>        self.instance = None <br>    def __call__(self): <br>        if self.instance is None: <br>            self.instance = super().__call__() <br>        return self.instance"
  },
  {
    "": 994,
    "Problem": "Implement the Factory pattern in Python",
    "Solution": "class Factory: <br>    def __init__(self, type): <br>        self.type = type <br>    def create(self): <br>        if self.type == \"circle\": <br>            return Circle() <br>        elif self.type == \"square\": <br>            return Square() <br>        else: <br>            raise ValueError(\"Invalid type\")"
  },
  {
    "": 995,
    "Problem": "Implement the Observer pattern in Python",
    "Solution": "class Subject: <br>    def __init__(self): <br>        self.observers = [] <br>    def attach(self, observer): <br>        self.observers.append(observer) <br>    def detach(self, observer): <br>        self.observers.remove(observer) <br>    def notify(self): <br>        for observer in self.observers: <br>            observer.update()"
  },
  {
    "": 996,
    "Problem": "Implement the Decorator pattern in Python",
    "Solution": "def decorator(func): <br>        def wrapper(*args, **kwargs): <br>            print(\"Before calling function\") <br>            result = func(*args, **kwargs) <br>            print(\"After calling function\") <br>            return result <br>        return wrapper"
  },
  {
    "": 997,
    "Problem": "Normalize a database table with repeating groups",
    "Solution": "Solution: Create a separate table for each set of repeating groups and link them to the main table using foreign keys"
  },
  {
    "": 998,
    "Problem": "Normalize a database table with multivalued dependencies",
    "Solution": "Solution: Create a separate table for each multivalued dependency and link it to the main table using foreign keys"
  },
  {
    "": 999,
    "Problem": "Normalize a database table with transitive dependencies",
    "Solution": "Solution: Create a separate table for each transitive dependency and link it to the main table using foreign keys"
  },
  {
    "": 1000,
    "Problem": "Normalize a database table with recursive relationships",
    "Solution": "Solution: Use a recursive query to normalize the table and link the related records using foreign keys"
  },
  {
    "": 1001,
    "Problem": "Normalize a database table with large text fields",
    "Solution": "Solution: Split the large text fields into smaller fields and use a separate table to store the text data"
  },
  {
    "": 1002,
    "Problem": "Normalize a database table with redundant data",
    "Solution": "Solution: Remove the redundant data and use a separate table to store the data that needs to be shared across multiple records"
  },
  {
    "": 1003,
    "Problem": "Normalize a database table with inconsistent data types",
    "Solution": "Solution: Use a separate table to store the data that needs to be shared across multiple records and use consistent data types for each field"
  },
  {
    "": 1004,
    "Problem": "Normalize a database table with missing data",
    "Solution": "Solution: Use a separate table to store the missing data and link it to the main table using foreign keys"
  },
  {
    "": 1005,
    "Problem": "Normalize a database table with invalid data",
    "Solution": "Solution: Use a separate table to store the invalid data and link it to the main table using foreign keys"
  },
  {
    "": 1006,
    "Problem": "Normalize a database table with unnecessary data",
    "Solution": "Solution: Remove the unnecessary data and use a separate table to store the data that needs to be shared across multiple records"
  },
  {
    "": 1007,
    "Problem": "Write a Python script to connect to a MySQL database and retrieve all the tables in the database.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname', database='database_name')<br>cursor = cnx.cursor()<br>cursor.execute('SELECT * FROM information_schema.tables WHERE table_schema = database_name')<br>tables = cursor.fetchall()<br>for table in tables:<br>    print(table[0])<br>cnx.close()"
  },
  {
    "": 1008,
    "Problem": "Write a Python script to insert data into a MySQL table.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname', database='database_name')<br>cursor = cnx.cursor()<br>data = (('John', 25), ('Jane', 30), ('Bob', 35))<br>cursor.executemany('INSERT INTO mytable (name, age) VALUES (%, %)', data)<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1009,
    "Problem": "Write a Python script to update a MySQL table.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname', database='database_name')<br>cursor = cnx.cursor()<br>data = (('John', 25), ('Jane', 30), ('Bob', 35))<br>cursor.executemany('UPDATE mytable SET age = % WHERE name = %', data)<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1010,
    "Problem": "Write a Python script to retrieve data from a MySQL table.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname', database='database_name')<br>cursor = cnx.cursor()<br>cursor.execute('SELECT * FROM mytable')<br>data = cursor.fetchall()<br>for row in data:<br>    print(row)<br>cnx.close()"
  },
  {
    "": 1011,
    "Problem": "Write a Python script to delete data from a MySQL table.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname', database='database_name')<br>cursor = cnx.cursor()<br>cursor.execute('DELETE FROM mytable WHERE name = %', ('John',))<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1012,
    "Problem": "Write a Python script to create a MySQL database.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname')<br>cursor = cnx.cursor()<br>cursor.execute('CREATE DATABASE mydatabase')<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1013,
    "Problem": "Write a Python script to drop a MySQL database.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname')<br>cursor = cnx.cursor()<br>cursor.execute('DROP DATABASE mydatabase')<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1014,
    "Problem": "Write a Python script to create a MySQL user.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname')<br>cursor = cnx.cursor()<br>cursor.execute('CREATE USER myuser@localhost IDENTIFIED BY \\'mypassword\\'')<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1015,
    "Problem": "Write a Python script to grant privileges to a MySQL user.",
    "Solution": "import mysql.connector<br>cnx = mysql.connector.connect(user='username', password='password', host='hostname')<br>cursor = cnx.cursor()<br>cursor.execute('GRANT SELECT, INSERT, UPDATE, DELETE ON mydatabase.* TO myuser@localhost')<br>cnx.commit()<br>cnx.close()"
  },
  {
    "": 1016,
    "Problem": "How to map a Python class to a database table?",
    "Solution": "Use ORM libraries like SQLAlchemy or Django ORM to define mappings between Python classes and database tables."
  },
  {
    "": 1017,
    "Problem": "How to perform CRUD (Create, Read, Update, Delete) operations using ORM?",
    "Solution": "Use the ORM library's built-in methods to perform CRUD operations. For example, in SQLAlchemy, you can use the `create()` method to create a new object, the `read()` method to retrieve an object, the `update()` method to update an object, and the `delete()` method to delete an object."
  },
  {
    "": 1018,
    "Problem": "How to handle relationships between objects using ORM?",
    "Solution": "Use the ORM library's built-in support for relationships. For example, in SQLAlchemy, you can use the `@relationship()` decorator to define relationships between classes."
  },
  {
    "": 1019,
    "Problem": "How to perform queries using ORM?",
    "Solution": "Use the ORM library's built-in query methods to perform queries. For example, in SQLAlchemy, you can use the `Session.query()` method to perform a query."
  },
  {
    "": 1020,
    "Problem": "How to handle transactions using ORM?",
    "Solution": "Use the ORM library's built-in support for transactions. For example, in SQLAlchemy, you can use the `Session.begin()` method to start a transaction, and the `Session.commit()` method to commit the transaction."
  },
  {
    "": 1021,
    "Problem": "How to handle concurrency control using ORM?",
    "Solution": "Use the ORM library's built-in support for concurrency control. For example, in SQLAlchemy, you can use the `@version()` decorator to add versioning support to a class, and the `@lockmode()` decorator to specify the lock mode for a class."
  },
  {
    "": 1022,
    "Problem": "How to handle lazy loading using ORM?",
    "Solution": "Use the ORM library's built-in support for lazy loading. For example, in SQLAlchemy, you can use the `@lazyload()` decorator to specify that a relationship should be loaded lazily."
  },
  {
    "": 1023,
    "Problem": "How to handle serialization and deserialization using ORM?",
    "Solution": "Use the ORM library's built-in support for serialization and deserialization. For example, in SQLAlchemy, you can use the `pickle()` method to serialize an object, and the `unpickle()` method to deserialize an object."
  },
  {
    "": 1024,
    "Problem": "How to handle caching using ORM?",
    "Solution": "Use the ORM library's built-in support for caching. For example, in SQLAlchemy, you can use the `cache()` method to cache an object."
  },
  {
    "": 1025,
    "Problem": "How to handle error handling and exceptions using ORM?",
    "Solution": "Use the ORM library's built-in support for error handling and exceptions. For example, in SQLAlchemy, you can use the `@validates()` decorator to validate an object's attributes, and the `@exceptions()` decorator to specify exceptions that can be raised by an operation."
  },
  {
    "": 1026,
    "Problem": "re.findall(r'A\\b\\w+', 'This is a sample text with words starting with A')\n     8",
    "Solution": "Check if a given string contains only letters and spaces"
  },
  {
    "": 1027,
    "Problem": "Extract all HTML tags from a given text",
    "Solution": "re.findall(r'<(\\w+)[^>]*>', '<p>This is a sample text with HTML tags</p>')\n    10"
  },
  {
    "": 1028,
    "Problem": "Get the title of a webpage",
    "Solution": "import requests<br>response = requests.get(\"https://www.example.com\")<br>title = response.json()[\"title\"]<br>print(title)"
  },
  {
    "": 1029,
    "Problem": "Get the HTML content of a webpage",
    "Solution": "import requests<br>response = requests.get(\"https://www.example.com\")<br>content = response.text<br>print(content)"
  },
  {
    "": 1030,
    "Problem": "Get the URL of a webpage",
    "Solution": "import requests<br>response = requests.get(\"https://www.example.com\")<br>url = response.url<br>print(url)"
  },
  {
    "": 1031,
    "Problem": "Send a POST request with data",
    "Solution": "import requests<br>data = {\"key1\": \"value1\", \"key2\": \"value2\"}<br>response = requests.post(\"https://www.example.com\", data=data)<br>print(response.json())"
  },
  {
    "": 1032,
    "Problem": "Send a GET request with parameters",
    "Solution": "import requests<br>params = {\"param1\": \"value1\", \"param2\": \"value2\"}<br>response = requests.get(\"https://www.example.com\", params=params)<br>print(response.json())"
  },
  {
    "": 1033,
    "Problem": "Get the headers of a webpage",
    "Solution": "import requests<br>response = requests.get(\"https://www.example.com\")<br>headers = response.headers<br>print(headers)"
  },
  {
    "": 1034,
    "Problem": "Get the cookies of a webpage",
    "Solution": "import requests<br>response = requests.get(\"https://www.example.com\")<br>cookies = response.cookies<br>print(cookies)"
  },
  {
    "": 1035,
    "Problem": "Send a PUT request with data",
    "Solution": "import requests<br>data = {\"key1\": \"value1\", \"key2\": \"value2\"}<br>response = requests.put(\"https://www.example.com\", data=data)<br>print(response.json())"
  },
  {
    "": 1036,
    "Problem": "Send a DELETE request",
    "Solution": "import requests<br>response = requests.delete(\"https://www.example.com\")<br>print(response.json())"
  },
  {
    "": 1037,
    "Problem": "Get the status code of a webpage",
    "Solution": "import requests<br>response = requests.get(\"https://www.example.com\")<br>status_code = response.status_code<br>print(status_code)"
  },
  {
    "": 1038,
    "Problem": "Authenticate a user using a username and password",
    "Solution": "def authenticate_user(username, password):<br>    # Check if the username and password are correct<br>    if username == 'john' and password == 'password':<br>        return 'Welcome, John!'<br>    else:<br>        return 'Invalid credentials'<br>"
  },
  {
    "": 1039,
    "Problem": "Implement a secure login system",
    "Solution": "from flask import Flask, request, session<br>import flask_login<br>from flask_login import LoginManager, UserMixin, AnonymousUserMixin<br>import hashlib<br>app = Flask(__name__)<br>app.config['SECRET_KEY'] = 'secret_key_here'<br>login_manager = LoginManager()<br>login_manager.init_app(app)<br>login_manager.login_view = 'auth.login'<br>class User(UserMixin, db.Model):<br>    id = db.Column(db.Integer, primary_key=True)<br>    username = db.Column(db.String(64), unique=True, nullable=False)<br>    email = db.Column(db.String(120), unique=True, nullable=False)<br>    password = db.Column(db.String(128), nullable=False)<br>    def __repr__(self):<br>        return f\"User('{self.username}', '{self.email}')\"<br>class AnonymousUser(AnonymousUserMixin):<br>    def __repr__(self):<br>        return 'AnonymousUser'<br>@login_manager.user_loader<br>def user_loader(username):<br>    user = User.query.filter_by(username=username).first()<br>    if user is None:<br>        return AnonymousUser()<br>    return user<br>@app.route('/login', methods=['GET', 'POST'])<br>def login():<br>    if request.method == 'POST':<br>        username = request.form['username']<br>        password = request.form['password']<br>        user = User.query.filter_by(username=username).first()<br>        if user is None:<br>            return 'Invalid credentials', 401<br>        if not user.password == password:<br>            return 'Invalid credentials', 401<br>        session['user_id'] = user.id<br>        return 'Welcome, ' + user.username, 200<br>    return render_template('login.html')<br>"
  },
  {
    "": 1040,
    "Problem": "Implement a cache for a web application using Python's built-in dictionary data structure",
    "Solution": "Here's an example solution: <code>cache = {}</code> <code>def get_cache(key):</code> <code>if key in cache:</code> <code>return cache[key]</code> <code>else:</code> <code>cache[key] = compute_result(key)</code> <code>return cache[key]</code>"
  },
  {
    "": 1041,
    "Problem": "Implement a cache for a web application using Redis",
    "Solution": "Here's an example solution: <code>import redis</code> <code>cache = redis.Redis(host='localhost', port=6379, db=0)</code> <code>def get_cache(key):</code> <code>return cache.get(key)</code> <code>def set_cache(key, value):</code> <code>cache.set(key, value)</code>"
  },
  {
    "": 1042,
    "Problem": "Implement a cache for a web application using Memcached",
    "Solution": "Here's an example solution: <code>import memcached</code> <code>cache = memcached.Memcached(hosts=['localhost:11211'])</code> <code>def get_cache(key):</code> <code>return cache.get(key)</code> <code>def set_cache(key, value):</code> <code>cache.set(key, value)</code>"
  },
  {
    "": 1043,
    "Problem": "How do you serialize a Python dictionary to JSON?",
    "Solution": "import json; json.dumps(my_dict)"
  },
  {
    "": 1044,
    "Problem": "How do you deserialize a JSON string to a Python dictionary?",
    "Solution": "import json; my_dict = json.loads(json_string)"
  },
  {
    "": 1045,
    "Problem": "How do you convert a Python list to a JSON array?",
    "Solution": "import json; json.dumps(my_list)"
  },
  {
    "": 1046,
    "Problem": "How do you convert a JSON array to a Python list?",
    "Solution": "import json; my_list = json.loads(json_array)"
  },
  {
    "": 1047,
    "Problem": "How do you serialize a Python object to a JSON object?",
    "Solution": "import json; json.dumps(my_object)"
  },
  {
    "": 1048,
    "Problem": "How do you deserialize a JSON object to a Python object?",
    "Solution": "import json; my_object = json.loads(json_object)"
  },
  {
    "": 1049,
    "Problem": "How do you convert a Python set to a JSON set?",
    "Solution": "import json; json.dumps(my_set)"
  },
  {
    "": 1050,
    "Problem": "How do you convert a JSON set to a Python set?",
    "Solution": "import json; my_set = json.loads(json_set)"
  },
  {
    "": 1051,
    "Problem": "How do you serialize a Python frozenset to a JSON frozenset?",
    "Solution": "import json; json.dumps(my_frozenset)"
  },
  {
    "": 1052,
    "Problem": "Design a microservices architecture for a web application that handles user authentication, shopping cart, and order management.",
    "Solution": "Solution: <python>import os...</python>"
  },
  {
    "": 1053,
    "Problem": "Implement a service discovery mechanism for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import discovery...</python>"
  },
  {
    "": 1054,
    "Problem": "Develop a monitoring and logging system for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import logging...</python>"
  },
  {
    "": 1055,
    "Problem": "Create a load balancer for a microservices architecture that distributes incoming traffic across multiple services.",
    "Solution": "Solution: <python>import balancer...</python>"
  },
  {
    "": 1056,
    "Problem": "Implement a circuit breaker pattern for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import circuit_breaker...</python>"
  },
  {
    "": 1057,
    "Problem": "Develop a metrics and performance monitoring system for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import metrics...</python>"
  },
  {
    "": 1058,
    "Problem": "Design a fault-tolerant microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import fault_tolerance...</python>"
  },
  {
    "": 1059,
    "Problem": "Implement a versioning and backwards compatibility strategy for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import versioning...</python>"
  },
  {
    "": 1060,
    "Problem": "Develop a security strategy for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import security...</python>"
  },
  {
    "": 1061,
    "Problem": "Create a deployment pipeline for a microservices architecture that includes multiple services and deploy them on a cloud platform.",
    "Solution": "Solution: <python>import deployment...</python>"
  },
  {
    "": 1062,
    "Problem": "Create a Kubernetes deployment with a retry mechanism",
    "Solution": "python -m kubectl create deployment my-app --image=my-app:latest --retry"
  },
  {
    "": 1063,
    "Problem": "Update a Kubernetes deployment with a new image",
    "Solution": "python -m kubectl rollout undo deployment my-app --image=my-app:latest --to-version=2"
  },
  {
    "": 1064,
    "Problem": "Create a Kubernetes service with a cluster IP",
    "Solution": "python -m kubectl expose deployment my-app --type=clusterip --port=80"
  },
  {
    "": 1065,
    "Problem": "Create a Kubernetes ConfigMap to store configuration data",
    "Solution": "python -m kubectl create configmap my-config --from-literal=key1=value1 --from-literal=key2=value2"
  },
  {
    "": 1066,
    "Problem": "Create a Kubernetes Secret to store sensitive data",
    "Solution": "python -m kubectl create secret generic my-secret --from-literal=key1=value1 --from-literal=key2=value2"
  },
  {
    "": 1067,
    "Problem": "Create a Kubernetes deployment with a DaemonSet",
    "Solution": "python -m kubectl create deployment my-daemonset --image=my-daemonset:latest --daemon"
  },
  {
    "": 1068,
    "Problem": "Create a Kubernetes deployment with a StatefulSet",
    "Solution": "python -m kubectl create deployment my-statefulset --image=my-statefulset:latest --stateful"
  },
  {
    "": 1069,
    "Problem": "Create a Kubernetes CronJob to schedule a job",
    "Solution": "python -m kubectl create cronjob my-cronjob --image=my-cronjob:latest --schedule=\"0 0/1 * * *"
  },
  {
    "": 1070,
    "Problem": "Create a Kubernetes deployment with a ReplicaSet",
    "Solution": "python -m kubectl create deployment my-replicaset --image=my-replicaset:latest --replicas=3"
  },
  {
    "": 1071,
    "Problem": "Create a Kubernetes Ingress resource with a Path",
    "Solution": "python -m kubectl create ingress my-ingress --rule=Host:my-app --path=/path1"
  },
  {
    "": 1072,
    "Problem": "Write a Python script to deploy a simple web application using AWS Elastic Beanstalk.",
    "Solution": "import boto3 import os env = {‘VARIABLE_1’: ‘value1’, ‘VARIABLE_2’: ‘value2’} eb = boto3.client('elasticbeanstalk') environment = eb.create_environment(ApplicationName='myapp', EnvironmentName='myenv', PlatformArn='arn:aws:elasticbeanstalk:us-east-1:123456789012:environment/myenv', TemplateName='aws_elastic_beanstalk/environment', VersionLabel='1.0') environment.update(EnvironmentName='myenv') print(environment.describe_environment(EnvironmentName='myenv'))"
  },
  {
    "": 1073,
    "Problem": "Write a Python script to automate the creation of an AWS S3 bucket with public read access.",
    "Solution": "import boto3 s3 = boto3.client('s3') bucket = s3.create_bucket(Bucket='mybucket') bucket.public_read_access(enabled=True) print(bucket.name)"
  },
  {
    "": 1074,
    "Problem": "Write a Python script to create an AWS Lambda function that retrieves data from an AWS DynamoDB table and sends it to a specified SNS topic.",
    "Solution": "import boto3 lambda_client = boto3.client('lambda') dynamodb = boto3.client('dynamodb') sns = boto3.client('sns') function_name = 'my_function' function_code = 'import boto3 import json def lambda_handler(event, context): table_name = “mytable” response = dynamodb.get_item(TableName=table_name) item = response[“Item”] data = json.dumps(item) sns.publish(TopicArn=“arn:aws:sns:us-east-1:123456789012:mytopic”, Message=data) return {“statusCode”: 200, “body”: “OK”} ' lambda_client.create_function(FunctionName=function_name, Runtime='python3.8', Role='arn:aws:iam::123456789012:role/myrole', Handler=function_code, Environment={'Variables': {'TABLE_NAME': table_name}})"
  },
  {
    "": 1075,
    "Problem": "Implement a virtualization layer using Python",
    "Solution": "Write a Python script that uses the QEMU emulator to virtualize a Linux operating system on a Windows host. The script should be able to run the virtualized Linux system and allow it to communicate with the host machine."
  },
  {
    "": 1076,
    "Problem": "Create a virtual network using Python",
    "Solution": "Write a Python script that uses the Mininet library to create a virtual network consisting of multiple virtual machines. The script should be able to configure the network settings for each virtual machine and allow them to communicate with each other."
  },
  {
    "": 1077,
    "Problem": "Implement a virtualized storage solution using Python",
    "Solution": "Write a Python script that uses the iSCSI protocol to provide a virtualized storage solution for a virtual machine. The script should be able to connect to an iSCSI target and provide a block device that can be used by the virtual machine."
  },
  {
    "": 1078,
    "Problem": "Create a virtualized Kubernetes cluster using Python",
    "Solution": "Write a Python script that uses the Kubernetes API to create a virtualized Kubernetes cluster on a cloud provider. The script should be able to create virtual machines that run Kubernetes nodes and configure the cluster to run a sample application."
  },
  {
    "": 1079,
    "Problem": "Implement a virtualization-based security solution using Python",
    "Solution": "Write a Python script that uses virtualization to implement a security solution that isolates a vulnerable application from the rest of the system. The script should be able to create a virtual machine that runs the application and restrict access to the virtual machine using Linux permissions."
  },
  {
    "": 1080,
    "Problem": "Create a virtualized database using Python",
    "Solution": "Write a Python script that uses the SQLAlchemy library to create a virtualized database that can be accessed over a network. The script should be able to create a database instance on a virtual machine and allow a remote client to connect to the database using a SQL client."
  },
  {
    "": 1081,
    "Problem": "Implement a virtualized web server using Python",
    "Solution": "Write a Python script that uses the Flask web framework to create a virtualized web server that can be accessed over a network. The script should be able to create a virtual machine that runs the web server and configure the web server to listen on a network interface."
  },
  {
    "": 1082,
    "Problem": "Create a virtualized big data solution using Python",
    "Solution": "Write a Python script that uses the Hadoop and Spark libraries to create a virtualized big data solution that can process large amounts of data. The script should be able to create a virtual machine that runs the Hadoop and Spark frameworks and configure the frameworks to process data stored on a virtualized storage solution."
  },
  {
    "": 1083,
    "Problem": "Implement a virtualization-based disaster recovery solution using Python",
    "Solution": "Write a Python script that uses virtualization to implement a disaster recovery solution that can restore a virtual machine from a backup. The script should be able to create a virtual machine that runs a backup application and configure the backup application to restore the virtual machine in case of a disaster."
  },
  {
    "": 1084,
    "Problem": "Create a virtualized containerized application using Python",
    "Solution": "Write a Python script that uses the Docker library to create a virtualized containerized application that can be run on a cloud provider. The script should be able to create a Docker container that runs the application and configure the container to communicate with a virtualized database."
  },
  {
    "": 1085,
    "Problem": "Write a Python program to simulate a distributed system using the \"shared variable\" approach",
    "Solution": "Here's a possible solution: <code>...</code>"
  },
  {
    "": 1086,
    "Problem": "Write a Python script that can ping a given IP address and print the response time",
    "Solution": "import socket;<br>host = 'www.google.com';<br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM);<br>sock.connect((host, 80));<br>start_time = time.time();<br>sock.send(b'GET / HTTP/1.1\\r\\nHost: www.google.com\\r\\n\\r\\n');<br>end_time = time.time();<br>print(f'Response time: {end_time - start_time:.2f} seconds');<br>sock.close()"
  },
  {
    "": 1087,
    "Problem": "Write a Python script that can perform a DNS lookup for a given domain name and print the IP address",
    "Solution": "import socket;<br>domain = 'www.google.com';<br>sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM);<br>sock.connect((socket.gethostbyname(domain), 80));<br>ip = sock.getpeercert()[0]['ip'];<br>print(f'IP address: {ip}');<br>sock.close()"
  },
  {
    "": 1088,
    "Problem": "Implement OAuth authentication for a web application",
    "Solution": "import requests; <br>response = requests.post('https://example.com/oauth/token', data={'client_id': '123456789', 'client_secret': '123456789', 'grant_type': 'client_credentials'}); <br>print(response.json()['access_token'])"
  },
  {
    "": 1089,
    "Problem": "Validate a JSON Web Token (JWT)",
    "Solution": "import jwt; <br>token = 'eyJrZXkiOiAidmFsdWUiOlt7IlJlc29sdmFsImlzcyI6Imh0dHA6Ly9zdGF0aWMuY29tL3F1ZXN0aW9ucyIsInVzZXJfaWQiOiAidmFsdWUifQ==\"; <br>try: <br>payload = jwt.decode(token, 'secret_key', algorithms=['HS256']); <br>print(payload) <br>except jwt.ExpiredSignatureError: <br>print(\"Token has expired\") <br>except jwt.InvalidTokenError: <br>print(\"Invalid token\")"
  },
  {
    "": 1090,
    "Problem": "Implement JWT authentication for a web application",
    "Solution": "import jwt; <br>def generate_token(user_id): <br>return jwt.encode({'user_id': user_id}, 'secret_key', algorithms=['HS256']); <br>def validate_token(token): <br>try: <br>payload = jwt.decode(token, 'secret_key', algorithms=['HS256']); <br>return payload['user_id'] <br>except jwt.ExpiredSignatureError: <br>return None <br>except jwt.InvalidTokenError: <br>return None; <br>user_id = 123; <br>token = generate_token(user_id); <br>print(validate_token(token))"
  },
  {
    "": 1091,
    "Problem": "Optimize the performance of a Python script that reads and processes a large CSV file.",
    "Solution": "Use the pandas library to read the CSV file and perform operations on the data in chunks, rather than loading the entire file into memory at once."
  },
  {
    "": 1092,
    "Problem": "Improve the performance of a Python function that calculates the sum of a list of numbers.",
    "Solution": "Use the sum() function to calculate the sum of the list instead of iterating over the list and adding up the numbers manually."
  },
  {
    "": 1093,
    "Problem": "Optimize the performance of a Python program that performs a lot of string concatenation operations.",
    "Solution": "Use the join() function to concatenate strings instead of using the + operator, which can lead to slow performance due to the creation of multiple intermediate strings."
  },
  {
    "": 1094,
    "Problem": "Improve the performance of a Python script that reads and writes data to a database.",
    "Solution": "Use a database connection pool to reduce the overhead of creating and closing database connections, and use parameterized queries to prevent SQL injection attacks and improve performance."
  },
  {
    "": 1095,
    "Problem": "Optimize the performance of a Python program that performs a lot of file I/O operations.",
    "Solution": "Use the os module to perform file I/O operations in a more efficient way, and use the with statement to ensure that files are properly closed even if an exception is thrown."
  },
  {
    "": 1096,
    "Problem": "Improve the performance of a Python script that processes a large number of images.",
    "Solution": "Use the Pillow library to process images in parallel using multiple CPU cores, and use the joblib library to parallelize the processing of images using multiple processes."
  },
  {
    "": 1097,
    "Problem": "Optimize the performance of a Python program that performs a lot of regular expression matches.",
    "Solution": "Use the re2 library, which provides a faster and more efficient implementation of regular expressions, and use the re.compile() function to precompile regular expressions for even faster matching."
  },
  {
    "": 1098,
    "Problem": "Improve the performance of a Python script that processes a large number of JSON data.",
    "Solution": "Use the json module to parse and generate JSON data in a more efficient way, and use the json.dumps() function to generate JSON data in a more efficient way than using the str() function."
  },
  {
    "": 1099,
    "Problem": "Optimize the performance of a Python program that performs a lot of networking I/O operations.",
    "Solution": "Use the socket module to perform networking I/O operations in a more efficient way, and use the select() function to efficiently wait for incoming data on multiple sockets."
  },
  {
    "": 1100,
    "Problem": "Improve the performance of a Python script that processes a large number of scientific computing operations.",
    "Solution": "Use the NumPy and SciPy libraries to perform scientific computing operations in a more efficient way, and use the Cython language to write performance-critical parts of the code in a more efficient way."
  },
  {
    "": 1101,
    "Problem": "Given a list of tasks and a list of workers, write a function to assign tasks to workers in a way that minimizes the total processing time.",
    "Solution": "def assign_tasks(tasks, workers): ..."
  },
  {
    "": 1102,
    "Problem": "Write a program to find the shortest path in a graph represented by adjacency matrix.",
    "Solution": "def shortest_path(graph): ..."
  },
  {
    "": 1103,
    "Problem": "Given a list of integers, write a function to find the first pair of integers that add up to a given target value.",
    "Solution": "def find_pair(numbers, target): ..."
  },
  {
    "": 1104,
    "Problem": "Given a list of IP addresses, write a function to determine the number of unique IP addresses in the list.",
    "Solution": "def unique_ips(ips): <br>    seen = set() <br>    count = 0 <br>    for ip in ips: <br>        if ip not in seen: <br>            seen.add(ip) <br>            count += 1 <br>    return count <br>"
  },
  {
    "": 1105,
    "Problem": "Write a function to determine the maximum number of concurrent connections that can be made to a server from a list of IP addresses.",
    "Solution": "def max_concurrency(ips): <br>    seen = set() <br>    max_concurrency = 0 <br>    for ip in ips: <br>        if ip not in seen: <br>            seen.add(ip) <br>            max_concurrency = max(max_concurrency, len(seen)) <br>    return max_concurrency <br>"
  },
  {
    "": 1106,
    "Problem": "Given a list of URLs, write a function to determine the number of unique domains.",
    "Solution": "def unique_domains(urls): <br>    seen = set() <br>    count = 0 <br>    for url in urls: <br>        domain = url.split(\"://\")[1] <br>        if domain not in seen: <br>            seen.add(domain) <br>            count += 1 <br>    return count <br>"
  },
  {
    "": 1107,
    "Problem": "Testing17 |\n       9",
    "Solution": "Testing18 |\n      10"
  },
  {
    "": 1108,
    "Problem": "How to mock a function that returns a dynamic value?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that returns a dynamic value."
  },
  {
    "": 1109,
    "Problem": "How to mock a function that takes a variable number of arguments?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that takes a variable number of arguments."
  },
  {
    "": 1110,
    "Problem": "How to mock a function that returns a generator?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that returns a generator."
  },
  {
    "": 1111,
    "Problem": "How to mock a function that uses a static method?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that uses a static method."
  },
  {
    "": 1112,
    "Problem": "How to mock a function that uses a class method?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that uses a class method."
  },
  {
    "": 1113,
    "Problem": "How to mock a function that returns a property?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that returns a property."
  },
  {
    "": 1114,
    "Problem": "How to mock a function that uses a context manager?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that uses a context manager."
  },
  {
    "": 1115,
    "Problem": "How to mock a function that returns a coroutine?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that returns a coroutine."
  },
  {
    "": 1116,
    "Problem": "How to mock a function that uses a decorator?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that uses a decorator."
  },
  {
    "": 1117,
    "Problem": "How to mock a function that returns a lazy object?",
    "Solution": "Use the `Mock` class from the `unittest.mock` module to create a mock function that returns a lazy object."
  },
  {
    "": 1118,
    "Problem": "Refactor a loop that calculates the sum of numbers from 1 to 100",
    "Solution": "```python\nsum = 0\nfor i in range(1, 101):\n    sum += i\nprint(sum)\n```"
  },
  {
    "": 1119,
    "Problem": "Refactor a function that takes a list of numbers and returns the sum of the even numbers",
    "Solution": "```python\ndef sum_evens(numbers):\n    sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            sum += num\n    return sum\nprint(sum_evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n```"
  },
  {
    "": 1120,
    "Problem": "Refactor a class that has multiple methods that perform the same action",
    "Solution": "```python\nclass Myclass:\n    def __init__(self):\n        pass\n    \n    def method1(self):\n        print(\"Hello World!\")\n    \n    def method2(self):\n        print(\"Hello World!\")\n    \n    def method3(self):\n        print(\"Hello World!\")\n```"
  },
  {
    "": 1121,
    "Problem": "Refactor a piece of code that uses a switch statement to determine the day of the week",
    "Solution": "```python\ndef day_of_week(date):\n    switch date.weekday():\n        case 0:\n            return \"Monday\"\n        case 1:\n            return \"Tuesday\"\n        case 2:\n            return \"Wednesday\"\n        case 3:\n            return \"Thursday\"\n        case 4:\n            return \"Friday\"\n        case 5:\n            return \"Saturday\"\n        case 6:\n            return \"Sunday\"\n    return \"Unknown\"\nprint(day_of_week(datetime.date.today()))\n```"
  },
  {
    "": 1122,
    "Problem": "Refactor a piece of code that uses a series of if-else statements to determine the color of a car",
    "Solution": "```python\ndef car_color(color):\n    if color == \"red\":\n        return \"Stop\"\n    elif color == \"green\":\n        return \"Go\"\n    elif color == \"blue\":\n        return \"Caution\"\n    else:\n        return \"Unknown\"\nprint(car_color(\"blue\"))\n```"
  },
  {
    "": 1123,
    "Problem": "Refactor a piece of code that uses a list comprehension to generate a list of numbers",
    "Solution": "```python\nnumbers = [x * 2 for x in range(1, 6)]\nprint(numbers)\n```"
  },
  {
    "": 1124,
    "Problem": "Refactor a piece of code that uses a dictionary to store names and ages",
    "Solution": "```python\npeople = {\n    \"Alice\": 25,\n    \"Bob\": 30,\n    \"Charlie\": 35\n}\nprint(people[\"Alice\"])\n```"
  },
  {
    "": 1125,
    "Problem": "Refactor a piece of code that uses a for loop to iterate over a list and perform an action",
    "Solution": "```python\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    print(num)\n```"
  },
  {
    "": 1126,
    "Problem": "Refactor a piece of code that uses a lambda function to calculate the sum of two numbers",
    "Solution": "```python\nsum = lambda a, b: a + b\nprint(sum(3, 4))\n```"
  },
  {
    "": 1127,
    "Problem": "Refactor a piece of code that uses a nested if-else statement to determine the winner of a game",
    "Solution": "```python\ndef winner(player1, player2):\n    if player1 > player2:\n        return \"Player 1\"\n    elif player2 > player1:\n        return \"Player 2\"\n    else:\n        return \"Tie\"\nprint(winner(5, 3))\n```"
  },
  {
    "": 1128,
    "Problem": "How to check if a number is negative, positive, or zero?",
    "Solution": "`if num < 0: print(\"negative\") elif num > 0: print(\"positive\") else: print(\"zero\")`"
  },
  {
    "": 1129,
    "Problem": "How to find the maximum value in a list?",
    "Solution": "`max_value = max(my_list)`"
  },
  {
    "": 1130,
    "Problem": "How to check if a string is empty?",
    "Solution": "`if not my_string: print(\"string is empty\")`"
  },
  {
    "": 1131,
    "Problem": "How to find the sum of all elements in a list?",
    "Solution": "`total = sum(my_list)`"
  },
  {
    "": 1132,
    "Problem": "How to check if a number is even or odd?",
    "Solution": "`if num % 2 == 0: print(\"even\") else: print(\"odd\")`"
  },
  {
    "": 1133,
    "Problem": "Implement a basic Agile project management system using Python",
    "Solution": "'system that uses Python to track and manage project progress'"
  },
  {
    "": 1134,
    "Problem": "Write a program to automate the creation of a burn-down chart",
    "Solution": "'program that uses Python to read data from a CSV file and create a burn-down chart'"
  },
  {
    "": 1135,
    "Problem": "Create a chatbot that assists in Agile development processes",
    "Solution": "'chatbot that uses NLTK and spaCy to understand and respond to development queries'"
  },
  {
    "": 1136,
    "Problem": "Build a web scraper to extract Agile development resources",
    "Solution": "'scraper that uses BeautifulSoup to parse HTML and extract resources'"
  },
  {
    "": 1137,
    "Problem": "Write a program to calculate the velocity of a development team",
    "Solution": "'program that uses Python to calculate the velocity of a team based on their past performance'"
  },
  {
    "": 1138,
    "Problem": "Implement a simple Agile project planning tool using Python",
    "Solution": "'tool that uses Python to create a project plan and track progress'"
  },
  {
    "": 1139,
    "Problem": "Create a program to automate the creation of a sprint backlog",
    "Solution": "'program that uses Python to read data from a CSV file and create a sprint backlog'"
  },
  {
    "": 1140,
    "Problem": "Write a function to calculate the lead time of a development process",
    "Solution": "'function that uses Python to calculate the lead time based on the development process'"
  },
  {
    "": 1141,
    "Problem": "Implement a basic Agile metrics tracking system using Python",
    "Solution": "'system that uses Python to track and display Agile metrics such as burn-down charts and lead time'"
  },
  {
    "": 1142,
    "Problem": "Create a program to automate the creation of a release plan",
    "Solution": "'program that uses Python to read data from a CSV file and create a release plan'"
  },
  {
    "": 1143,
    "Problem": "As a Product Owner, how would you ensure that the Development Team is working on the highest priority features?",
    "Solution": "Use the MoSCoW method to prioritize the backlog and ensure that the Development Team is working on the highest priority features first."
  },
  {
    "": 1144,
    "Problem": "How to automate login functionality using Selenium?",
    "Solution": ""
  },
  {
    "": 1145,
    "Problem": "How to test a web application's UI using Pytest?",
    "Solution": ""
  },
  {
    "": 1146,
    "Problem": "Design a system that can handle a large number of concurrent users",
    "Solution": "Use a load balancer to distribute incoming requests across multiple instances of a web application, and implement a queuing system to handle requests when the instances are busy."
  },
  {
    "": 1147,
    "Problem": "Create a system that can scale horizontally",
    "Solution": "Use a microservices architecture, where each service is designed to handle a specific task, and deploy each service on a separate machine or container. This will allow the system to scale horizontally by adding more machines or containers as needed."
  },
  {
    "": 1148,
    "Problem": "Develop a system that can handle a high volume of data",
    "Solution": "Use a distributed database that can handle a large volume of data and scale horizontally, and implement a data processing pipeline that can handle data in parallel."
  },
  {
    "": 1149,
    "Problem": "Design a system that can handle a high rate of requests",
    "Solution": "Use a caching layer to store frequently accessed data, and implement a content delivery network to reduce the distance between the user and the data."
  },
  {
    "": 1150,
    "Problem": "Create a system that can handle a large number of complex queries",
    "Solution": "Use a distributed search engine that can handle complex queries and scale horizontally, and implement a data warehousing system that can handle large amounts of data."
  },
  {
    "": 1151,
    "Problem": "How to debug a Python script that is not running as expected?",
    "Solution": "Import pdb; pdb.set_trace()"
  },
  {
    "": 1152,
    "Problem": "How to debug a Python function that is not returning the expected output?",
    "Solution": "Use print statements to print out intermediate variables and their values"
  },
  {
    "": 1153,
    "Problem": "How to debug a Python class that is not instantiating correctly?",
    "Solution": "Use a debugger to step through the code and examine variable values"
  },
  {
    "": 1154,
    "Problem": "How to debug a Python script that is crashing due to a NameError?",
    "Solution": "Use pdb to set a breakpoint at the point where the NameError is occurring and examine the local variables"
  },
  {
    "": 1155,
    "Problem": "How to debug a Python script that is running slowly?",
    "Solution": "Use the built-in profiler to identify performance bottlenecks"
  },
  {
    "": 1156,
    "Problem": "How to debug a Python script that is producing incorrect output?",
    "Solution": "Use print statements to print out intermediate variables and their values, and compare them to expected outputs"
  },
  {
    "": 1157,
    "Problem": "How to debug a Python script that is not handling errors correctly?",
    "Solution": "Use try-except blocks and the pdb debugger to step through the code and examine variable values"
  },
  {
    "": 1158,
    "Problem": "How to debug a Python script that is not running in the correct environment?",
    "Solution": "Use the os module to print out the current working directory and environment variables"
  },
  {
    "": 1159,
    "Problem": "How to debug a Python script that is not installing correctly?",
    "Solution": "Use the pip debugger to step through the installation process and examine variable values"
  },
  {
    "": 1160,
    "Problem": "Write a Python script to automate the process of creating a new branch in a Git repository.",
    "Solution": "Here is a sample solution:<br><br>def create_new_branch(repo_name, branch_name):<br>repo = git.Repository(repo_name)<br>new_branch = repo.create_branch(branch_name)<br>new_branch.commit(\"Initial commit\")<br>return new_branch<br><br># usage: create_new_branch(\"my_repo\", \"feature/my_new_feature\")"
  },
  {
    "": 1161,
    "Problem": "Write a Python script to automate the process of creating a pull request in a Git repository.",
    "Solution": "Here is a sample solution:<br><br>def create_pull_request(repo_name, source_branch, target_branch):<br>repo = git.Repository(repo_name)<br>source_branch = repo.branch(source_branch)<br>target_branch = repo.branch(target_branch)<br>pull_request = repo.create_pull_request(source_branch, target_branch)<br>pull_request.commit(\"Initial commit\")<br>return pull_request<br><br># usage: create_pull_request(\"my_repo\", \"feature/my_new_feature\", \"main/master\")"
  },
  {
    "": 1162,
    "Problem": "Write a Python script to automate the process of creating a new tag in a Git repository.",
    "Solution": "Here is a sample solution:<br><br>def create_new_tag(repo_name, tag_name, message):<br>repo = git.Repository(repo_name)<br>tag = repo.create_tag(tag_name, message)<br>return tag<br><br># usage: create_new_tag(\"my_repo\", \"v1.0\", \"Initial release\")"
  },
  {
    "": 1163,
    "Problem": "Continuous monitoring of database performance",
    "Solution": "import psycopg2; conn = psycopg2.connect(host=\"localhost\", dbname=\"mydatabase\"); cur = conn.cursor(); cur.execute(\"SELECT * FROM mytable\"); print(cur.fetchall());"
  },
  {
    "": 1164,
    "Problem": "Automatic scaling of resources based on demand",
    "Solution": "import boto3; ec2 = boto3.client(\"ec2\"); print(ec2.describe_instances(InstanceIds=[\"i-1234567890abcdef\"]));"
  },
  {
    "": 1165,
    "Problem": "Real-time alerting for security breaches",
    "Solution": "import pandas as pd; import numpy as np; data = pd.read_csv(\"security_log.csv\"); print(f\"Security alert: {np.mean(data['severity']) > 5}\")"
  },
  {
    "": 1166,
    "Problem": "A/B testing for user interface changes",
    "Solution": "import random; def ab_test(feature): if random.random() < 0.5: print(\"Feature A enabled\"); else: print(\"Feature B enabled\");"
  },
  {
    "": 1167,
    "Problem": "Automated backups to cloud storage",
    "Solution": "import boto3; def backup_to_cloud(data): boto3.client(\"s3\").put_object(Body=data, Bucket=\"mybucket\", Key=\"backup.csv\");"
  },
  {
    "": 1168,
    "Problem": "Continuous monitoring of application logs",
    "Solution": "import pandas as pd; import numpy as np; data = pd.read_csv(\"application_log.csv\"); print(f\"Log analysis: {np.mean(data['error_rate']) > 5}\")"
  },
  {
    "": 1169,
    "Problem": "Automatic deployment to containerized environment",
    "Solution": "import docker; image = docker.Image.from_dict({\"name\": \"myimage\", \"labels\": {\"version\": \"1.0\"}}); container = docker.Container.from_image(image); container.start();"
  },
  {
    "": 1170,
    "Problem": "Real-time analytics for website traffic",
    "Solution": "import pandas as pd; import numpy as np; data = pd.read_csv(\"traffic_data.csv\"); print(f\"Traffic analysis: {np.mean(data['page_views']) > 5}\")"
  },
  {
    "": 1171,
    "Problem": "A/B testing for email marketing campaigns",
    "Solution": "import random; def ab_test(campaign): if random.random() < 0.5: print(\"Campaign A enabled\"); else: print(\"Campaign B enabled\");"
  },
  {
    "": 1172,
    "Problem": "Automated compliance reporting for regulatory requirements",
    "Solution": "import pandas as pd; import numpy as np; data = pd.read_csv(\"compliance_data.csv\"); print(f\"Compliance report: {np.mean(data['compliance_score']) > 5}\")"
  },
  {
    "": 1173,
    "Problem": "How to deploy a web application using a blue-green deployment strategy?",
    "Solution": "import os; import subprocess; <br>blue_env = \"blue\"; green_env = \"green\"; <br>def deploy(env): <br> &nbsp;&nbsp;if env == blue_env: <br> &nbsp;&nbsp;&nbsp;&nbsp;print(\"Deploying to blue environment\"); <br> &nbsp;&nbsp;&nbsp;&nbsp;subprocess.run([\"git\", \"deploy\", \"blue\"]) <br> &nbsp;&nbsp;else: <br> &nbsp;&nbsp;&nbsp;&nbsp;print(\"Deploying to green environment\"); <br> &nbsp;&nbsp;&nbsp;&nbsp;subprocess.run([\"git\", \"deploy\", \"green\"]) <br> &nbsp;&nbsp;return env <br> <br>deploy(blue_env) <br>deploy(green_env)"
  },
  {
    "": 1174,
    "Problem": "How to implement a canary deployment strategy for a microservices architecture?",
    "Solution": "import random; import time; <br>services = [\"service1\", \"service2\", \"service3\"]; <br>def canary_deploy(service): <br> &nbsp;&nbsp;if random.random() < 0.5: <br> &nbsp;&nbsp;&nbsp;&nbsp;print(\"Deploying canary version of\", service); <br> &nbsp;&nbsp;&nbsp;&nbsp;subprocess.run([\"git\", \"deploy\", \"canary\", service]) <br> &nbsp;&nbsp;else: <br> &nbsp;&nbsp;&nbsp;&nbsp;print(\"Deploying stable version of\", service); <br> &nbsp;&nbsp;&nbsp;&nbsp;subprocess.run([\"git\", \"deploy\", \"stable\", service]) <br> &nbsp;&nbsp;return service <br> <br>canary_deploy(services[0]) <br>canary_deploy(services[1]) <br>canary_deploy(services[2])"
  },
  {
    "": 1175,
    "Problem": "Write a Python script to automate the creation of a new user account on a Linux system.",
    "Solution": "import os; import subprocess; def create_user(name, age, email): useradd(name, -m, age, email); return \"User created successfully.\"; create_user(\"John\", 27, \"john@example.com\")"
  },
  {
    "": 1176,
    "Problem": "Write a Python script to automatically backup a MySQL database.",
    "Solution": "import mysql.connector; def backup_db(host, username, password, db_name): cursor = mysql.connector.connect(host=host, user=username, password=password, db=db_name); cursor.execute(\"SELECT * FROM {}\".format(db_name)); results = cursor.fetchall(); open(\"backup_{}.sql\".format(db_name), \"w\").write(\"\".join(results)); return \"Backup created successfully.\"; backup_db(\"localhost\", \"root\", \"password\", \"mydatabase\")"
  },
  {
    "": 1177,
    "Problem": "Calculate the cyclomatic complexity of a given Python function",
    "Solution": "def cyclomatic_complexity(func):\nreturn len(nx.bfs_tree(func).nodes()) - 1"
  },
  {
    "": 1178,
    "Problem": "Calculate the halstead volume of a given Python function",
    "Solution": "def halstead_volume(func):\nlines = len(func.split(\"\\n\"))\noperators = len(re.findall(r\"\\W+\", func))\noperands = len(re.findall(r\"\\w+\", func))\nreturn lines, operators, operands"
  },
  {
    "": 1179,
    "Problem": "Check if a given Python function is a palindrome",
    "Solution": "def is_palindrome(func):\nreturn func == func[::-1]"
  },
  {
    "": 1180,
    "Problem": "Calculate the number of unique variables in a given Python function",
    "Solution": "def num_variables(func):\nvariables = set()\nfor line in func.split(\"\\n\"):\nvariables.update(line.split())\nreturn len(variables)"
  },
  {
    "": 1181,
    "Problem": "Calculate the maximum nesting depth of a given Python function",
    "Solution": "def max_nesting_depth(func):\nnesting_depth = 0\nfor line in func.split(\"\\n\"):\nif line.startswith(\"(\"):\nnesting_depth += 1\nelif line.startswith(\")\"):\nnesting_depth -= 1\nreturn nesting_depth"
  },
  {
    "": 1182,
    "Problem": "Check if a given Python function is a tail recursive",
    "Solution": "def is_tail_recursive(func):\nreturn func.endswith(\"return\") and func.count(\"(\") == func.count(\")\")"
  },
  {
    "": 1183,
    "Problem": "Calculate the number of comments in a given Python function",
    "Solution": "def num_comments(func):\nreturn len(re.findall(r\"#.*?$\", func))"
  },
  {
    "": 1184,
    "Problem": "Calculate the number of blank lines in a given Python function",
    "Solution": "def num_blank_lines(func):\nreturn len(re.findall(r\"\\n+\", func))"
  },
  {
    "": 1185,
    "Problem": "Check if a given Python function is a pure function",
    "Solution": "def is_pure(func):\nreturn func.startswith(\"def\") and not func.startswith(\"def \") and func.count(\"=\") == 1 and func.count(\"}\") == 1"
  },
  {
    "": 1186,
    "Problem": "How to install the latest version of requests using pip?",
    "Solution": "`pip install requests`"
  },
  {
    "": 1187,
    "Problem": "How to update all packages to the latest version using pip?",
    "Solution": "`pip update -U`"
  },
  {
    "": 1188,
    "Problem": "How to install a specific version of a package using pip?",
    "Solution": "`pip install package==version`"
  },
  {
    "": 1189,
    "Problem": "How to check the version of a package installed using pip?",
    "Solution": "`pip show package`"
  },
  {
    "": 1190,
    "Problem": "How to uninstall a package using pip?",
    "Solution": "`pip uninstall package`"
  },
  {
    "": 1191,
    "Problem": "How to install a package from a requirements.txt file using pip?",
    "Solution": "`pip install -r requirements.txt`"
  },
  {
    "": 1192,
    "Problem": "How to update a package to a specific version using pip?",
    "Solution": "`pip install package==version`"
  },
  {
    "": 1193,
    "Problem": "How to check if a package is installed using pip?",
    "Solution": "`pip list package`"
  },
  {
    "": 1194,
    "Problem": "How to install a package from a wheel file using pip?",
    "Solution": "`pip install wheel`"
  },
  {
    "": 1195,
    "Problem": "How can you version control a Python script using Git?",
    "Solution": "import git; git.version_control(\"script.py\")"
  },
  {
    "": 1196,
    "Problem": "What is the difference between Git and Mercurial for Python development?",
    "Solution": "Git and Mercurial are both version control systems, but they have different workflows and features. Git is more popular and widely used, while Mercurial has a smaller learning curve."
  },
  {
    "": 1197,
    "Problem": "How can you create a branch in a Git repository for a Python project?",
    "Solution": "To create a branch in a Git repository for a Python project, use the command `git branch new_branch`. Then, switch to the new branch by running `git checkout new_branch`."
  },
  {
    "": 1198,
    "Problem": "How can you resolve a conflict between two branches in a Git repository for a Python project?",
    "Solution": "To resolve a conflict between two branches in a Git repository for a Python project, use the command `git merge --no-commit branch1 branch2`. Then, resolve any conflicts manually by editing the files and committing the changes."
  },
  {
    "": 1199,
    "Problem": "What is the purpose of a pull request in Git for a Python project?",
    "Solution": "A pull request in Git for a Python project allows a developer to propose changes to a repository. It allows other developers to review the changes and approve or reject them before they are merged into the main branch."
  },
  {
    "": 1200,
    "Problem": "How can you create a pull request in Git for a Python project?",
    "Solution": "To create a pull request in Git for a Python project, first create a new branch for the changes you want to make. Then, make the changes and commit them. Finally, use the command `git pull_request` to create the pull request."
  },
  {
    "": 1201,
    "Problem": "How can you review a pull request in Git for a Python project?",
    "Solution": "To review a pull request in Git for a Python project, use the command `git pull_request review`. This will open the pull request in your default web browser, where you can view the changes and leave comments."
  },
  {
    "": 1202,
    "Problem": "How can you merge a pull request in Git for a Python project?",
    "Solution": "To merge a pull request in Git for a Python project, use the command `git pull_request merge`. This will merge the changes from the pull request into the main branch."
  },
  {
    "": 1203,
    "Problem": "What is the purpose of a tag in Git for a Python project?",
    "Solution": "A tag in Git for a Python project allows you to mark a specific version of the codebase. This can be useful for tracking releases or versions of the code."
  },
  {
    "": 1204,
    "Problem": "How can you create a tag in Git for a Python project?",
    "Solution": "To create a tag in Git for a Python project, use the command `git tag -a version`. This will create a new tag with the specified version number."
  },
  {
    "": 1205,
    "Problem": "How to create a backup plan for a web application",
    "Solution": "Write a Python script that uses the `backup` module to create a backup of the web application's database and files. The script should be run daily and send a notification to the development team if the backup is successful or not."
  },
  {
    "": 1206,
    "Problem": "How to implement a disaster recovery plan for a cloud-based application",
    "Solution": "Write a Python script that uses the `boto3` module to create a snapshot of the application's database and files. The script should be run weekly and send a notification to the development team if the snapshot is successful or not."
  },
  {
    "": 1207,
    "Problem": "How to create a redundant storage system for a web application",
    "Solution": "Write a Python script that uses the `swift` module to create a redundant storage system for the web application's files. The script should be run monthly and send a notification to the development team if the storage system is successful or not."
  },
  {
    "": 1208,
    "Problem": "How to implement a backup and recovery plan for a database",
    "Solution": "Write a Python script that uses the `psycopg2` module to create a backup of the database and restore it in case of a disaster. The script should be run daily and send a notification to the development team if the backup and restore are successful or not."
  },
  {
    "": 1209,
    "Problem": "How to create a disaster recovery plan for a web server",
    "Solution": "Write a Python script that uses the `fabric` module to create a disaster recovery plan for the web server. The script should be run monthly and send a notification to the development team if the plan is successful or not."
  },
  {
    "": 1210,
    "Problem": "How to implement a load balancing system for a web application",
    "Solution": "Write a Python script that uses the `haproxy` module to create a load balancing system for the web application. The script should be run weekly and send a notification to the development team if the load balancing system is successful or not."
  },
  {
    "": 1211,
    "Problem": "How to create a failover system for a web application",
    "Solution": "Write a Python script that uses the `pacemaker` module to create a failover system for the web application. The script should be run monthly and send a notification to the development team if the failover system is successful or not."
  },
  {
    "": 1212,
    "Problem": "How to implement a scalable storage system for a web application",
    "Solution": "Write a Python script that uses the `ceph` module to create a scalable storage system for the web application. The script should be run weekly and send a notification to the development team if the storage system is successful or not."
  },
  {
    "": 1213,
    "Problem": "How to create a backup and recovery plan for a file system",
    "Solution": "Write a Python script that uses the `rsync` module to create a backup of the file system and restore it in case of a disaster. The script should be run daily and send a notification to the development team if the backup and restore are successful or not."
  },
  {
    "": 1214,
    "Problem": "How to implement a disaster recovery plan for a network",
    "Solution": "Write a Python script that uses the `networkx` module to create a disaster recovery plan for the network. The script should be run monthly and send a notification to the development team if the plan is successful or not."
  }
]